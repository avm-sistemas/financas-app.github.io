var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AplicativoModule.html",[0,2.127,1,2.127]],["body/modules/AplicativoModule.html",[0,3.463,1,4.315,2,2.33,3,2.33,4,2.837,5,2.837,6,2.33,7,4.216,8,4.216,9,3.214,10,3.214,11,3.214,12,3.895,13,3.603,14,0.025,15,3.625,16,3.625,17,3.625,18,3.759,19,2.837,20,2.837,21,0.241,22,0.241,23,0.209,24,3.786,25,0.209,26,4.259,27,3.759,28,2.276,29,3.797,30,3.797,31,3.797,32,3.797,33,3.797,34,0.509,35,1.099,36,3.214,37,1.842,38,3.786,39,2.555,40,2.555,41,3.214,42,3.786,43,3.214,44,3.088,45,3.214,46,3.786,47,3.214,48,1.287,49,2.33,50,2.84,51,2.837,52,3.786,53,3.214,54,1.456,55,2.837,56,3.786,57,3.214,58,2.627,59,2.837,60,3.786,61,3.214,62,3.214,63,3.786,64,3.786,65,2.837,66,3.214,67,3.786,68,3.786,69,3.786,70,0.241,71,0.136,72,0.017,73,0.017]],["title/controllers/AppController.html",[74,1.209,75,2.333]],["body/controllers/AppController.html",[14,0.025,21,0.287,22,0.287,23,0.25,25,0.25,28,2.047,34,0.461,35,1.31,70,0.287,71,0.162,72,0.019,73,0.019,74,1.578,75,3.79,76,3.831,77,2.554,78,4.513,79,3.179,80,5.19,81,3.202,82,0.287,83,1.964,84,2.138,85,5.431,86,0.782,87,0.446,88,4.513,89,5.616,90,5.616,91,3.113,92,3.179,93,5.431,94,5.616,95,1.964,96,1.964,97,4.767,98,4.767,99,4.767,100,3.725,101,3.831,102,2.554,103,0.677,104,2.554,105,2.554,106,4.513,107,4.513,108,1.578,109,1.845,110,1.681,111,0.405,112,3.831,113,1.681,114,3.381,115,1.483,116,1.483,117,4.513]],["title/modules/AppModule.html",[0,2.127,118,2.333]],["body/modules/AppModule.html",[0,3.784,1,4.142,2,2.811,3,2.811,4,3.422,5,3.422,6,2.811,7,4.606,8,3.422,14,0.025,18,4.239,19,3.422,20,3.422,21,0.29,22,0.29,23,0.253,25,0.253,26,4.803,28,2.567,34,0.491,35,1.326,36,3.877,37,2.223,62,4.803,70,0.29,71,0.164,72,0.019,73,0.019,75,4.149,81,2.963,100,3.809,101,3.877,111,0.507,118,4.651,119,3.877,120,3.877,121,4.568,122,4.568,123,5.658,124,5.658,125,4.568,126,3.422,127,4.568,128,4.568,129,4.568,130,3.877,131,4.568,132,4.568,133,4.568,134,1.747,135,2.392]],["title/injectables/AppService.html",[100,1.956,136,1.136]],["body/injectables/AppService.html",[14,0.024,21,0.305,22,0.305,23,0.266,25,0.266,34,0.346,35,1.394,70,0.305,71,0.172,72,0.02,73,0.02,80,4.952,82,0.305,83,2.04,84,2.198,85,5.549,87,0.475,91,2.839,92,3.7,93,4.952,95,2.04,96,2.04,97,4.952,98,4.952,99,4.952,100,3.302,109,1.917,116,1.577,134,1.482,136,1.917,137,2.514,138,4.075,139,2.596,140,4.801,141,4.952,142,4.952,143,4.371,144,4.952,145,2.474,146,5.834,147,1.907]],["title/entities/Authentication.html",[44,2.127,148,1.067]],["body/entities/Authentication.html",[14,0.025,21,0.226,22,0.226,23,0.197,25,0.197,34,0.421,44,2.961,48,1.7,70,0.226,71,0.172,72,0.016,73,0.016,82,0.226,86,1.134,87,0.647,103,0.534,134,2.02,148,1.098,149,1.862,150,3.019,151,2.961,152,1.911,153,1.02,154,2.474,155,2.855,156,1.398,157,2.855,158,2.474,159,2.474,160,1.156,161,0.624,162,3.294,163,2.189,164,2.961,165,3.871,166,2.723,167,2.961,168,3.556,169,2.189,170,2.961,171,3.556,172,1.012,173,2.189,174,4.811,175,3.595,176,3.595,177,2.961,178,2.961,179,3.556,180,0.634,181,3.355,182,4.811,183,3.556,184,3.556,185,2.189,186,2.961,187,3.595,188,2.961,189,3.556,190,2.4,191,3.604,192,3.247,193,3.679,194,3.019,195,3.942,196,3.247,197,4.811,198,3.556,199,2.961,200,3.556,201,2.961,202,2.961,203,2.961,204,2.961,205,2.4,206,3.556,207,3.756,208,2.961,209,2.189,210,2.961,211,2.961,212,2.961,213,2.961,214,1.412,215,2.183,216,1.412,217,2.664,218,1.47,219,3.556,220,1.479,221,2.013,222,2.189,223,3.019]],["title/controllers/AuthenticationController.html",[29,2.333,74,1.209]],["body/controllers/AuthenticationController.html",[12,3.112,14,0.025,21,0.23,22,0.23,23,0.2,25,0.325,28,1.64,29,3.283,34,0.473,35,1.049,43,3.068,48,1.41,70,0.23,71,0.13,72,0.016,73,0.016,74,1.264,77,2.046,79,2.753,82,0.23,83,1.701,84,1.922,86,0.953,87,0.544,95,2.21,96,1.701,102,2.046,103,0.542,104,2.046,105,2.046,108,1.264,109,1.188,110,1.346,111,0.567,113,2.19,114,2.708,116,1.806,145,2.494,152,2.565,157,2.547,161,0.324,220,1.243,224,3.068,225,3.615,226,4.864,227,4.129,228,3.615,229,3.615,230,3.615,231,3.079,232,1.356,233,5.88,234,2.183,235,1.41,236,5.365,237,4.991,238,4.991,239,5.88,240,3.615,241,3.615,242,3.615,243,3.615,244,4.141,245,3.615,246,3.615,247,1.173,248,3.644,249,2.753,250,3.615,251,3.068,252,3.615,253,3.068,254,3.383,255,3.615,256,2.225,257,2.225,258,2.225,259,2.225,260,2.439,261,3.615,262,1.188,263,1.436,264,3.615,265,3.615,266,1.533,267,1.346,268,2.046,269,3.615,270,3.615,271,3.615,272,3.615,273,3.615,274,3.615,275,3.615,276,3.615,277,3.068,278,3.615,279,3.615,280,1.436,281,2.063,282,1.436,283,3.615]],["title/guards/AuthenticationGuard.html",[260,2.333,284,2.333]],["body/guards/AuthenticationGuard.html",[14,0.025,21,0.227,22,0.227,23,0.198,25,0.303,34,0.422,35,1.039,39,2.416,40,2.416,41,3.039,65,2.683,66,3.039,70,0.227,71,0.128,72,0.016,73,0.016,82,0.227,83,1.69,84,1.913,87,0.541,91,2.85,95,2.048,96,1.69,108,1.252,109,1.588,110,1.8,111,0.602,112,4.102,113,2.038,114,2.683,116,1.588,134,1.106,136,1.588,145,2.484,147,1.422,152,1.919,157,3.374,161,0.548,180,0.593,220,1.237,232,0.959,234,2.173,235,1.403,249,2.736,253,5.636,260,3.262,267,1.8,280,2.326,282,1.422,284,3.262,285,3.58,286,3.039,287,5.857,288,2.32,289,4.833,290,3.58,291,5.469,292,3.58,293,4.833,294,4.833,295,5.857,296,3.58,297,4.102,298,4.833,299,4.833,300,4.833,301,4.833,302,4.972,303,4.833,304,4.833,305,3.58,306,4.833,307,2.352,308,4.833,309,4.102,310,4.099,311,4.644,312,3.039,313,3.039,314,3.58,315,3.58,316,4.102,317,2.531,318,2.027,319,4.644,320,3.58,321,3.58,322,3.58,323,3.039,324,3.58,325,3.58,326,3.58,327,3.58,328,3.58,329,2.027,330,3.58,331,3.58]],["title/injectables/AuthenticationService.html",[12,1.956,136,1.136]],["body/injectables/AuthenticationService.html",[12,1.559,13,2.104,14,0.025,21,0.107,22,0.107,23,0.093,25,0.307,34,0.399,35,0.491,37,0.822,39,1.14,44,3.08,45,1.434,48,1.456,54,1.167,70,0.107,71,0.061,72,0.009,73,0.009,82,0.107,83,0.963,84,2.309,87,0.549,95,2.144,96,2.026,108,1.405,109,0.905,110,1.026,111,0.594,113,2.228,115,0.555,116,1.936,134,1.82,135,0.885,136,0.905,137,0.885,139,1.885,144,2.337,145,1.168,148,0.522,152,2.669,154,0.767,155,0.885,156,1.135,157,0.885,158,0.767,160,1.268,161,0.484,172,0.696,180,0.724,214,0.671,220,1.254,227,2.337,232,1.292,234,2.203,235,1.423,247,1.179,251,1.434,262,0.555,263,0.671,266,1.168,267,1.026,280,2.46,281,2.012,282,2.301,288,2.012,291,4.247,310,1.266,311,2.958,316,3.756,317,3.033,318,2.832,319,1.434,329,2.832,332,1.434,333,1.34,334,1.249,335,3.485,336,2.754,337,1.858,338,1.695,339,1.34,340,2.754,341,1.04,342,3.211,343,3.485,344,1.69,345,1.695,346,1.249,347,1.34,348,3.211,349,1.69,350,1.249,351,0.623,352,4.019,353,1.442,354,1.69,355,1.34,356,1.336,357,1.659,358,2.754,359,5.004,360,1.69,361,2.485,362,4.019,363,1.956,364,1.823,365,1.34,366,2.905,367,4.028,368,2.754,369,1.858,370,1.69,371,1.823,372,1.695,373,1.69,374,0.799,375,2.754,376,2.754,377,1.69,378,2.754,379,2.754,380,4.019,381,1.69,382,2.754,383,2.611,384,1.695,385,2.724,386,1.69,387,1.34,388,0.663,389,2.754,390,3.756,391,1.69,392,2.754,393,1.69,394,1.69,395,1.04,396,1.69,397,1.648,398,0.767,399,2.337,400,1.266,401,1.69,402,1.69,403,2.337,404,1.69,405,2.958,406,1.69,407,1.434,408,0.885,409,1.434,410,2.754,411,1.69,412,4.425,413,2.754,414,1.69,415,3.244,416,2.448,417,1.69,418,1.69,419,1.69,420,1.547,421,0.767,422,3.211,423,2.921,424,2.921,425,1.04,426,0.957,427,1.14,428,2.921,429,2.921,430,2.104,431,1.767,432,1.704,433,1.04,434,1.695,435,1.69,436,1.266,437,1.69,438,1.973,439,1.434,440,1.04,441,3.211,442,2.145,443,2.724,444,1.14,445,1.14,446,3.485,447,1.69,448,1.14,449,1.695,450,1.04,451,2.473,452,2.145,453,1.695,454,1.69,455,1.69,456,2.754,457,2.754,458,2.754,459,2.754,460,2.337]],["title/entities/Conta.html",[54,1.003,148,1.067]],["body/entities/Conta.html",[14,0.025,21,0.18,22,0.18,23,0.157,25,0.157,34,0.381,48,1.615,54,1.536,58,3.065,70,0.18,71,0.102,72,0.014,73,0.014,82,0.18,86,1.163,87,0.664,103,0.426,134,2.084,147,1.631,148,0.876,149,1.485,151,2.527,153,0.87,154,2.19,155,2.527,156,1.238,158,2.19,159,2.19,160,1.023,161,0.619,162,3.065,163,1.746,164,2.527,165,3.602,166,3.707,167,2.527,169,1.746,170,2.527,172,1.135,173,1.746,175,4.03,176,3.256,177,2.527,178,2.527,180,0.635,181,3.877,185,1.746,186,2.527,187,3.602,188,2.527,190,1.914,191,3.076,192,3.57,193,4.073,194,2.408,195,3.57,196,2.771,199,3.256,201,2.527,202,2.527,203,2.527,204,2.527,205,1.914,207,3.987,208,2.527,209,1.746,210,2.527,211,2.527,212,2.527,213,2.527,214,1.126,217,2.125,218,1.56,220,1.506,221,1.605,222,1.746,235,1.053,421,2.19,431,2.382,438,3.499,461,2.408,462,2.348,463,3.616,464,2.047,465,3.257,466,3.257,467,3.257,468,3.257,469,3.485,470,2.836,471,2.836,472,2.836,473,3.485,474,2.836,475,3.485,476,2.836,477,2.408,478,4.106,479,3.485,480,3.076,481,3.485,482,2.836,483,3.485,484,2.836,485,4.106,486,2.836,487,4.106,488,2.836,489,4.106,490,2.836,491,4.106,492,2.836,493,2.836,494,4.106,495,2.836,496,2.836,497,2.836,498,3.485,499,2.836,500,2.836]],["title/controllers/ContaController.html",[32,2.333,74,1.209]],["body/controllers/ContaController.html",[14,0.025,15,2.788,21,0.187,22,0.187,23,0.163,25,0.328,28,1.334,32,2.844,34,0.457,35,0.854,54,2.046,55,2.203,57,2.496,70,0.187,71,0.105,72,0.014,73,0.014,74,1.028,77,1.665,79,2.385,82,0.187,83,1.474,84,2.359,86,0.987,87,0.563,95,2.255,96,2.255,102,1.665,103,0.441,104,1.665,105,1.665,108,1.474,109,0.966,110,1.095,111,0.608,113,2.273,115,0.966,116,1.871,145,1.787,156,1.519,160,1.044,161,0.511,172,1.082,180,0.583,220,1.287,232,1.068,234,2.261,235,1.46,247,1.235,254,2.594,256,2.594,257,1.81,258,1.81,259,1.81,262,0.966,263,1.168,266,1.247,267,1.835,268,1.665,280,1.674,281,2.281,282,2.261,288,1.247,333,2.051,334,2.235,339,2.051,347,1.431,350,1.912,351,0.953,353,1.54,355,2.051,356,1.503,357,1.474,361,2.817,371,1.912,374,1.72,387,2.051,388,1.015,397,1.095,398,1.334,501,2.496,502,2.941,503,2.594,504,4.214,505,3.223,506,1.985,507,3.324,508,2.941,509,2.385,510,3.577,511,2.941,512,2.207,513,1.81,514,2.844,515,2.941,516,2.941,517,4.214,518,2.941,519,2.594,520,3.504,521,2.203,522,3.223,523,3.324,524,2.941,525,1.985,526,1.985,527,2.496,528,2.941,529,1.985,530,2.941,531,2.941,532,2.941,533,2.941,534,1.985,535,2.203,536,2.203,537,2.496,538,1.985,539,1.985,540,2.203,541,2.203,542,2.203]],["title/injectables/ContaService.html",[15,1.956,136,1.136]],["body/injectables/ContaService.html",[14,0.025,15,1.701,21,0.12,22,0.12,23,0.104,25,0.3,34,0.377,35,0.547,37,0.916,54,2.003,55,1.411,70,0.12,71,0.067,72,0.01,73,0.01,82,0.12,83,1.051,84,2.234,87,0.517,95,2.087,96,2.087,108,1.497,109,0.987,110,1.119,111,0.563,113,2.023,115,0.619,116,2.017,134,2.013,135,0.986,136,0.987,137,0.986,139,1.7,148,0.928,154,0.854,155,0.986,156,1.472,158,0.854,159,1.363,160,1.284,161,0.469,172,0.941,180,0.647,214,0.748,220,1.182,221,1.701,232,1.078,234,2.077,235,1.341,247,1.108,262,0.619,263,0.748,266,1.274,267,1.119,280,2.37,281,2.114,282,2.328,288,1.274,317,2.739,318,2.961,329,2.961,333,1.462,334,1.363,337,2.028,338,1.85,339,1.462,341,1.159,342,3.343,345,1.85,346,1.363,347,1.462,350,1.363,351,0.967,353,1.574,355,1.462,356,1.383,357,1.743,361,2.61,369,2.028,371,1.942,372,1.85,384,1.85,387,1.462,395,1.159,397,1.948,398,0.854,415,3.45,416,2.874,420,1.743,421,0.854,422,3.779,423,3.608,424,3.608,425,1.159,426,1.066,427,1.271,428,3.608,429,3.608,430,2.61,431,2.223,432,2.114,433,2.308,434,1.85,436,1.411,438,2.122,440,1.159,441,3.446,442,2.634,443,3.068,444,1.271,445,1.271,448,1.271,449,1.85,450,1.159,451,2.634,452,2.308,453,1.85,462,0.916,463,1.411,464,1.274,465,1.271,466,1.271,467,1.271,468,1.271,505,2.647,509,3.25,519,1.85,520,3.068,522,2.647,527,1.599,543,1.599,544,3.005,545,4.44,546,1.883,547,1.883,548,1.883,549,3.005,550,1.883,551,1.883,552,1.883,553,1.883,554,1.883,555,1.271,556,1.411,557,1.883,558,3.005,559,1.599,560,2.551,561,1.883,562,1.883,563,1.883,564,1.883,565,1.883,566,1.883,567,1.883,568,1.883,569,1.599,570,1.599,571,1.599,572,1.599,573,1.599,574,1.883,575,1.599,576,1.599,577,1.599,578,1.599,579,1.599,580,1.883,581,1.883,582,1.883,583,1.599,584,2.551,585,2.252,586,1.599]],["title/classes/CreateAuthenticationDto.html",[71,0.124,348,2.127]],["body/classes/CreateAuthenticationDto.html",[14,0.025,21,0.285,22,0.285,23,0.248,25,0.248,34,0.403,48,1.718,49,2.763,70,0.356,71,0.201,72,0.019,73,0.019,82,0.285,86,1.057,87,0.603,103,0.674,111,0.616,152,2.61,153,1.187,157,3.441,160,1.293,161,0.547,180,0.693,218,1.637,232,1.111,247,1.132,249,3.169,348,3.445,351,1.265,356,1.348,357,1.958,385,2.763,388,1.081,587,1.386,588,4.785,589,1.386,590,4.49,591,4.49,592,4.49,593,1.672,594,1.672,595,3.811]],["title/classes/CreateContaDto.html",[71,0.124,505,1.956]],["body/classes/CreateContaDto.html",[14,0.025,21,0.236,22,0.236,23,0.206,25,0.206,34,0.268,54,1.962,70,0.315,71,0.178,72,0.017,73,0.017,82,0.236,86,1.128,87,0.644,103,0.559,111,0.625,139,2.531,153,1.051,159,2.531,160,0.789,161,0.583,172,1.171,180,0.672,218,1.685,232,0.985,247,1.036,351,1.121,356,1.344,357,1.302,374,1.44,388,0.896,420,1.735,462,2.715,464,2.628,465,3.765,466,3.765,467,3.765,468,3.765,505,2.808,522,2.107,587,1.149,589,1.149,593,1.386,594,1.386,596,4.952,597,3.159,598,3.347,599,3.159,600,3.159,601,5.61,602,4.21,603,4.21,604,5.051,605,4.21,606,2.789,607,4.21,608,3.159,609,3.159,610,3.053,611,4.21,612,3.347,613,4.21,614,3.159,615,3.159]],["title/classes/CreateLancamentoDto.html",[71,0.124,616,1.956]],["body/classes/CreateLancamentoDto.html",[14,0.025,21,0.239,22,0.239,23,0.208,25,0.208,34,0.271,54,1.45,70,0.317,71,0.179,72,0.017,73,0.017,82,0.239,86,1.148,87,0.655,103,0.564,111,0.612,153,1.058,160,0.797,161,0.594,162,2.615,172,1.035,180,0.75,218,1.698,247,1.041,351,1.129,356,1.35,357,1.315,371,2.265,388,0.905,420,2.174,462,2.728,464,2.118,512,3.347,587,1.161,589,1.161,593,1.4,594,1.4,597,3.191,598,3.37,599,3.191,600,3.191,606,2.817,608,3.191,609,3.191,614,3.191,616,2.826,617,5.024,618,4.196,619,3.784,620,2.378,621,3.784,622,3.784,623,3.827,624,4.238,625,4.238,626,3.759,627,3.741,628,3.741,629,4.238,630,2.826,631,4.238,632,2.128,633,3.191]],["title/classes/CreateNotificationDto.html",[71,0.124,634,1.956]],["body/classes/CreateNotificationDto.html",[14,0.025,21,0.283,22,0.283,23,0.247,25,0.247,34,0.401,70,0.354,71,0.218,72,0.019,73,0.019,82,0.283,86,0.966,87,0.551,103,0.669,111,0.621,153,1.182,159,2.759,160,0.945,161,0.5,172,0.966,180,0.66,215,2.529,216,1.771,218,1.58,232,1.107,235,1.429,247,1.129,351,1.26,356,1.465,357,1.559,374,1.618,388,1.074,416,2.529,432,2.579,587,1.377,589,1.377,593,1.661,594,1.661,634,3.155,635,4.556,636,3.921,637,3.341,638,3.785,639,3.762,640,4.459,641,3.431,642,3.762,643,3.785,644,2.919,645,2.524,646,3.785]],["title/classes/CreateUserDto.html",[71,0.124,647,1.682]],["body/classes/CreateUserDto.html",[14,0.025,21,0.233,22,0.233,23,0.203,25,0.203,34,0.353,48,1.259,70,0.376,71,0.221,72,0.017,73,0.017,81,1.919,82,0.233,86,1.025,87,0.585,91,1.784,103,0.55,111,0.614,115,2.303,147,1.456,152,1.456,153,1.041,156,0.94,161,0.53,172,0.959,180,0.731,215,2.879,216,1.456,218,1.637,220,1.251,232,1.349,247,1.144,351,1.11,356,0.883,363,2.878,364,2.512,365,2.694,366,2.899,374,1.064,388,1.182,408,2.899,421,1.663,464,2.082,587,1.132,589,1.132,593,1.365,594,1.365,606,2.746,620,1.554,630,2.779,637,2.746,644,2.899,647,2.389,648,3.49,649,2.878,650,3.111,651,3.665,652,3.111,653,3.665,654,3.665,655,3.022,656,3.313,657,2.779,658,2.779,659,2.256,660,2.256,661,1.784,662,2.473,663,2.473,664,2.473,665,2.473,666,2.075,667,2.779,668,1.784,669,2.473]],["title/interfaces/IResponse.html",[262,1.136,670,2.333]],["body/interfaces/IResponse.html",[14,0.025,21,0.297,22,0.297,23,0.258,25,0.258,70,0.297,72,0.019,73,0.019,82,0.297,92,2.645,111,0.615,139,1.856,147,2.466,153,1.216,161,0.581,180,0.674,262,1.885,346,2.603,415,3.392,420,2.265,430,3.392,432,2.747,639,3.873,641,3.532,642,3.873,670,3.873,671,4.673,672,3.967,673,5.643,674,4.871,675,4.299,676,5.498,677,4.871,678,4.871]],["title/entities/Lancamento.html",[58,1.81,148,1.067]],["body/entities/Lancamento.html",[14,0.025,21,0.194,22,0.194,23,0.169,25,0.169,34,0.362,54,1.861,58,2.265,70,0.194,71,0.109,72,0.015,73,0.015,82,0.194,86,1.168,87,0.667,103,0.458,134,1.979,148,0.942,149,1.597,151,2.662,153,0.917,154,2.28,155,2.632,156,1.289,158,2.28,160,1.065,161,0.627,162,3.403,163,1.877,164,2.662,165,3.691,166,3.095,167,2.662,169,1.877,170,2.662,172,1.039,173,1.877,175,3.366,176,3.366,177,2.662,178,2.662,180,0.72,181,3.945,185,1.877,186,2.662,187,2.662,188,2.662,190,2.058,196,2.919,199,4.149,201,2.662,202,2.662,203,2.662,204,2.662,207,4.046,208,2.662,209,1.877,210,2.662,211,2.662,212,2.662,213,2.662,214,1.211,218,1.583,220,1.524,221,2.448,222,1.877,223,2.589,420,1.757,431,2.421,462,2.445,473,3.671,475,4.642,512,2.265,618,3.391,619,3.391,620,2.131,621,3.391,622,3.391,623,3.093,679,2.589,680,4.325,681,3.05,682,3.05,683,4.325,684,3.05,685,3.05,686,3.05,687,4.325,688,3.05,689,3.05,690,3.05,691,4.325,692,3.05,693,3.671,694,3.05,695,4.325,696,3.05,697,4.325,698,3.05,699,3.05,700,3.05,701,3.05,702,4.325,703,3.05,704,2.589,705,3.05,706,3.05,707,3.05]],["title/controllers/LancamentoController.html",[33,2.333,74,1.209]],["body/controllers/LancamentoController.html",[14,0.025,16,2.783,21,0.186,22,0.186,23,0.162,25,0.327,28,1.33,33,2.837,34,0.457,35,0.851,54,1.559,58,3.099,59,2.196,61,2.488,70,0.186,71,0.105,72,0.014,73,0.014,74,1.025,77,1.659,79,2.38,82,0.186,83,1.47,84,2.358,86,0.985,87,0.562,95,2.253,96,2.253,102,1.659,103,0.44,104,1.659,105,1.659,108,1.47,109,0.963,110,1.092,111,0.614,113,2.27,115,0.963,116,1.868,145,2.51,156,1.518,160,1.042,161,0.51,172,1.081,180,0.583,220,1.285,231,2.202,234,2.258,235,1.458,247,1.234,254,2.588,256,2.588,257,1.804,258,1.804,259,1.804,262,0.963,263,1.164,266,1.243,267,1.092,268,1.659,280,1.67,281,2.278,282,2.258,288,1.243,307,2.046,333,2.046,334,2.23,339,2.046,347,1.426,350,1.907,351,0.95,353,1.535,355,2.046,356,1.294,357,1.47,374,1.559,387,2.046,388,1.013,397,1.092,398,1.33,503,2.588,506,1.978,507,3.318,509,2.38,510,3.569,512,3.638,513,1.804,514,2.837,521,2.196,523,3.318,525,1.978,526,1.978,529,1.978,534,1.978,535,2.196,536,2.196,537,2.488,538,1.978,539,1.978,540,2.196,541,2.196,542,2.196,610,3.026,616,3.219,632,3.219,708,2.488,709,4.204,710,3.569,711,2.931,712,2.931,713,2.931,714,4.204,715,2.931,716,4.204,717,2.931,718,4.204,719,3.15,720,2.588,721,2.38,722,3.569,723,2.931,724,2.488,725,2.931,726,2.931,727,2.931,728,2.931,729,2.931]],["title/injectables/LancamentoService.html",[16,1.956,136,1.136]],["body/injectables/LancamentoService.html",[14,0.025,16,1.683,21,0.118,22,0.118,23,0.103,25,0.288,34,0.375,35,0.539,37,0.904,54,1.349,58,2.831,59,1.392,70,0.118,71,0.067,72,0.01,73,0.01,82,0.118,83,1.04,84,2.228,87,0.515,95,2.079,96,2.079,108,1.485,109,0.977,110,1.107,111,0.59,113,2.013,115,0.61,116,1.984,134,1.967,135,0.973,136,0.977,137,0.973,139,1.687,148,0.918,156,1.334,160,1.297,161,0.467,172,0.902,180,0.633,214,0.738,220,1.176,231,1.557,234,2.066,235,1.334,247,1.104,262,0.61,263,0.738,266,1.261,267,1.107,280,2.362,281,2.101,282,2.319,288,1.261,307,2.782,317,2.919,318,2.945,329,2.945,333,1.447,334,1.349,337,2.006,338,1.83,339,1.447,341,1.144,342,3.327,345,1.83,346,1.349,347,1.447,350,1.349,351,0.672,353,1.557,355,1.447,361,2.224,369,2.006,372,1.83,374,1.618,384,1.83,387,1.447,388,0.716,395,1.144,397,1.938,398,0.843,415,3.443,416,2.866,420,1.89,422,3.717,423,3.594,424,3.594,425,1.144,426,1.052,427,1.254,428,3.594,429,3.594,430,2.595,431,2.215,432,2.101,433,2.287,434,1.83,438,1.683,440,1.144,441,3.431,442,2.614,443,3.05,444,1.254,445,1.254,448,1.254,449,1.83,450,1.144,451,2.614,452,2.287,453,1.83,462,0.904,463,2.227,509,1.683,512,3.568,519,1.83,545,4.416,555,1.254,556,1.392,559,1.577,560,2.523,570,1.577,571,1.577,572,1.577,573,1.577,575,1.577,576,1.577,577,1.577,578,1.577,579,1.577,583,1.577,584,2.523,585,2.227,586,1.577,610,2.614,616,2.629,618,1.254,619,3.135,620,0.788,621,1.254,622,1.254,623,1.144,632,2.629,710,2.523,720,1.83,721,3.155,724,1.577,730,1.577,731,1.858,732,1.858,733,1.858,734,3.943,735,2.973,736,1.858,737,1.858,738,1.858,739,1.858,740,1.858,741,1.858,742,2.973,743,1.858,744,2.973,745,1.858,746,2.973,747,1.858,748,2.973,749,1.858,750,2.973,751,1.858,752,2.973,753,1.858,754,2.973,755,1.858,756,1.858,757,1.858,758,1.858,759,1.858,760,1.858,761,1.858,762,1.858]],["title/classes/LoginUserDto.html",[71,0.124,666,1.956]],["body/classes/LoginUserDto.html",[14,0.025,21,0.245,22,0.245,23,0.213,25,0.213,34,0.365,48,0.988,70,0.383,71,0.225,72,0.017,73,0.017,81,2.658,82,0.245,86,0.879,87,0.502,91,1.875,103,0.578,111,0.61,115,2.279,147,1.53,152,2.016,153,1.076,156,0.988,161,0.455,172,0.879,180,0.731,215,2.92,216,1.53,218,1.638,220,0.871,232,1.361,247,1.164,351,0.871,356,0.928,363,2.935,364,2.575,365,2.762,366,2.972,374,1.118,388,1.222,408,2.018,421,1.748,464,1.634,587,1.19,589,1.19,593,1.435,594,1.435,620,1.634,630,2.181,644,2.972,647,1.875,648,3.212,649,2.935,655,2.371,656,2.6,657,2.181,658,2.873,659,2.371,660,2.371,661,1.875,662,2.6,663,2.6,664,2.6,665,2.6,666,2.873,667,2.873,668,1.875,669,2.6,763,5.075,764,3.853,765,3.853]],["title/entities/Notification.html",[50,1.956,148,1.067]],["body/entities/Notification.html",[14,0.025,21,0.219,22,0.219,23,0.191,25,0.191,34,0.415,48,1.725,50,2.665,70,0.219,71,0.169,72,0.016,73,0.016,82,0.299,86,1.125,87,0.642,103,0.517,134,2.034,148,1.064,149,1.804,151,2.897,153,0.998,154,2.433,155,2.808,156,1.375,158,2.433,159,2.433,160,1.137,161,0.616,162,3.263,163,2.12,164,2.897,165,3.835,166,3.263,167,2.897,169,2.12,170,2.897,172,0.999,173,2.12,175,3.548,176,3.835,177,2.897,178,2.897,180,0.625,181,3.301,185,2.12,186,2.897,187,3.548,188,2.897,190,2.325,191,3.527,192,3.177,193,3.89,195,3.89,196,3.177,199,3.548,201,2.897,202,2.897,203,2.897,204,2.897,205,2.325,207,3.715,208,2.897,209,2.12,210,2.897,211,2.897,212,2.897,213,2.897,214,1.368,215,2.136,216,1.368,217,2.581,218,1.454,220,1.468,221,1.95,222,2.12,235,1.478,310,2.581,416,1.563,431,1.753,432,2.559,480,3.527,636,2.897,766,2.924,767,3.445,768,3.445,769,4.708,770,3.445,771,3.445,772,3.445,773,3.445,774,3.445,775,4.708,776,3.445,777,4.708,778,4.708,779,4.708,780,3.445,781,3.445,782,3.445,783,3.445]],["title/controllers/NotificationController.html",[31,2.333,74,1.209]],["body/controllers/NotificationController.html",[14,0.025,17,2.61,21,0.167,22,0.167,23,0.145,25,0.326,28,1.189,31,2.616,34,0.444,35,0.761,50,3.333,51,1.964,53,2.225,70,0.167,71,0.094,72,0.013,73,0.013,74,0.917,77,1.484,79,2.194,82,0.167,83,1.356,84,2.39,86,1.021,87,0.583,95,2.298,96,2.298,102,1.484,103,0.393,104,1.484,105,1.484,108,1.356,109,0.861,110,0.977,111,0.615,113,2.3,115,0.861,116,1.935,156,1.183,160,1.309,161,0.51,172,1.048,180,0.699,220,1.287,232,1.011,234,2.261,235,1.46,247,1.22,254,2.386,256,2.386,257,2.386,258,1.614,259,1.614,262,0.861,263,1.041,266,1.112,267,2.025,268,1.484,280,1.041,281,1.644,282,2.339,288,1.112,307,1.886,333,1.886,334,2.467,339,1.886,347,1.276,350,1.759,351,0.876,353,1.373,355,1.886,356,1.371,357,2.114,361,3.166,374,1.652,384,1.614,387,1.886,388,0.934,397,0.977,398,1.189,503,2.386,506,1.769,507,3.112,509,2.194,513,1.614,514,2.616,519,2.386,523,3.112,525,1.769,526,1.769,529,1.769,534,1.769,535,1.964,538,1.769,539,1.769,540,1.964,541,1.964,542,1.964,634,3.078,636,4.207,645,3.078,721,3.555,722,5.132,784,2.225,785,2.904,786,3.439,787,3.29,788,2.622,789,2.622,790,2.622,791,2.622,792,3.876,793,2.622,794,2.622,795,4.53,796,2.225,797,3.876,798,2.622,799,3.915,800,2.622,801,2.225,802,2.622,803,2.622,804,2.622,805,2.225,806,2.622,807,2.622,808,2.622,809,2.622,810,2.622,811,2.622,812,2.622]],["title/injectables/NotificationService.html",[17,1.956,136,1.136]],["body/injectables/NotificationService.html",[14,0.025,17,1.771,21,0.126,22,0.126,23,0.11,25,0.282,34,0.384,35,0.575,37,0.964,50,3.365,51,1.484,70,0.126,71,0.071,72,0.011,73,0.011,82,0.126,83,1.094,84,2.298,87,0.547,95,2.172,96,2.172,108,1.54,110,1.165,111,0.569,113,1.898,115,0.651,116,2.041,134,1.894,135,1.037,136,1.028,137,1.037,139,1.749,148,0.612,154,1.419,156,1.307,158,0.899,159,0.899,160,1.3,161,0.478,172,0.925,180,0.645,214,0.787,220,1.206,231,2.896,232,0.874,234,2.119,235,1.368,247,1.122,262,0.651,263,0.787,266,1.327,267,1.165,268,1.771,280,2.401,281,2.161,282,2.119,288,0.84,307,1.522,317,2.896,318,3.02,329,3.02,333,1.522,334,1.419,337,2.111,338,1.925,339,1.522,341,1.219,342,3.404,345,1.925,346,1.419,347,1.522,350,1.419,351,0.707,353,1.638,355,1.522,369,2.111,371,1.998,372,1.925,374,1.278,384,1.925,387,1.522,388,0.753,395,1.219,397,2.06,398,0.899,415,3.506,416,2.818,420,1.866,422,3.823,423,3.503,424,3.503,425,1.219,426,1.121,428,3.503,429,3.503,430,2.794,431,2.12,432,2.345,433,2.71,434,1.925,436,1.484,438,1.771,439,1.681,440,1.219,441,3.404,442,2.386,443,2.951,444,1.337,445,1.337,448,1.337,449,1.925,450,1.219,451,2.71,452,2.386,453,1.925,509,3.299,519,2.71,555,1.337,556,1.484,569,2.655,634,2.714,636,4.137,645,2.714,721,2.884,734,3.738,786,2.972,787,2.655,795,4.53,796,2.655,799,3.291,801,1.681,813,1.681,814,1.981,815,1.981,816,1.981,817,1.981,818,1.981,819,1.981,820,1.981,821,3.128,822,1.981,823,1.981,824,1.981,825,1.981,826,3.877,827,3.877,828,1.981,829,1.981]],["title/classes/ResponseDto.html",[71,0.124,397,1.287]],["body/classes/ResponseDto.html",[14,0.025,21,0.25,22,0.25,23,0.218,25,0.218,27,3.854,34,0.37,70,0.25,71,0.141,72,0.017,73,0.017,82,0.25,86,1.054,87,0.624,92,2.912,103,0.59,108,2.005,111,0.612,139,2.043,143,3.854,145,2.182,147,2.043,153,1.09,161,0.545,180,0.558,218,1.629,262,1.883,263,1.562,313,4.367,346,2.334,397,1.916,415,3.002,416,2.334,420,2.005,430,3.002,431,1.465,432,2.431,587,1.215,589,1.215,612,3.472,639,3.472,641,3.166,642,3.472,652,3.339,673,5.794,674,4.367,675,3.854,676,5.495,677,4.367,678,4.367,720,3.166,830,5.495,831,5.144,832,4.367,833,5.144,834,5.144,835,5.144,836,5.144,837,5.144,838,5.144,839,5.144,840,5.144,841,5.144,842,5.144,843,3.933,844,3.933,845,3.933,846,3.933,847,3.933,848,3.933]],["title/classes/SignInDto.html",[71,0.124,244,2.333]],["body/classes/SignInDto.html",[14,0.024,21,0.302,22,0.302,23,0.263,25,0.263,34,0.417,70,0.302,71,0.208,72,0.02,73,0.02,81,3.035,82,0.302,86,1.004,87,0.573,103,0.713,111,0.52,153,1.228,161,0.52,180,0.706,215,2.838,216,1.886,218,1.506,232,1.293,244,3.911,247,1.076,364,2.629,365,2.82,366,3.035,383,4.686,587,1.466,589,1.466,637,3.558,638,4.031,644,3.035,649,3.044,650,4.031,658,3.28,849,5.309,850,5.795,851,4.749]],["title/classes/UpdateAuthenticationDto.html",[71,0.124,385,2.127]],["body/classes/UpdateAuthenticationDto.html",[14,0.025,21,0.307,22,0.307,23,0.267,25,0.267,34,0.421,48,1.615,49,2.971,70,0.372,71,0.21,72,0.02,73,0.02,103,0.724,111,0.619,152,2.601,157,3.065,160,1.023,180,0.635,218,1.577,232,0.958,247,1.169,249,2.732,348,2.971,351,1.091,356,1.163,357,1.688,385,3.602,388,1.41,587,1.491,588,3.617,589,1.491,593,1.798,594,2.18,595,4.968]],["title/classes/UpdateContaDto.html",[71,0.124,522,1.956]],["body/classes/UpdateContaDto.html",[14,0.025,21,0.27,22,0.27,23,0.235,25,0.235,34,0.306,54,1.974,70,0.344,71,0.194,72,0.018,73,0.018,82,0.27,86,0.738,87,0.421,103,0.639,111,0.627,139,2.364,153,1.148,159,1.932,160,1.262,161,0.382,172,1.121,180,0.68,218,1.666,232,0.845,235,1.388,247,1.105,351,0.962,356,1.434,357,1.893,374,1.236,388,1.304,420,1.489,462,2.072,464,2.296,465,2.873,466,2.873,467,2.873,468,2.873,505,2.41,522,3.064,587,1.315,589,1.315,593,1.586,594,2.017,596,4.056,598,2.873,601,5.318,602,3.614,603,3.614,604,4.596,605,3.614,607,3.614,610,2.62,611,3.614,612,2.873,613,3.614,615,4.596,852,4.258]],["title/classes/UpdateLancamentoDto.html",[71,0.124,632,1.956]],["body/classes/UpdateLancamentoDto.html",[14,0.025,21,0.273,22,0.273,23,0.238,25,0.238,34,0.31,54,1.248,70,0.346,71,0.195,72,0.018,73,0.018,82,0.273,86,0.745,87,0.425,103,0.645,111,0.621,153,1.155,160,1.268,161,0.385,162,2.251,172,0.944,180,0.739,218,1.679,235,1.397,247,1.11,351,0.972,356,1.44,357,1.905,371,1.951,388,1.312,420,1.905,462,2.092,464,1.823,512,3.471,587,1.328,589,1.328,593,1.601,594,2.029,598,2.901,616,2.433,617,4.082,618,3.676,619,2.901,620,1.823,621,2.901,622,2.901,623,3.353,624,3.649,625,3.649,627,3.221,628,3.221,629,3.649,630,2.433,631,3.649,632,3.083,633,4.624,853,4.299]],["title/classes/UpdateNotificationDto.html",[71,0.124,645,1.956]],["body/classes/UpdateNotificationDto.html",[14,0.025,21,0.29,22,0.29,23,0.253,25,0.253,34,0.407,70,0.359,71,0.22,72,0.019,73,0.019,82,0.29,86,0.792,87,0.452,103,0.685,111,0.623,153,1.199,159,2.072,160,1.303,161,0.41,172,0.792,180,0.667,215,2.567,216,1.814,218,1.591,232,0.907,235,1.451,247,1.141,351,1.033,356,1.481,357,1.979,374,1.326,388,1.363,416,2.072,432,1.937,587,1.41,589,1.41,593,1.701,594,2.108,634,2.585,635,4.239,636,4.065,639,3.082,641,2.811,642,3.082,643,3.877,644,2.963,645,3.203,646,4.803,854,4.568]],["title/classes/UpdateUserDto.html",[71,0.124,661,1.682]],["body/classes/UpdateUserDto.html",[14,0.025,21,0.248,22,0.248,23,0.216,25,0.216,34,0.369,48,1.003,70,0.385,71,0.226,72,0.017,73,0.017,81,2.047,82,0.248,86,0.678,87,0.387,91,2.494,103,0.587,111,0.616,115,2.257,147,2.035,152,1.553,153,1.086,156,1.003,161,0.351,172,0.888,180,0.714,215,2.932,216,1.553,218,1.655,220,0.884,232,1.364,247,1.169,351,0.884,356,0.942,363,2.494,364,2.325,365,2.494,366,2.683,374,1.135,388,1.377,408,2.047,421,2.593,464,1.658,587,1.207,589,1.207,593,1.456,594,1.909,620,1.658,630,2.213,644,2.993,647,1.903,648,2.9,649,2.494,655,2.406,656,2.639,657,2.213,658,2.9,659,2.406,660,2.406,661,2.494,662,3.458,663,3.458,664,3.458,665,3.458,666,2.213,667,2.9,668,1.903,669,2.639,855,3.91]],["title/classes/UpdateUserPhotoDto.html",[71,0.124,668,1.682]],["body/classes/UpdateUserPhotoDto.html",[14,0.025,21,0.243,22,0.243,23,0.212,25,0.212,34,0.364,48,0.981,70,0.382,71,0.224,72,0.017,73,0.017,81,2.003,82,0.243,86,0.875,87,0.5,91,1.861,103,0.574,111,0.618,115,2.277,147,1.519,152,1.519,153,1.071,156,1.45,161,0.453,172,0.98,180,0.73,215,2.914,216,1.519,218,1.66,220,0.865,232,1.368,247,1.161,351,0.865,356,1.216,363,2.458,364,2.291,365,2.458,366,2.645,374,1.466,388,1.362,408,2.003,421,1.735,464,1.622,587,1.181,589,1.181,593,1.425,594,1.425,620,2.398,630,2.165,644,2.961,647,1.861,648,3.201,649,2.458,655,2.354,656,2.581,657,2.165,658,2.859,659,2.354,660,2.354,661,1.861,662,2.581,663,2.581,664,2.581,665,2.581,666,2.165,667,3.404,668,2.458,669,3.408,856,3.825,857,3.825]],["title/entities/User.html",[48,0.886,148,1.067]],["body/entities/User.html",[14,0.025,21,0.186,22,0.186,23,0.162,25,0.162,34,0.386,48,1.076,54,1.716,70,0.186,71,0.15,72,0.014,73,0.014,82,0.186,86,1.141,87,0.651,103,0.438,134,2.123,147,1.666,148,0.902,149,1.53,151,2.581,153,0.889,154,2.226,155,2.57,156,1.258,158,2.226,160,1.04,161,0.619,162,3.096,163,1.798,164,2.581,165,3.638,166,3.346,167,2.581,169,1.798,170,2.581,172,0.929,173,1.798,175,3.3,176,3.3,177,2.581,178,3.02,180,0.698,181,3.748,185,1.798,186,2.581,187,3.3,188,2.581,192,2.83,193,3.619,195,2.83,199,3.638,201,2.581,202,3.748,203,2.581,204,3.02,205,1.971,207,3.905,208,2.581,209,1.798,210,2.581,211,2.581,212,1.798,213,1.798,214,1.16,216,1.16,218,1.528,220,1.513,221,1.653,222,1.798,232,0.833,235,1.076,363,2.388,408,2.57,420,1.022,421,2.226,426,2.374,431,2.202,469,3.56,477,2.48,479,3.56,480,3.142,481,3.56,483,3.56,498,3.56,520,3.02,620,2.081,649,2.388,657,2.374,658,2.374,659,1.798,660,1.798,693,3.56,704,2.48,858,2.48,859,2.921,860,4.194,861,2.921,862,2.921,863,2.921,864,4.194,865,2.921,866,2.921,867,2.921,868,4.194,869,2.921,870,5.363,871,2.921,872,2.921,873,4.194,874,4.194,875,2.921,876,2.921,877,4.194,878,2.921,879,2.921,880,2.921,881,4.907,882,2.921,883,2.921,884,4.907,885,2.921,886,2.921,887,2.921,888,2.921,889,2.921,890,2.921,891,2.921,892,2.921,893,2.921,894,2.921,895,2.921,896,2.921,897,2.921,898,2.921]],["title/controllers/UserController.html",[30,2.333,74,1.209]],["body/controllers/UserController.html",[13,2.432,14,0.025,21,0.169,22,0.169,23,0.147,25,0.216,28,1.204,30,2.639,34,0.446,35,0.77,47,2.252,48,1.615,49,1.633,70,0.169,71,0.095,72,0.013,73,0.013,74,0.928,77,1.502,79,2.214,82,0.169,83,1.368,84,2.418,86,1.051,87,0.6,95,2.336,96,2.336,102,1.502,103,0.398,104,1.502,105,1.502,108,1.368,109,0.872,110,0.988,111,0.46,113,2.307,115,0.872,116,1.993,156,1.466,161,0.53,172,0.991,180,0.641,220,1.336,231,2.684,232,1.268,234,2.348,235,1.516,247,1.186,254,3.638,256,2.407,257,1.633,258,1.633,259,1.633,262,0.872,263,1.054,266,1.125,267,0.988,268,2.214,280,2.035,281,2.573,282,2.41,288,1.125,307,1.903,333,1.903,334,2.325,339,1.903,347,1.291,350,1.774,355,1.903,356,1.234,361,2.684,363,2.782,364,1.774,365,1.903,371,2.325,374,1.488,387,2.494,397,0.988,398,1.204,503,2.407,506,1.791,507,3.134,513,1.633,514,1.791,521,1.988,523,2.639,525,1.791,526,1.791,529,1.791,534,1.791,536,1.988,538,1.791,539,1.791,647,2.659,648,1.502,661,2.659,667,2.901,668,2.659,719,2.93,720,2.407,785,2.93,786,3.459,805,2.252,899,2.252,900,3.32,901,3.32,902,2.654,903,6.067,904,2.252,905,2.654,906,2.654,907,2.654,908,2.654,909,2.252,910,3.911,911,2.654,912,2.252,913,2.654,914,2.654,915,2.654,916,2.654,917,3.84,918,2.654,919,2.654,920,2.654,921,2.654,922,2.654,923,2.654,924,2.654,925,2.654,926,2.654,927,2.654,928,2.654,929,2.654,930,2.654,931,2.654,932,2.654,933,2.654,934,2.654,935,2.654,936,2.654,937,2.654,938,2.654,939,2.654]],["title/injectables/UserService.html",[13,1.81,136,1.136]],["body/injectables/UserService.html",[13,1.192,14,0.025,21,0.085,22,0.085,23,0.074,25,0.273,34,0.342,35,0.39,37,0.654,48,1.568,49,0.827,54,1.229,70,0.085,71,0.048,72,0.008,73,0.01,82,0.085,83,0.796,84,2.309,87,0.545,95,2.186,96,2.186,108,1.218,109,0.748,110,0.848,111,0.532,113,2.01,115,0.441,116,2.04,134,2.025,135,1.192,136,0.748,137,0.704,145,1.478,147,0.534,154,1.343,156,1.603,158,1.032,160,0.627,161,0.484,172,1.004,180,0.663,214,0.534,220,1.327,231,2.485,232,1.376,234,2.143,235,1.384,247,0.724,248,1.705,262,0.441,263,0.534,266,0.965,267,0.848,280,2.483,281,2.012,282,2.267,288,0.965,297,1.932,307,2.06,317,2.757,318,2.554,329,2.554,334,1.032,338,1.401,341,0.827,342,2.92,345,1.401,346,1.581,351,0.304,356,0.548,361,1.825,363,3.042,364,1.581,365,1.696,366,2.485,371,2.321,372,1.401,374,1.229,388,0.548,390,3.309,395,0.827,397,2.296,398,0.61,399,1.14,400,1.007,403,2.513,405,1.932,407,1.932,408,1.55,409,1.932,415,3.252,416,2.723,420,1.578,421,0.61,422,3.654,423,3.392,424,3.873,425,2.145,426,1.972,427,0.907,428,3.148,429,3.392,430,2.363,431,2.01,432,1.913,433,1.401,434,2.399,438,2.207,440,0.827,441,3.148,442,1.822,443,2.777,449,2.399,450,0.827,451,2.145,452,1.822,453,1.401,460,1.932,503,1.401,513,1.401,520,0.827,555,1.536,620,0.57,627,2.218,647,2.195,649,2.406,661,2.195,667,1.972,668,2.195,719,1.705,720,2.145,721,3.054,785,1.705,786,2.351,900,1.932,901,1.932,904,1.932,909,1.932,912,1.932,917,2.611,940,1.14,941,2.276,942,2.276,943,2.276,944,2.276,945,1.343,946,2.276,947,1.343,948,2.276,949,2.276,950,2.276,951,1.343,952,2.276,953,2.276,954,1.343,955,4.027,956,1.343,957,2.276,958,1.343,959,1.343,960,1.343,961,2.276,962,2.276,963,1.343,964,2.276,965,1.343,966,3.484,967,3.484,968,2.276,969,1.343,970,2.276,971,1.343,972,2.276,973,4.512,974,1.343,975,2.276,976,2.276,977,1.343,978,2.276,979,1.343,980,1.343,981,1.343,982,2.276,983,3.484,984,2.276,985,2.276,986,1.343,987,1.343,988,2.96,989,1.343,990,1.343,991,3.484,992,1.343,993,1.343,994,1.343,995,1.343,996,1.343,997,2.276,998,1.343,999,1.343,1000,2.276,1001,2.276,1002,2.276,1003,1.343,1004,1.343,1005,1.343,1006,2.276,1007,2.96,1008,1.343,1009,1.343,1010,2.276,1011,1.343,1012,1.343,1013,1.343,1014,1.343,1015,1.343,1016,1.343,1017,2.276,1018,2.276,1019,1.343]],["title/coverage.html",[1020,4.005]],["body/coverage.html",[6,2.275,12,2.092,13,1.935,14,0.025,15,2.092,16,2.092,17,2.092,23,0.204,29,2.494,30,2.494,31,2.494,32,2.494,33,2.494,40,2.494,44,2.275,48,0.948,50,2.092,54,1.073,58,1.935,71,0.248,72,0.017,73,0.017,74,2.224,75,2.494,76,3.137,100,2.092,126,2.769,136,2.09,138,3.137,148,1.909,150,3.137,161,0.331,224,3.137,244,2.494,260,2.494,262,1.214,284,2.494,286,3.137,317,1.935,332,3.137,348,2.275,385,2.275,397,1.377,461,3.137,501,3.137,505,2.092,522,2.092,543,3.137,585,2.769,588,3.699,589,2.141,596,3.699,616,2.092,617,3.699,632,2.092,634,2.092,635,3.699,645,2.092,647,1.799,648,3.358,661,1.799,666,2.092,668,1.799,670,2.494,672,3.137,679,3.137,708,3.137,730,3.137,766,3.137,784,3.137,813,3.137,830,3.137,849,3.137,858,3.137,899,3.137,940,3.137,1020,3.137,1021,3.137,1022,3.696,1023,7.235,1024,5.559,1025,5.559,1026,5.933,1027,5.559,1028,3.137,1029,3.137,1030,5.559,1031,3.137,1032,6.751,1033,6.361,1034,5.933,1035,4.937,1036,3.696,1037,3.696,1038,4.191,1039,3.137,1040,3.696,1041,3.696,1042,3.696]],["title/dependencies.html",[3,2.559,1043,2.449]],["body/dependencies.html",[3,2.876,14,0.025,35,1.357,37,2.274,39,3.154,71,0.206,72,0.019,73,0.019,103,0.701,130,3.967,135,2.447,214,1.856,216,1.856,249,2.645,312,4.871,400,3.501,1044,6.21,1045,4.673,1046,4.673,1047,4.673,1048,4.673,1049,5.738,1050,4.673,1051,4.673,1052,4.673,1053,4.673,1054,4.673,1055,4.673,1056,4.673,1057,4.673,1058,4.673,1059,4.673,1060,4.673,1061,4.673,1062,4.673,1063,4.673,1064,4.673,1065,4.673,1066,4.673,1067,4.673,1068,3.967,1069,4.673,1070,4.673,1071,4.673,1072,6.477,1073,4.673,1074,4.673,1075,4.673,1076,4.673,1077,4.673,1078,4.673,1079,4.673,1080,4.673,1081,4.673,1082,4.673,1083,4.673,1084,4.673,1085,4.673,1086,4.673,1087,4.673,1088,4.673,1089,4.673,1090,4.673,1091,4.673,1092,4.673]],["title/miscellaneous/functions.html",[1093,1.947,1094,3.529]],["body/miscellaneous/functions.html",[6,4.096,14,0.021,72,0.021,73,0.021,82,0.35,109,1.808,111,0.493,141,4.671,1039,4.671,1093,3.714,1094,4.671,1095,5.503,1096,5.503]],["title/index.html",[82,0.183,1097,2.886,1098,2.886]],["body/index.html",[14,0.023,27,2.951,72,0.017,73,0.017,91,2.506,92,3.247,109,1.294,111,0.607,134,1.216,139,1.564,142,3.344,143,4.558,145,2.746,152,1.564,238,3.344,248,4.298,267,1.467,302,3.344,307,2.961,309,4.371,346,2.336,350,2.336,364,2.938,371,2.336,431,1.467,512,2.063,520,2.424,610,2.424,612,2.658,623,2.424,628,2.951,641,3.169,675,3.858,721,2.23,795,2.951,832,3.344,917,2.951,955,3.344,1021,3.344,1068,4.371,1099,4.87,1100,3.939,1101,3.939,1102,3.939,1103,3.939,1104,3.939,1105,3.939,1106,3.939,1107,3.939,1108,5.149,1109,3.939,1110,3.939,1111,5.149,1112,3.939,1113,3.939,1114,3.939,1115,3.939,1116,3.939,1117,5.149,1118,3.939,1119,3.939,1120,3.939,1121,5.149,1122,6.084,1123,6.084,1124,5.149,1125,3.939,1126,6.084,1127,3.939,1128,3.939,1129,5.149,1130,5.149,1131,3.939,1132,5.149,1133,5.149,1134,3.939,1135,5.737,1136,5.737,1137,3.939,1138,4.371,1139,3.344,1140,3.344,1141,3.939,1142,3.939,1143,3.939,1144,3.939,1145,3.939,1146,3.939,1147,5.737,1148,3.939,1149,3.939,1150,3.939,1151,3.939,1152,3.344,1153,3.939,1154,3.939,1155,3.939,1156,3.939,1157,3.939,1158,3.939,1159,3.939,1160,3.939,1161,3.939,1162,3.939,1163,3.939,1164,3.939,1165,3.939,1166,3.939,1167,3.939,1168,3.939,1169,3.939,1170,3.939,1171,3.939,1172,3.939,1173,3.344,1174,3.344,1175,3.939,1176,3.939,1177,3.939,1178,3.939,1179,3.939,1180,3.939,1181,3.939,1182,3.939,1183,3.939,1184,3.939,1185,3.939,1186,3.939,1187,3.939,1188,3.939,1189,3.939,1190,3.939,1191,3.939,1192,3.939,1193,3.939]],["title/modules.html",[2,2.904]],["body/modules.html",[1,3.394,2,3.394,14,0.021,72,0.021,73,0.021,118,3.721,1194,6.332,1195,6.332,1196,6.332,1197,6.332]],["title/overview.html",[1198,4.005]],["body/overview.html",[0,2.928,1,4.409,2,2.928,3,2.928,4,3.564,5,3.564,6,2.928,7,3.564,8,3.564,9,4.038,10,4.038,11,4.038,12,3.894,13,3.603,14,0.024,15,3.543,16,3.543,17,3.543,18,4.347,19,3.564,20,3.564,28,2.158,72,0.02,73,0.02,100,3.543,118,4.586,119,4.038,120,4.038,137,2.491,149,2.491,284,3.211,587,1.469,655,3.571,657,2.693,670,3.211,1198,4.038,1199,5.802,1200,4.757,1201,4.757]],["title/properties.html",[153,0.881,1043,2.449]],["body/properties.html",[14,0.024,25,0.302,72,0.021,73,0.021,92,3.089,111,0.489,153,1.157,1099,4.632,1173,4.632,1174,4.632,1202,5.457,1203,5.457,1204,5.457,1205,5.457,1206,5.457]],["title/miscellaneous/variables.html",[1093,1.947,1207,3.529]],["body/miscellaneous/variables.html",[14,0.024,40,3.856,48,1.19,65,3.476,72,0.019,73,0.019,82,0.295,111,0.555,116,1.524,126,4.281,134,1.995,139,1.843,145,1.968,149,2.43,157,2.43,161,0.555,166,3.504,231,2.43,232,0.921,236,3.939,237,3.939,249,2.626,277,3.939,323,3.939,346,2.105,367,3.939,383,3.476,431,2.306,649,2.258,1028,3.939,1029,4.85,1031,4.85,1038,3.939,1093,3.131,1138,3.939,1139,3.939,1140,3.939,1152,3.939,1207,3.939,1208,4.64,1209,5.714,1210,6.191,1211,4.64,1212,4.64,1213,5.714,1214,4.64,1215,4.64,1216,4.64,1217,4.64,1218,4.64,1219,4.64,1220,4.64,1221,4.64,1222,4.64,1223,4.64,1224,4.64,1225,4.64,1226,4.64,1227,4.64,1228,4.64,1229,4.64,1230,4.64,1231,4.64,1232,4.64,1233,4.64]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IResponse.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":438,"title":{},"body":{"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["0.1.13",{"_index":1082,"title":{},"body":{"dependencies.html":{}}}],["0.11.0",{"_index":1061,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":1060,"title":{},"body":{"dependencies.html":{}}}],["0.3.17",{"_index":1092,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":1073,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":655,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"overview.html":{}}}],["1.0",{"_index":1203,"title":{},"body":{"properties.html":{}}}],["1.0.0",{"_index":1079,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":1058,"title":{},"body":{"dependencies.html":{}}}],["1.6.6",{"_index":1088,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1032,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":988,"title":{},"body":{"injectables/UserService.html":{}}}],["10.0.0",{"_index":1049,"title":{},"body":{"dependencies.html":{}}}],["10.1.0",{"_index":1047,"title":{},"body":{"dependencies.html":{}}}],["10.1.2",{"_index":1044,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1023,"title":{},"body":{"coverage.html":{}}}],["11/11",{"_index":1036,"title":{},"body":{"coverage.html":{}}}],["128",{"_index":874,"title":{},"body":{"entities/User.html":{}}}],["14",{"_index":1201,"title":{},"body":{"overview.html":{}}}],["14/14",{"_index":1037,"title":{},"body":{"coverage.html":{}}}],["16.10.16",{"_index":1071,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":657,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"overview.html":{}}}],["2.0.0",{"_index":1076,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1033,"title":{},"body":{"coverage.html":{}}}],["256",{"_index":885,"title":{},"body":{"entities/User.html":{}}}],["256})@minlength(4",{"_index":871,"title":{},"body":{"entities/User.html":{}}}],["3.0.0",{"_index":1084,"title":{},"body":{"dependencies.html":{}}}],["3.2.3",{"_index":1045,"title":{},"body":{"dependencies.html":{}}}],["3.5.1",{"_index":1067,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1034,"title":{},"body":{"coverage.html":{}}}],["3600s",{"_index":69,"title":{},"body":{"modules/AplicativoModule.html":{}}}],["4.0.0",{"_index":1077,"title":{},"body":{"dependencies.html":{}}}],["4.1.2",{"_index":1091,"title":{},"body":{"dependencies.html":{}}}],["4.17.15",{"_index":1065,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1024,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":1200,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":1053,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1054,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1035,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1199,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":1025,"title":{},"body":{"coverage.html":{}}}],["64",{"_index":629,"title":{},"body":{"classes/CreateLancamentoDto.html":{},"classes/UpdateLancamentoDto.html":{}}}],["7.1.2",{"_index":1051,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1086,"title":{},"body":{"dependencies.html":{}}}],["8.2.0",{"_index":1063,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":1026,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":1027,"title":{},"body":{"coverage.html":{}}}],["__dirname",{"_index":1224,"title":{},"body":{"miscellaneous/variables.html":{}}}],["access",{"_index":325,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["access_token",{"_index":410,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["account",{"_index":502,"title":{},"body":{"controllers/ContaController.html":{}}}],["aceder",{"_index":299,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["acesso",{"_index":367,"title":{},"body":{"injectables/AuthenticationService.html":{},"miscellaneous/variables.html":{}}}],["action",{"_index":193,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["action'})@joincolumn({name",{"_index":194,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{}}}],["active",{"_index":421,"title":{},"body":{"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"injectables/ContaService.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["activo",{"_index":665,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{}}}],["activos",{"_index":961,"title":{},"body":{"injectables/UserService.html":{}}}],["actual",{"_index":613,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/UpdateContaDto.html":{}}}],["actualiza",{"_index":966,"title":{},"body":{"injectables/UserService.html":{}}}],["actualizado",{"_index":967,"title":{},"body":{"injectables/UserService.html":{}}}],["actualizar",{"_index":387,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{}}}],["actualização",{"_index":388,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"injectables/UserService.html":{}}}],["admin",{"_index":656,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{}}}],["administração",{"_index":1165,"title":{},"body":{"index.html":{}}}],["algo",{"_index":1181,"title":{},"body":{"index.html":{}}}],["alternativo",{"_index":734,"title":{},"body":{"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{}}}],["andre",{"_index":1173,"title":{},"body":{"index.html":{},"properties.html":{}}}],["another",{"_index":203,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["ao",{"_index":1103,"title":{},"body":{"index.html":{}}}],["api",{"_index":92,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"interfaces/IResponse.html":{},"classes/ResponseDto.html":{},"index.html":{},"properties.html":{}}}],["apibearerauth",{"_index":254,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["apibearerauth()@delete",{"_index":905,"title":{},"body":{"controllers/UserController.html":{}}}],["apibearerauth()@get('getall",{"_index":915,"title":{},"body":{"controllers/UserController.html":{}}}],["apibearerauth()@get('getbyid/:id",{"_index":907,"title":{},"body":{"controllers/UserController.html":{}}}],["apibearerauth()@get('getuserphoto/:id",{"_index":913,"title":{},"body":{"controllers/UserController.html":{}}}],["apibearerauth()@get('me",{"_index":241,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apibearerauth()@put",{"_index":918,"title":{},"body":{"controllers/UserController.html":{}}}],["apibearerauth()@put('updateuserphoto",{"_index":921,"title":{},"body":{"controllers/UserController.html":{}}}],["apibearerauth()@useguards(authenticationguard)@get('profile",{"_index":229,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apiextramodels",{"_index":526,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["apiextramodels(conta",{"_index":530,"title":{},"body":{"controllers/ContaController.html":{}}}],["apiextramodels(lancamento",{"_index":726,"title":{},"body":{"controllers/LancamentoController.html":{}}}],["apiextramodels(notification",{"_index":802,"title":{},"body":{"controllers/NotificationController.html":{}}}],["apiextramodels(responsedto",{"_index":529,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["apiextramodels(user",{"_index":924,"title":{},"body":{"controllers/UserController.html":{}}}],["apiproperty",{"_index":218,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"entities/Lancamento.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{}}}],["apiproperty()@column({name",{"_index":181,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["apiproperty()@isnotempty",{"_index":763,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["apiproperty()@isnotempty()@isemail",{"_index":650,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["apiproperty()@isnotempty()@isstring",{"_index":637,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["apiproperty()@isnotempty()@isstring()@minlength(4",{"_index":651,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@primarygeneratedcolumn({name",{"_index":173,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["apitags",{"_index":102,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["apitags('account",{"_index":528,"title":{},"body":{"controllers/ContaController.html":{}}}],["apitags('accounting",{"_index":725,"title":{},"body":{"controllers/LancamentoController.html":{}}}],["apitags('authentication",{"_index":264,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apitags('health",{"_index":106,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('notification",{"_index":803,"title":{},"body":{"controllers/NotificationController.html":{}}}],["apitags('user",{"_index":923,"title":{},"body":{"controllers/UserController.html":{}}}],["aplicativo",{"_index":27,"title":{},"body":{"modules/AplicativoModule.html":{},"classes/ResponseDto.html":{},"index.html":{}}}],["aplicativo/aplicativo.module",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["aplicativomodule",{"_index":1,"title":{"modules/AplicativoModule.html":{}},"body":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["app.controller",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":101,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":75,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":118,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":100,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["aproveitar",{"_index":1175,"title":{},"body":{"index.html":{}}}],["arquivo",{"_index":1136,"title":{},"body":{"index.html":{}}}],["array",{"_index":674,"title":{},"body":{"interfaces/IResponse.html":{},"classes/ResponseDto.html":{}}}],["asc",{"_index":982,"title":{},"body":{"injectables/UserService.html":{}}}],["assigning",{"_index":322,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["async",{"_index":84,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["ativos",{"_index":962,"title":{},"body":{"injectables/UserService.html":{}}}],["atributos",{"_index":842,"title":{},"body":{"classes/ResponseDto.html":{}}}],["autenticado",{"_index":362,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["autenticar",{"_index":382,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["autenticação",{"_index":152,"title":{},"body":{"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"index.html":{}}}],["auth",{"_index":225,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authentication",{"_index":44,"title":{"entities/Authentication.html":{}},"body":{"modules/AplicativoModule.html":{},"entities/Authentication.html":{},"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["authenticationcontroller",{"_index":29,"title":{"controllers/AuthenticationController.html":{}},"body":{"modules/AplicativoModule.html":{},"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["authenticationguard",{"_index":260,"title":{"guards/AuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["authenticationservice",{"_index":12,"title":{"injectables/AuthenticationService.html":{}},"body":{"modules/AplicativoModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["author",{"_index":1206,"title":{},"body":{"properties.html":{}}}],["automático",{"_index":239,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["await",{"_index":282,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["b64_image",{"_index":693,"title":{},"body":{"entities/Lancamento.html":{},"entities/User.html":{}}}],["banco",{"_index":1139,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["base",{"_index":628,"title":{},"body":{"classes/CreateLancamentoDto.html":{},"classes/UpdateLancamentoDto.html":{},"index.html":{}}}],["base64",{"_index":669,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{}}}],["bcrypt",{"_index":400,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["bcrypt.hash(updateuserdto.password",{"_index":998,"title":{},"body":{"injectables/UserService.html":{}}}],["bearer",{"_index":331,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["before",{"_index":890,"title":{},"body":{"entities/User.html":{}}}],["beforeinsert",{"_index":881,"title":{},"body":{"entities/User.html":{}}}],["biblioteca",{"_index":1120,"title":{},"body":{"index.html":{}}}],["body",{"_index":257,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":147,"title":{},"body":{"injectables/AppService.html":{},"guards/AuthenticationGuard.html":{},"entities/Conta.html":{},"classes/CreateUserDto.html":{},"interfaces/IResponse.html":{},"classes/LoginUserDto.html":{},"classes/ResponseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["broadcast",{"_index":779,"title":{},"body":{"entities/Notification.html":{}}}],["browse",{"_index":1197,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1194,"title":{},"body":{"modules.html":{}}}],["básico",{"_index":80,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["cache",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["caf",{"_index":1193,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":287,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["canactivate(context",{"_index":294,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["cant",{"_index":443,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["carga",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["cascade",{"_index":480,"title":{},"body":{"entities/Conta.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["caso",{"_index":641,"title":{},"body":{"classes/CreateNotificationDto.html":{},"interfaces/IResponse.html":{},"classes/ResponseDto.html":{},"classes/UpdateNotificationDto.html":{},"index.html":{}}}],["catch",{"_index":329,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["categorias",{"_index":618,"title":{},"body":{"classes/CreateLancamentoDto.html":{},"entities/Lancamento.html":{},"injectables/LancamentoService.html":{},"classes/UpdateLancamentoDto.html":{}}}],["central",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["check",{"_index":1069,"title":{},"body":{"dependencies.html":{}}}],["checked",{"_index":990,"title":{},"body":{"injectables/UserService.html":{}}}],["class",{"_index":71,"title":{"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{}},"body":{"modules/AplicativoModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":587,"title":{},"body":{"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"overview.html":{}}}],["cluster_aplicativomodule",{"_index":9,"title":{},"body":{"modules/AplicativoModule.html":{},"overview.html":{}}}],["cluster_aplicativomodule_exports",{"_index":10,"title":{},"body":{"modules/AplicativoModule.html":{},"overview.html":{}}}],["cluster_aplicativomodule_providers",{"_index":11,"title":{},"body":{"modules/AplicativoModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["cluster_appmodule_providers",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cod_account_id",{"_index":475,"title":{},"body":{"entities/Conta.html":{},"entities/Lancamento.html":{}}}],["cod_accounting_entry_id",{"_index":691,"title":{},"body":{"entities/Lancamento.html":{}}}],["cod_authentication_id",{"_index":174,"title":{},"body":{"entities/Authentication.html":{}}}],["cod_entry_type",{"_index":695,"title":{},"body":{"entities/Lancamento.html":{}}}],["cod_notification_id",{"_index":769,"title":{},"body":{"entities/Notification.html":{}}}],["cod_user_id",{"_index":195,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["column",{"_index":207,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["column({name",{"_index":163,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["columns",{"_index":884,"title":{},"body":{"entities/User.html":{}}}],["com",{"_index":248,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["comando",{"_index":1158,"title":{},"body":{"index.html":{}}}],["comment",{"_index":176,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["como",{"_index":1147,"title":{},"body":{"index.html":{}}}],["compara",{"_index":975,"title":{},"body":{"injectables/UserService.html":{}}}],["compare",{"_index":399,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UserService.html":{}}}],["compare(pass",{"_index":404,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["compare(plain",{"_index":986,"title":{},"body":{"injectables/UserService.html":{}}}],["compodoc",{"_index":1121,"title":{},"body":{"index.html":{}}}],["concebido",{"_index":1107,"title":{},"body":{"index.html":{}}}],["config/typeorm.config",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["configuração",{"_index":1138,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["console.log(hashedpassword",{"_index":989,"title":{},"body":{"injectables/UserService.html":{}}}],["consolidado",{"_index":602,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/UpdateContaDto.html":{}}}],["const",{"_index":280,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constante",{"_index":1213,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constructor",{"_index":108,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(jwtservice",{"_index":290,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["constructor(private",{"_index":114,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{}}}],["constructor(repository",{"_index":341,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["conta",{"_index":54,"title":{"entities/Conta.html":{}},"body":{"modules/AplicativoModule.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["conta.entity",{"_index":704,"title":{},"body":{"entities/Lancamento.html":{},"entities/User.html":{}}}],["conta.id",{"_index":707,"title":{},"body":{"entities/Lancamento.html":{}}}],["conta.id)@joincolumn({name",{"_index":682,"title":{},"body":{"entities/Lancamento.html":{}}}],["conta.user",{"_index":860,"title":{},"body":{"entities/User.html":{}}}],["contacontroller",{"_index":32,"title":{"controllers/ContaController.html":{}},"body":{"modules/AplicativoModule.html":{},"controllers/ContaController.html":{},"coverage.html":{}}}],["contaid",{"_index":619,"title":{},"body":{"classes/CreateLancamentoDto.html":{},"entities/Lancamento.html":{},"injectables/LancamentoService.html":{},"classes/UpdateLancamentoDto.html":{}}}],["contas",{"_index":520,"title":{},"body":{"controllers/ContaController.html":{},"injectables/ContaService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"index.html":{}}}],["contaservice",{"_index":15,"title":{"injectables/ContaService.html":{}},"body":{"modules/AplicativoModule.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"coverage.html":{},"overview.html":{}}}],["context",{"_index":300,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":314,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["contexto",{"_index":301,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["contribuição",{"_index":1185,"title":{},"body":{"index.html":{}}}],["controlador",{"_index":79,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["controle",{"_index":1099,"title":{},"body":{"index.html":{},"properties.html":{}}}],["controller",{"_index":74,"title":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('account",{"_index":531,"title":{},"body":{"controllers/ContaController.html":{}}}],["controller('auth",{"_index":265,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["controller('entry",{"_index":727,"title":{},"body":{"controllers/LancamentoController.html":{}}}],["controller('health",{"_index":107,"title":{},"body":{"controllers/AppController.html":{}}}],["controller('notification",{"_index":804,"title":{},"body":{"controllers/NotificationController.html":{}}}],["controller('user",{"_index":925,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":28,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{},"overview.html":{}}}],["controllers/authentication.controller",{"_index":42,"title":{},"body":{"modules/AplicativoModule.html":{}}}],["controllers/conta.controller",{"_index":56,"title":{},"body":{"modules/AplicativoModule.html":{}}}],["controllers/lancamento.controller",{"_index":60,"title":{},"body":{"modules/AplicativoModule.html":{}}}],["controllers/notification.controller",{"_index":52,"title":{},"body":{"modules/AplicativoModule.html":{}}}],["controllers/user.controller",{"_index":46,"title":{},"body":{"modules/AplicativoModule.html":{}}}],["contrário",{"_index":1148,"title":{},"body":{"index.html":{}}}],["correctamente",{"_index":99,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["coverage",{"_index":1020,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":333,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{}}}],["create(@body",{"_index":539,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["create(dto",{"_index":347,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{}}}],["createauthenticationdto",{"_index":348,"title":{"classes/CreateAuthenticationDto.html":{}},"body":{"injectables/AuthenticationService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/UpdateAuthenticationDto.html":{},"coverage.html":{}}}],["createcontadto",{"_index":505,"title":{"classes/CreateContaDto.html":{}},"body":{"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateContaDto.html":{},"classes/UpdateContaDto.html":{},"coverage.html":{}}}],["created",{"_index":442,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["createdat",{"_index":154,"title":{},"body":{"entities/Authentication.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"injectables/ContaService.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"injectables/NotificationService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["createforeignkeyconstraints",{"_index":481,"title":{},"body":{"entities/Conta.html":{},"entities/User.html":{}}}],["createlancamentodto",{"_index":616,"title":{"classes/CreateLancamentoDto.html":{}},"body":{"classes/CreateLancamentoDto.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/UpdateLancamentoDto.html":{},"coverage.html":{}}}],["createnotificationdto",{"_index":634,"title":{"classes/CreateNotificationDto.html":{}},"body":{"classes/CreateNotificationDto.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["createparamdecorator((data",{"_index":1211,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createuser",{"_index":941,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(createuserdto",{"_index":946,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto",{"_index":647,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":1013,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.name",{"_index":1012,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.role",{"_index":1014,"title":{},"body":{"injectables/UserService.html":{}}}],["credentials",{"_index":457,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["cria",{"_index":948,"title":{},"body":{"injectables/UserService.html":{}}}],["criada",{"_index":1131,"title":{},"body":{"index.html":{}}}],["criado",{"_index":1171,"title":{},"body":{"index.html":{}}}],["criar",{"_index":350,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"index.html":{}}}],["criação",{"_index":351,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"injectables/UserService.html":{}}}],["criptografada",{"_index":392,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["crédito",{"_index":603,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/UpdateContaDto.html":{}}}],["créditos",{"_index":607,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/UpdateContaDto.html":{}}}],["current_timestamp(6",{"_index":188,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["código",{"_index":721,"title":{},"body":{"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["da",{"_index":139,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"classes/CreateContaDto.html":{},"interfaces/IResponse.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/UpdateContaDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["dados",{"_index":346,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"interfaces/IResponse.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["dat_created",{"_index":164,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["dat_date",{"_index":687,"title":{},"body":{"entities/Lancamento.html":{}}}],["dat_deleted",{"_index":170,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["dat_updated",{"_index":186,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["data",{"_index":420,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"interfaces/IResponse.html":{},"entities/Lancamento.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["database",{"_index":1222,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasource",{"_index":545,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{}}}],["date",{"_index":162,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"classes/CreateLancamentoDto.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"classes/UpdateLancamentoDto.html":{},"entities/User.html":{}}}],["date(dto.data",{"_index":746,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["de",{"_index":111,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IResponse.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["debug",{"_index":1227,"title":{},"body":{"miscellaneous/variables.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{},"overview.html":{}}}],["decorators",{"_index":86,"title":{},"body":{"controllers/AppController.html":{},"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":166,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":777,"title":{},"body":{"entities/Notification.html":{}}}],["defined",{"_index":87,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["definição",{"_index":1100,"title":{},"body":{"index.html":{}}}],["delete",{"_index":334,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete(':uuid",{"_index":510,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{}}}],["delete(@param('email",{"_index":938,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(@param('uuid",{"_index":541,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{}}}],["delete(email",{"_index":904,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete(uuid",{"_index":353,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["deleted",{"_index":452,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["deletedat",{"_index":155,"title":{},"body":{"entities/Authentication.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"injectables/ContaService.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["deletedatecolumn",{"_index":211,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["deletedatecolumn({name",{"_index":169,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["democratizar",{"_index":1167,"title":{},"body":{"index.html":{}}}],["dependencia",{"_index":266,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependência",{"_index":112,"title":{},"body":{"controllers/AppController.html":{},"guards/AuthenticationGuard.html":{}}}],["desc",{"_index":556,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{}}}],["descricao",{"_index":462,"title":{},"body":{"entities/Conta.html":{},"injectables/ContaService.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"entities/Lancamento.html":{},"injectables/LancamentoService.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{}}}],["description",{"_index":25,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IResponse.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"properties.html":{}}}],["descrição",{"_index":598,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{}}}],["desenvolver",{"_index":1179,"title":{},"body":{"index.html":{}}}],["desenvolvimento",{"_index":1159,"title":{},"body":{"index.html":{}}}],["deste",{"_index":1187,"title":{},"body":{"index.html":{}}}],["destinado",{"_index":1102,"title":{},"body":{"index.html":{}}}],["destino",{"_index":1144,"title":{},"body":{"index.html":{}}}],["deve",{"_index":1122,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1021,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documentação",{"_index":1117,"title":{},"body":{"index.html":{}}}],["dotenv",{"_index":1062,"title":{},"body":{"dependencies.html":{}}}],["dto",{"_index":247,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto.categorias",{"_index":750,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["dto.contaid",{"_index":754,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["dto.descricao",{"_index":560,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{}}}],["dto.image",{"_index":752,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["dto.message",{"_index":826,"title":{},"body":{"injectables/NotificationService.html":{}}}],["dto.message.length",{"_index":828,"title":{},"body":{"injectables/NotificationService.html":{}}}],["dto.nome",{"_index":558,"title":{},"body":{"injectables/ContaService.html":{}}}],["dto.password",{"_index":273,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["dto.saldoconsolidado",{"_index":568,"title":{},"body":{"injectables/ContaService.html":{}}}],["dto.saldocredito",{"_index":562,"title":{},"body":{"injectables/ContaService.html":{}}}],["dto.saldodebito",{"_index":564,"title":{},"body":{"injectables/ContaService.html":{}}}],["dto.saldofuturo",{"_index":566,"title":{},"body":{"injectables/ContaService.html":{}}}],["dto.tipolancamento",{"_index":742,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["dto.titulo",{"_index":744,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["dto.token",{"_index":412,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["dto.token.length",{"_index":447,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["dto.ts",{"_index":589,"title":{},"body":{"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"coverage.html":{}}}],["dto.ts:12",{"_index":599,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{}}}],["dto.ts:13",{"_index":592,"title":{},"body":{"classes/CreateAuthenticationDto.html":{}}}],["dto.ts:15",{"_index":638,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/SignInDto.html":{}}}],["dto.ts:16",{"_index":652,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ResponseDto.html":{}}}],["dto.ts:18",{"_index":597,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{}}}],["dto.ts:19",{"_index":590,"title":{},"body":{"classes/CreateAuthenticationDto.html":{}}}],["dto.ts:21",{"_index":640,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["dto.ts:22",{"_index":844,"title":{},"body":{"classes/ResponseDto.html":{}}}],["dto.ts:23",{"_index":851,"title":{},"body":{"classes/SignInDto.html":{}}}],["dto.ts:24",{"_index":606,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateUserDto.html":{}}}],["dto.ts:25",{"_index":591,"title":{},"body":{"classes/CreateAuthenticationDto.html":{}}}],["dto.ts:28",{"_index":843,"title":{},"body":{"classes/ResponseDto.html":{}}}],["dto.ts:30",{"_index":608,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{}}}],["dto.ts:32",{"_index":653,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["dto.ts:33",{"_index":854,"title":{},"body":{"classes/UpdateNotificationDto.html":{}}}],["dto.ts:34",{"_index":840,"title":{},"body":{"classes/ResponseDto.html":{}}}],["dto.ts:36",{"_index":609,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{}}}],["dto.ts:38",{"_index":654,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["dto.ts:42",{"_index":600,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{}}}],["dto.ts:48",{"_index":614,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{}}}],["dto.ts:50",{"_index":855,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["dto.ts:54",{"_index":626,"title":{},"body":{"classes/CreateLancamentoDto.html":{}}}],["dto.ts:61",{"_index":852,"title":{},"body":{"classes/UpdateContaDto.html":{}}}],["dto.ts:64",{"_index":764,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["dto.ts:66",{"_index":853,"title":{},"body":{"classes/UpdateLancamentoDto.html":{}}}],["dto.ts:71",{"_index":765,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["dto.ts:83",{"_index":856,"title":{},"body":{"classes/UpdateUserPhotoDto.html":{}}}],["dto.ts:89",{"_index":857,"title":{},"body":{"classes/UpdateUserPhotoDto.html":{}}}],["dto.user",{"_index":413,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["dto.user.id",{"_index":437,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["dto.userid",{"_index":569,"title":{},"body":{"injectables/ContaService.html":{},"injectables/NotificationService.html":{}}}],["dto.uuid",{"_index":580,"title":{},"body":{"injectables/ContaService.html":{}}}],["dto.valor",{"_index":748,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["dto/authentication",{"_index":396,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["dto/conta",{"_index":527,"title":{},"body":{"controllers/ContaController.html":{},"injectables/ContaService.html":{}}}],["dto/lancamento",{"_index":724,"title":{},"body":{"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{}}}],["dto/notification",{"_index":801,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["dto/response",{"_index":398,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/sign",{"_index":255,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["dto/user",{"_index":979,"title":{},"body":{"injectables/UserService.html":{}}}],["dto?.uuid?.length",{"_index":581,"title":{},"body":{"injectables/ContaService.html":{}}}],["débitos",{"_index":604,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/UpdateContaDto.html":{}}}],["e",{"_index":364,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/SignInDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["e/ou",{"_index":1115,"title":{},"body":{"index.html":{}}}],["em",{"_index":1108,"title":{},"body":{"index.html":{}}}],["email",{"_index":363,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["emailtolowercase",{"_index":893,"title":{},"body":{"entities/User.html":{}}}],["emitidos",{"_index":836,"title":{},"body":{"classes/ResponseDto.html":{}}}],["encontrar",{"_index":1180,"title":{},"body":{"index.html":{}}}],["entidade",{"_index":151,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["entities",{"_index":149,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/authentication.entity",{"_index":45,"title":{},"body":{"modules/AplicativoModule.html":{},"injectables/AuthenticationService.html":{}}}],["entities/conta.entity",{"_index":55,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{}}}],["entities/lancamento.entity",{"_index":59,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{}}}],["entities/notification.entity",{"_index":51,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["entities/user.entity",{"_index":49,"title":{},"body":{"modules/AplicativoModule.html":{},"classes/CreateAuthenticationDto.html":{},"classes/UpdateAuthenticationDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":148,"title":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}},"body":{"entities/Authentication.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"injectables/ContaService.html":{},"entities/Lancamento.html":{},"injectables/LancamentoService.html":{},"entities/Notification.html":{},"injectables/NotificationService.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity('tb_account",{"_index":500,"title":{},"body":{"entities/Conta.html":{}}}],["entity('tb_accounting_entry",{"_index":705,"title":{},"body":{"entities/Lancamento.html":{}}}],["entity('tb_authentication",{"_index":219,"title":{},"body":{"entities/Authentication.html":{}}}],["entity('tb_notification",{"_index":782,"title":{},"body":{"entities/Notification.html":{}}}],["entity('tb_user",{"_index":882,"title":{},"body":{"entities/User.html":{}}}],["entity.categorias",{"_index":749,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["entity.contaid",{"_index":753,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["entity.data",{"_index":745,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["entity.descricao",{"_index":559,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{}}}],["entity.image",{"_index":751,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["entity.message",{"_index":825,"title":{},"body":{"injectables/NotificationService.html":{}}}],["entity.nome",{"_index":557,"title":{},"body":{"injectables/ContaService.html":{}}}],["entity.saldoconsolidado",{"_index":567,"title":{},"body":{"injectables/ContaService.html":{}}}],["entity.saldocredito",{"_index":561,"title":{},"body":{"injectables/ContaService.html":{}}}],["entity.saldodebito",{"_index":563,"title":{},"body":{"injectables/ContaService.html":{}}}],["entity.saldofuturo",{"_index":565,"title":{},"body":{"injectables/ContaService.html":{}}}],["entity.tipolancamento",{"_index":741,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["entity.titulo",{"_index":743,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["entity.token",{"_index":435,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["entity.userid",{"_index":436,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/NotificationService.html":{}}}],["entity.valor",{"_index":747,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["entity.{js,ts",{"_index":1225,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entitytoupdate",{"_index":444,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{}}}],["entitytoupdate.categorias",{"_index":760,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["entitytoupdate.contaid",{"_index":762,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["entitytoupdate.data",{"_index":758,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["entitytoupdate.descricao",{"_index":583,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{}}}],["entitytoupdate.image",{"_index":761,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["entitytoupdate.message",{"_index":827,"title":{},"body":{"injectables/NotificationService.html":{}}}],["entitytoupdate.nome",{"_index":582,"title":{},"body":{"injectables/ContaService.html":{}}}],["entitytoupdate.tipolancamento",{"_index":756,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["entitytoupdate.titulo",{"_index":757,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["entitytoupdate.token",{"_index":446,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["entitytoupdate.userid",{"_index":829,"title":{},"body":{"injectables/NotificationService.html":{}}}],["entitytoupdate.valor",{"_index":759,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["entrada",{"_index":850,"title":{},"body":{"classes/SignInDto.html":{}}}],["entry",{"_index":709,"title":{},"body":{"controllers/LancamentoController.html":{}}}],["erro",{"_index":677,"title":{},"body":{"interfaces/IResponse.html":{},"classes/ResponseDto.html":{}}}],["error",{"_index":415,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"interfaces/IResponse.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"injectables/UserService.html":{}}}],["erros",{"_index":834,"title":{},"body":{"classes/ResponseDto.html":{}}}],["escalar",{"_index":1113,"title":{},"body":{"index.html":{}}}],["esporádico",{"_index":1191,"title":{},"body":{"index.html":{}}}],["est",{"_index":664,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{}}}],["este",{"_index":1161,"title":{},"body":{"index.html":{}}}],["estiver",{"_index":93,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["evita",{"_index":833,"title":{},"body":{"classes/ResponseDto.html":{}}}],["example",{"_index":1129,"title":{},"body":{"index.html":{}}}],["exclui",{"_index":952,"title":{},"body":{"injectables/UserService.html":{}}}],["excluir",{"_index":355,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{}}}],["excluído",{"_index":953,"title":{},"body":{"injectables/UserService.html":{}}}],["executada",{"_index":1124,"title":{},"body":{"index.html":{}}}],["executado",{"_index":1153,"title":{},"body":{"index.html":{}}}],["executar",{"_index":1127,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":295,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["execução",{"_index":302,"title":{},"body":{"guards/AuthenticationGuard.html":{},"index.html":{}}}],["exista",{"_index":642,"title":{},"body":{"classes/CreateNotificationDto.html":{},"interfaces/IResponse.html":{},"classes/ResponseDto.html":{},"classes/UpdateNotificationDto.html":{}}}],["expiresin",{"_index":68,"title":{},"body":{"modules/AplicativoModule.html":{}}}],["export",{"_index":70,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IResponse.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{},"overview.html":{}}}],["express",{"_index":312,"title":{},"body":{"guards/AuthenticationGuard.html":{},"dependencies.html":{}}}],["extends",{"_index":594,"title":{},"body":{"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{}}}],["extracttokenfromheader",{"_index":289,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["extracttokenfromheader(request",{"_index":304,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["extrai",{"_index":306,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["false",{"_index":431,"title":{},"body":{"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"injectables/ContaService.html":{},"entities/Lancamento.html":{},"injectables/LancamentoService.html":{},"entities/Notification.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["false})@minlength(8",{"_index":875,"title":{},"body":{"entities/User.html":{}}}],["ficaria",{"_index":1182,"title":{},"body":{"index.html":{}}}],["file",{"_index":23,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IResponse.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["finally",{"_index":578,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{}}}],["financeiros",{"_index":1166,"title":{},"body":{"index.html":{}}}],["finanças",{"_index":1170,"title":{},"body":{"index.html":{}}}],["findbyid",{"_index":503,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findbyid(@param('id",{"_index":534,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["findbyid(id",{"_index":513,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone",{"_index":785,"title":{},"body":{"controllers/NotificationController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone(@param('email",{"_index":926,"title":{},"body":{"controllers/UserController.html":{}}}],["findone(@param('uuid",{"_index":807,"title":{},"body":{"controllers/NotificationController.html":{}}}],["findone(email",{"_index":909,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone(uuid",{"_index":791,"title":{},"body":{"controllers/NotificationController.html":{}}}],["findsignin",{"_index":942,"title":{},"body":{"injectables/UserService.html":{}}}],["findsignin(email",{"_index":957,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserphoto",{"_index":900,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["finduserphoto(@param('id",{"_index":931,"title":{},"body":{"controllers/UserController.html":{}}}],["finduserphoto(id",{"_index":912,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["fk_account_user",{"_index":494,"title":{},"body":{"entities/Conta.html":{}}}],["fk_accounting_entry_account",{"_index":683,"title":{},"body":{"entities/Lancamento.html":{}}}],["fk_authentication_user",{"_index":197,"title":{},"body":{"entities/Authentication.html":{}}}],["fk_notification_user",{"_index":775,"title":{},"body":{"entities/Notification.html":{}}}],["flg_active",{"_index":469,"title":{},"body":{"entities/Conta.html":{},"entities/User.html":{}}}],["foi",{"_index":1106,"title":{},"body":{"index.html":{}}}],["fora",{"_index":837,"title":{},"body":{"classes/ResponseDto.html":{}}}],["foreignkeyconstraintname",{"_index":196,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{}}}],["forma",{"_index":1111,"title":{},"body":{"index.html":{}}}],["foto",{"_index":667,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["funcionamento",{"_index":146,"title":{},"body":{"injectables/AppService.html":{}}}],["funcionar",{"_index":98,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["function",{"_index":1040,"title":{},"body":{"coverage.html":{}}}],["function(err",{"_index":1017,"title":{},"body":{"injectables/UserService.html":{}}}],["functions",{"_index":1094,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["função",{"_index":141,"title":{},"body":{"injectables/AppService.html":{},"miscellaneous/functions.html":{}}}],["futuro",{"_index":605,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/UpdateContaDto.html":{}}}],["generated",{"_index":209,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["generated(\"uuid",{"_index":222,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["generatepassword(pwd",{"_index":1015,"title":{},"body":{"injectables/UserService.html":{}}}],["gensalt",{"_index":980,"title":{},"body":{"injectables/UserService.html":{}}}],["gensalt(10",{"_index":1016,"title":{},"body":{"injectables/UserService.html":{}}}],["gerada",{"_index":1118,"title":{},"body":{"index.html":{}}}],["gestor",{"_index":1169,"title":{},"body":{"index.html":{}}}],["get('getall",{"_index":928,"title":{},"body":{"controllers/UserController.html":{}}}],["get('getallbyuserid/:id",{"_index":517,"title":{},"body":{"controllers/ContaController.html":{}}}],["get('getbyaccount/:id",{"_index":716,"title":{},"body":{"controllers/LancamentoController.html":{}}}],["get('getbyemail",{"_index":910,"title":{},"body":{"controllers/UserController.html":{}}}],["get('getbyguid/:uuid",{"_index":792,"title":{},"body":{"controllers/NotificationController.html":{}}}],["get('getbyid/:id",{"_index":514,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["get('getnotificationstouser",{"_index":797,"title":{},"body":{"controllers/NotificationController.html":{}}}],["get('getuserphoto/:id",{"_index":930,"title":{},"body":{"controllers/UserController.html":{}}}],["get('me",{"_index":278,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["get('profile",{"_index":275,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["getall",{"_index":786,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getallbyuserid",{"_index":544,"title":{},"body":{"injectables/ContaService.html":{}}}],["getallbyuserid(id",{"_index":549,"title":{},"body":{"injectables/ContaService.html":{}}}],["getauthenticateduser",{"_index":336,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getauthenticateduser(email",{"_index":358,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getbyaccount",{"_index":710,"title":{},"body":{"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{}}}],["getbyaccount(@param('id",{"_index":728,"title":{},"body":{"controllers/LancamentoController.html":{}}}],["getbyaccount(contaid",{"_index":735,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["getbyaccount(id",{"_index":715,"title":{},"body":{"controllers/LancamentoController.html":{}}}],["getbyguid",{"_index":337,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{}}}],["getbyguid(uuid",{"_index":369,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{}}}],["getbyid",{"_index":338,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["getbyid(id",{"_index":372,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["getbyuserid",{"_index":504,"title":{},"body":{"controllers/ContaController.html":{}}}],["getbyuserid(@param('id",{"_index":532,"title":{},"body":{"controllers/ContaController.html":{}}}],["getbyuserid(id",{"_index":516,"title":{},"body":{"controllers/ContaController.html":{}}}],["gethealth",{"_index":85,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getnotificationstouser",{"_index":787,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["getnotificationstouser(@param('iduser",{"_index":809,"title":{},"body":{"controllers/NotificationController.html":{}}}],["getnotificationstouser(iduser",{"_index":796,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["getprofile",{"_index":226,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["getprofile(@request",{"_index":276,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["getprofile(req",{"_index":228,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["gets",{"_index":419,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getting",{"_index":1097,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":1031,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["gnu",{"_index":1205,"title":{},"body":{"properties.html":{}}}],["google",{"_index":1074,"title":{},"body":{"dependencies.html":{}}}],["grato",{"_index":1183,"title":{},"body":{"index.html":{}}}],["guard",{"_index":284,"title":{"guards/AuthenticationGuard.html":{}},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":285,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["guards/authentication.guard",{"_index":261,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["guid",{"_index":221,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"injectables/ContaService.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["guid'})@generated('uuid",{"_index":205,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["habilitar",{"_index":1145,"title":{},"body":{"index.html":{}}}],["handlers",{"_index":327,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["hash",{"_index":973,"title":{},"body":{"injectables/UserService.html":{}}}],["hash(createuserdto.password",{"_index":1011,"title":{},"body":{"injectables/UserService.html":{}}}],["hash(password",{"_index":987,"title":{},"body":{"injectables/UserService.html":{}}}],["hash(pwd",{"_index":1019,"title":{},"body":{"injectables/UserService.html":{}}}],["hashed",{"_index":976,"title":{},"body":{"injectables/UserService.html":{}}}],["hashedpassword",{"_index":390,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UserService.html":{}}}],["havendo",{"_index":831,"title":{},"body":{"classes/ResponseDto.html":{}}}],["header",{"_index":308,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["health",{"_index":78,"title":{},"body":{"controllers/AppController.html":{}}}],["here",{"_index":324,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["horizontalmente",{"_index":1116,"title":{},"body":{"index.html":{}}}],["host",{"_index":1216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["houver",{"_index":309,"title":{},"body":{"guards/AuthenticationGuard.html":{},"index.html":{}}}],["httpcode",{"_index":250,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(httpstatus.ok",{"_index":269,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(httpstatus.ok)@post('login",{"_index":245,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpexception",{"_index":393,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpexception('wrong",{"_index":456,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus",{"_index":251,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["httpstatus.bad_request",{"_index":459,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["id",{"_index":156,"title":{},"body":{"entities/Authentication.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateUserDto.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["identificador",{"_index":356,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"controllers/LancamentoController.html":{},"classes/LoginUserDto.html":{},"controllers/NotificationController.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["identificação",{"_index":722,"title":{},"body":{"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{}}}],["identifier",{"_index":585,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"coverage.html":{}}}],["iduser",{"_index":799,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["image",{"_index":620,"title":{},"body":{"classes/CreateLancamentoDto.html":{},"classes/CreateUserDto.html":{},"entities/Lancamento.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["imagem",{"_index":627,"title":{},"body":{"classes/CreateLancamentoDto.html":{},"classes/UpdateLancamentoDto.html":{},"injectables/UserService.html":{}}}],["implementar",{"_index":1151,"title":{},"body":{"index.html":{}}}],["implements",{"_index":313,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/ResponseDto.html":{}}}],["import",{"_index":34,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":62,"title":{},"body":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{}}}],["inactivate",{"_index":896,"title":{},"body":{"entities/User.html":{}}}],["incluído",{"_index":950,"title":{},"body":{"injectables/UserService.html":{}}}],["index",{"_index":82,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IResponse.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index.html",{"_index":1137,"title":{},"body":{"index.html":{}}}],["indica",{"_index":663,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{}}}],["info",{"_index":21,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IResponse.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["informação",{"_index":1104,"title":{},"body":{"index.html":{}}}],["inicializa",{"_index":841,"title":{},"body":{"classes/ResponseDto.html":{}}}],["injectable",{"_index":136,"title":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":137,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":395,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["injectrepository(authentication",{"_index":401,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["injectrepository(conta",{"_index":554,"title":{},"body":{"injectables/ContaService.html":{}}}],["injectrepository(lancamento",{"_index":740,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["injectrepository(notification",{"_index":823,"title":{},"body":{"injectables/NotificationService.html":{}}}],["injectrepository(user",{"_index":981,"title":{},"body":{"injectables/UserService.html":{}}}],["injeção",{"_index":110,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["insecureauth",{"_index":1229,"title":{},"body":{"miscellaneous/variables.html":{}}}],["insert",{"_index":891,"title":{},"body":{"entities/User.html":{}}}],["interface",{"_index":670,"title":{"interfaces/IResponse.html":{}},"body":{"interfaces/IResponse.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":671,"title":{},"body":{"interfaces/IResponse.html":{}}}],["interfaces/iresponse.interface",{"_index":263,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["interno",{"_index":955,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["invalid",{"_index":997,"title":{},"body":{"injectables/UserService.html":{}}}],["início",{"_index":1096,"title":{},"body":{"miscellaneous/functions.html":{}}}],["iresponse",{"_index":262,"title":{"interfaces/IResponse.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"interfaces/IResponse.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["isboolean",{"_index":643,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/UpdateNotificationDto.html":{}}}],["isemail",{"_index":658,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/SignInDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{}}}],["isglobal",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":215,"title":{},"body":{"entities/Authentication.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"classes/SignInDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{}}}],["ispasswordmatching",{"_index":460,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UserService.html":{}}}],["isstring",{"_index":644,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/SignInDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{}}}],["joincolumn",{"_index":212,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["jwt",{"_index":249,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateAuthenticationDto.html":{},"classes/UpdateAuthenticationDto.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants",{"_index":40,"title":{},"body":{"modules/AplicativoModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":66,"title":{},"body":{"modules/AplicativoModule.html":{},"guards/AuthenticationGuard.html":{}}}],["jwtmodule",{"_index":38,"title":{},"body":{"modules/AplicativoModule.html":{}}}],["jwtmodule.register",{"_index":64,"title":{},"body":{"modules/AplicativoModule.html":{}}}],["jwtservice",{"_index":291,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{}}}],["key",{"_index":178,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["keys",{"_index":883,"title":{},"body":{"entities/User.html":{}}}],["lancamento",{"_index":58,"title":{"entities/Lancamento.html":{}},"body":{"modules/AplicativoModule.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"coverage.html":{}}}],["lancamento.conta",{"_index":478,"title":{},"body":{"entities/Conta.html":{}}}],["lancamento.entity",{"_index":499,"title":{},"body":{"entities/Conta.html":{}}}],["lancamentocontroller",{"_index":33,"title":{"controllers/LancamentoController.html":{}},"body":{"modules/AplicativoModule.html":{},"controllers/LancamentoController.html":{},"coverage.html":{}}}],["lancamentos",{"_index":463,"title":{},"body":{"entities/Conta.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{}}}],["lancamentoservice",{"_index":16,"title":{"injectables/LancamentoService.html":{}},"body":{"modules/AplicativoModule.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"coverage.html":{},"overview.html":{}}}],["lannçamento",{"_index":714,"title":{},"body":{"controllers/LancamentoController.html":{}}}],["lançamento",{"_index":512,"title":{},"body":{"controllers/ContaController.html":{},"classes/CreateLancamentoDto.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/UpdateLancamentoDto.html":{},"index.html":{}}}],["lançamentos",{"_index":610,"title":{},"body":{"classes/CreateContaDto.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/UpdateContaDto.html":{},"index.html":{}}}],["lazy",{"_index":479,"title":{},"body":{"entities/Conta.html":{},"entities/User.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{},"overview.html":{}}}],["length",{"_index":870,"title":{},"body":{"entities/User.html":{}}}],["license",{"_index":1204,"title":{},"body":{"properties.html":{}}}],["local",{"_index":1078,"title":{},"body":{"dependencies.html":{}}}],["lodash",{"_index":1064,"title":{},"body":{"dependencies.html":{}}}],["log",{"_index":888,"title":{},"body":{"entities/User.html":{}}}],["logado",{"_index":233,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["loginuserdto",{"_index":666,"title":{"classes/LoginUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"coverage.html":{}}}],["longtext",{"_index":868,"title":{},"body":{"entities/User.html":{}}}],["lookupall",{"_index":418,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["mail",{"_index":365,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/SignInDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["main.ts",{"_index":1157,"title":{},"body":{"index.html":{}}}],["maior",{"_index":611,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/UpdateContaDto.html":{}}}],["manager",{"_index":1055,"title":{},"body":{"dependencies.html":{}}}],["manter",{"_index":1149,"title":{},"body":{"index.html":{}}}],["mantida",{"_index":1141,"title":{},"body":{"index.html":{}}}],["mantido",{"_index":1172,"title":{},"body":{"index.html":{}}}],["manytoone",{"_index":213,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["manytoone(undefined",{"_index":190,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{}}}],["mapping.decorator",{"_index":105,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["matching",{"_index":73,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IResponse.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["maximizando",{"_index":838,"title":{},"body":{"classes/ResponseDto.html":{}}}],["me(@request",{"_index":279,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["me(req",{"_index":240,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["me(user",{"_index":376,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["mensagem",{"_index":639,"title":{},"body":{"classes/CreateNotificationDto.html":{},"interfaces/IResponse.html":{},"classes/ResponseDto.html":{},"classes/UpdateNotificationDto.html":{}}}],["mensalmente",{"_index":1190,"title":{},"body":{"index.html":{}}}],["mesmo",{"_index":1192,"title":{},"body":{"index.html":{}}}],["mesquita",{"_index":1174,"title":{},"body":{"index.html":{},"properties.html":{}}}],["message",{"_index":432,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"classes/CreateNotificationDto.html":{},"interfaces/IResponse.html":{},"injectables/LancamentoService.html":{},"entities/Notification.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/UpdateNotificationDto.html":{},"injectables/UserService.html":{}}}],["metadata",{"_index":1081,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":83,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["migrations",{"_index":1152,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["migrationstablename",{"_index":1232,"title":{},"body":{"miscellaneous/variables.html":{}}}],["minha",{"_index":1176,"title":{},"body":{"index.html":{}}}],["minlength",{"_index":659,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{}}}],["minlength(4",{"_index":660,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{}}}],["minlength(8",{"_index":886,"title":{},"body":{"entities/User.html":{}}}],["miscellaneous",{"_index":1093,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":584,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{}}}],["module",{"_index":0,"title":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{}},"body":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["mudanças",{"_index":1125,"title":{},"body":{"index.html":{}}}],["mysql",{"_index":1140,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["mysql2",{"_index":1066,"title":{},"body":{"dependencies.html":{}}}],["módulo",{"_index":26,"title":{},"body":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{}}}],["na",{"_index":1133,"title":{},"body":{"index.html":{}}}],["name",{"_index":220,"title":{},"body":{"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateUserDto.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["neste",{"_index":1188,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1110,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":35,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/common/decorators/http/request",{"_index":104,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["nestjs/common/decorators/http/route",{"_index":258,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["nestjs/config",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1046,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":39,"title":{},"body":{"modules/AplicativoModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":1048,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":1050,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":103,"title":{},"body":{"controllers/AppController.html":{},"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":37,"title":{},"body":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{},"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":317,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["nico",{"_index":821,"title":{},"body":{"injectables/NotificationService.html":{}}}],["nome",{"_index":464,"title":{},"body":{"entities/Conta.html":{},"injectables/ContaService.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{}}}],["notificacao",{"_index":806,"title":{},"body":{"controllers/NotificationController.html":{}}}],["notification",{"_index":50,"title":{"entities/Notification.html":{}},"body":{"modules/AplicativoModule.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"coverage.html":{}}}],["notificationcontroller",{"_index":31,"title":{"controllers/NotificationController.html":{}},"body":{"modules/AplicativoModule.html":{},"controllers/NotificationController.html":{},"coverage.html":{}}}],["notificationservice",{"_index":17,"title":{"injectables/NotificationService.html":{}},"body":{"modules/AplicativoModule.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"coverage.html":{},"overview.html":{}}}],["notificatios",{"_index":778,"title":{},"body":{"entities/Notification.html":{}}}],["notificação",{"_index":636,"title":{},"body":{"classes/CreateNotificationDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateNotificationDto.html":{}}}],["notificações",{"_index":795,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"index.html":{}}}],["novo",{"_index":949,"title":{},"body":{"injectables/UserService.html":{}}}],["now",{"_index":167,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["npm",{"_index":1068,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["null",{"_index":416,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"classes/CreateNotificationDto.html":{},"injectables/LancamentoService.html":{},"entities/Notification.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/UpdateNotificationDto.html":{},"injectables/UserService.html":{}}}],["nullable",{"_index":199,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["num_balance_consolidated",{"_index":485,"title":{},"body":{"entities/Conta.html":{}}}],["num_balance_credit",{"_index":487,"title":{},"body":{"entities/Conta.html":{}}}],["num_balance_debit",{"_index":489,"title":{},"body":{"entities/Conta.html":{}}}],["num_balance_future",{"_index":491,"title":{},"body":{"entities/Conta.html":{}}}],["num_value",{"_index":702,"title":{},"body":{"entities/Lancamento.html":{}}}],["number",{"_index":172,"title":{},"body":{"entities/Authentication.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["não",{"_index":1143,"title":{},"body":{"index.html":{}}}],["o",{"_index":145,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"classes/ResponseDto.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["oauth20",{"_index":1075,"title":{},"body":{"dependencies.html":{}}}],["object",{"_index":323,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["objetivo",{"_index":1163,"title":{},"body":{"index.html":{}}}],["objeto",{"_index":676,"title":{},"body":{"interfaces/IResponse.html":{},"classes/ResponseDto.html":{}}}],["obtem",{"_index":718,"title":{},"body":{"controllers/LancamentoController.html":{}}}],["obter",{"_index":361,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["obtém",{"_index":231,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["occurred",{"_index":433,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["ondelete",{"_index":192,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["onetomany",{"_index":498,"title":{},"body":{"entities/Conta.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":477,"title":{},"body":{"entities/Conta.html":{},"entities/User.html":{}}}],["onupdate",{"_index":187,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["opensource",{"_index":1164,"title":{},"body":{"index.html":{}}}],["optional",{"_index":235,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateNotificationDto.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["order",{"_index":555,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["orquestrador",{"_index":1154,"title":{},"body":{"index.html":{}}}],["os",{"_index":720,"title":{},"body":{"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/ResponseDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["ou",{"_index":675,"title":{},"body":{"interfaces/IResponse.html":{},"classes/ResponseDto.html":{},"index.html":{}}}],["out",{"_index":20,"title":{},"body":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{},"overview.html":{}}}],["overview",{"_index":1198,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1043,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["paixão",{"_index":1177,"title":{},"body":{"index.html":{}}}],["para",{"_index":143,"title":{},"body":{"injectables/AppService.html":{},"classes/ResponseDto.html":{},"index.html":{}}}],["param",{"_index":113,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["parameters",{"_index":234,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["params.decorator",{"_index":259,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["parseint(process.env.mysql_port,3306",{"_index":1219,"title":{},"body":{"miscellaneous/variables.html":{}}}],["partialtype",{"_index":593,"title":{},"body":{"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{}}}],["partialtype(createauthenticationdto",{"_index":595,"title":{},"body":{"classes/CreateAuthenticationDto.html":{},"classes/UpdateAuthenticationDto.html":{}}}],["partialtype(createcontadto",{"_index":615,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/UpdateContaDto.html":{}}}],["partialtype(createlancamentodto",{"_index":633,"title":{},"body":{"classes/CreateLancamentoDto.html":{},"classes/UpdateLancamentoDto.html":{}}}],["partialtype(createnotificationdto",{"_index":646,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/UpdateNotificationDto.html":{}}}],["partialtype(createuserdto",{"_index":662,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{}}}],["partir",{"_index":1155,"title":{},"body":{"index.html":{}}}],["parâmetro",{"_index":238,"title":{},"body":{"controllers/AuthenticationController.html":{},"index.html":{}}}],["pass",{"_index":380,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["passport",{"_index":1072,"title":{},"body":{"dependencies.html":{}}}],["password",{"_index":649,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/SignInDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["pasta",{"_index":1132,"title":{},"body":{"index.html":{}}}],["patrocinar",{"_index":1189,"title":{},"body":{"index.html":{}}}],["payload",{"_index":319,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{}}}],["pela",{"_index":1119,"title":{},"body":{"index.html":{}}}],["pelo",{"_index":267,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["permissão",{"_index":303,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["permitir",{"_index":1112,"title":{},"body":{"index.html":{}}}],["photo",{"_index":996,"title":{},"body":{"injectables/UserService.html":{}}}],["pk",{"_index":204,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["plain",{"_index":977,"title":{},"body":{"injectables/UserService.html":{}}}],["plaintextpassword",{"_index":359,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["pode",{"_index":298,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["por",{"_index":371,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateLancamentoDto.html":{},"injectables/NotificationService.html":{},"classes/UpdateLancamentoDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["port",{"_index":1218,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":256,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["post('login",{"_index":270,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post()@usepipes(new",{"_index":506,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["prefix",{"_index":77,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["primary",{"_index":177,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn",{"_index":208,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["primário",{"_index":374,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"classes/CreateContaDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["principal",{"_index":375,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["private",{"_index":288,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["process.env.debug",{"_index":1228,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.insecure_auth",{"_index":1230,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.jwt_secret",{"_index":1212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mysql_database",{"_index":1223,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mysql_host",{"_index":1217,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mysql_password",{"_index":1221,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mysql_username",{"_index":1220,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projeto",{"_index":1135,"title":{},"body":{"index.html":{}}}],["promise",{"_index":96,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":153,"title":{"properties.html":{}},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IResponse.html":{},"entities/Lancamento.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"properties.html":{}}}],["provided",{"_index":458,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{},"overview.html":{}}}],["public",{"_index":335,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["purposes",{"_index":889,"title":{},"body":{"entities/User.html":{}}}],["put",{"_index":523,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["put('updateuserphoto",{"_index":934,"title":{},"body":{"controllers/UserController.html":{}}}],["que",{"_index":612,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/ResponseDto.html":{},"classes/UpdateContaDto.html":{},"index.html":{}}}],["queryrunner",{"_index":570,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{}}}],["queryrunner.committransaction",{"_index":576,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{}}}],["queryrunner.connect",{"_index":572,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{}}}],["queryrunner.manager.save(conta",{"_index":574,"title":{},"body":{"injectables/ContaService.html":{}}}],["queryrunner.manager.save(lancamento",{"_index":755,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["queryrunner.release",{"_index":579,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{}}}],["queryrunner.rollbacktransaction",{"_index":577,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{}}}],["queryrunner.starttransaction",{"_index":573,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{}}}],["raiz",{"_index":1134,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":115,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateUserDto.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["record",{"_index":441,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["redis",{"_index":1056,"title":{},"body":{"dependencies.html":{}}}],["reflect",{"_index":1080,"title":{},"body":{"dependencies.html":{}}}],["registo",{"_index":352,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["relations",{"_index":427,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/UserService.html":{}}}],["repository",{"_index":342,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["repositório",{"_index":345,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["req",{"_index":236,"title":{},"body":{"controllers/AuthenticationController.html":{},"miscellaneous/variables.html":{}}}],["req.user",{"_index":277,"title":{},"body":{"controllers/AuthenticationController.html":{},"miscellaneous/variables.html":{}}}],["request",{"_index":253,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{}}}],["request.headers.authorization?.split",{"_index":330,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["request['user",{"_index":328,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["requisição",{"_index":237,"title":{},"body":{"controllers/AuthenticationController.html":{},"miscellaneous/variables.html":{}}}],["reset",{"_index":19,"title":{},"body":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{},"overview.html":{}}}],["response",{"_index":422,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["response.data",{"_index":424,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["response.error",{"_index":428,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["response.message",{"_index":429,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["response.success",{"_index":423,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["responsedto",{"_index":397,"title":{"classes/ResponseDto.html":{}},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["responsável",{"_index":293,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["resposta",{"_index":673,"title":{},"body":{"interfaces/IResponse.html":{},"classes/ResponseDto.html":{}}}],["rest",{"_index":1101,"title":{},"body":{"index.html":{}}}],["result",{"_index":281,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["result.affected",{"_index":451,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["result.id",{"_index":440,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["result.raw",{"_index":453,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["results",{"_index":72,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IResponse.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retorna",{"_index":378,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["return",{"_index":116,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returna",{"_index":89,"title":{},"body":{"controllers/AppController.html":{}}}],["returns",{"_index":95,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["rimraf",{"_index":1083,"title":{},"body":{"dependencies.html":{}}}],["rodar",{"_index":94,"title":{},"body":{"controllers/AppController.html":{}}}],["role",{"_index":408,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["route",{"_index":326,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["rules",{"_index":892,"title":{},"body":{"entities/User.html":{}}}],["run",{"_index":1130,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1085,"title":{},"body":{"dependencies.html":{}}}],["saldo",{"_index":601,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/UpdateContaDto.html":{}}}],["saldoconsolidado",{"_index":465,"title":{},"body":{"entities/Conta.html":{},"injectables/ContaService.html":{},"classes/CreateContaDto.html":{},"classes/UpdateContaDto.html":{}}}],["saldocredito",{"_index":466,"title":{},"body":{"entities/Conta.html":{},"injectables/ContaService.html":{},"classes/CreateContaDto.html":{},"classes/UpdateContaDto.html":{}}}],["saldodebito",{"_index":467,"title":{},"body":{"entities/Conta.html":{},"injectables/ContaService.html":{},"classes/CreateContaDto.html":{},"classes/UpdateContaDto.html":{}}}],["saldofuturo",{"_index":468,"title":{},"body":{"entities/Conta.html":{},"injectables/ContaService.html":{},"classes/CreateContaDto.html":{},"classes/UpdateContaDto.html":{}}}],["salt",{"_index":1018,"title":{},"body":{"injectables/UserService.html":{}}}],["se",{"_index":91,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"index.html":{}}}],["secret",{"_index":65,"title":{},"body":{"modules/AplicativoModule.html":{},"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["secundário",{"_index":357,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{}}}],["segurança",{"_index":1214,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sejam",{"_index":835,"title":{},"body":{"classes/ResponseDto.html":{}}}],["select",{"_index":426,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["sempre",{"_index":832,"title":{},"body":{"classes/ResponseDto.html":{},"index.html":{}}}],["senha",{"_index":366,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/SignInDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"injectables/UserService.html":{}}}],["separado",{"_index":624,"title":{},"body":{"classes/CreateLancamentoDto.html":{},"classes/UpdateLancamentoDto.html":{}}}],["ser",{"_index":1123,"title":{},"body":{"index.html":{}}}],["service",{"_index":268,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{}}}],["services/authentication.service",{"_index":43,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/AuthenticationController.html":{}}}],["services/conta.service",{"_index":57,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/ContaController.html":{}}}],["services/lancamento.service",{"_index":61,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/LancamentoController.html":{}}}],["services/notification.service",{"_index":53,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/NotificationController.html":{}}}],["services/user.service",{"_index":47,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/UserController.html":{}}}],["serviço",{"_index":109,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["seu",{"_index":1156,"title":{},"body":{"index.html":{}}}],["signin",{"_index":227,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["signin(@body",{"_index":271,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["signin(dto",{"_index":243,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["signin(username",{"_index":379,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["signindto",{"_index":244,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"classes/SignInDto.html":{},"coverage.html":{}}}],["signoptions",{"_index":67,"title":{},"body":{"modules/AplicativoModule.html":{}}}],["simples",{"_index":142,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["sistema",{"_index":81,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/SignInDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{}}}],["slugify",{"_index":1087,"title":{},"body":{"dependencies.html":{}}}],["software",{"_index":1126,"title":{},"body":{"index.html":{}}}],["soluções",{"_index":1178,"title":{},"body":{"index.html":{}}}],["source",{"_index":22,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IResponse.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["src/.../get",{"_index":1208,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1095,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../typeorm.config.ts",{"_index":1209,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/aplicativo/aplicativo.module.ts",{"_index":24,"title":{},"body":{"modules/AplicativoModule.html":{}}}],["src/aplicativo/controllers/authentication.controller.ts",{"_index":224,"title":{},"body":{"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["src/aplicativo/controllers/authentication.controller.ts:32",{"_index":246,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/aplicativo/controllers/authentication.controller.ts:45",{"_index":230,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/aplicativo/controllers/authentication.controller.ts:57",{"_index":242,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/aplicativo/controllers/conta.controller.ts",{"_index":501,"title":{},"body":{"controllers/ContaController.html":{},"coverage.html":{}}}],["src/aplicativo/controllers/conta.controller.ts:37",{"_index":518,"title":{},"body":{"controllers/ContaController.html":{}}}],["src/aplicativo/controllers/conta.controller.ts:49",{"_index":515,"title":{},"body":{"controllers/ContaController.html":{}}}],["src/aplicativo/controllers/conta.controller.ts:61",{"_index":524,"title":{},"body":{"controllers/ContaController.html":{}}}],["src/aplicativo/controllers/conta.controller.ts:73",{"_index":508,"title":{},"body":{"controllers/ContaController.html":{}}}],["src/aplicativo/controllers/conta.controller.ts:84",{"_index":511,"title":{},"body":{"controllers/ContaController.html":{}}}],["src/aplicativo/controllers/lancamento.controller.ts",{"_index":708,"title":{},"body":{"controllers/LancamentoController.html":{},"coverage.html":{}}}],["src/aplicativo/controllers/lancamento.controller.ts:37",{"_index":717,"title":{},"body":{"controllers/LancamentoController.html":{}}}],["src/aplicativo/controllers/lancamento.controller.ts:49",{"_index":713,"title":{},"body":{"controllers/LancamentoController.html":{}}}],["src/aplicativo/controllers/lancamento.controller.ts:61",{"_index":723,"title":{},"body":{"controllers/LancamentoController.html":{}}}],["src/aplicativo/controllers/lancamento.controller.ts:73",{"_index":711,"title":{},"body":{"controllers/LancamentoController.html":{}}}],["src/aplicativo/controllers/lancamento.controller.ts:84",{"_index":712,"title":{},"body":{"controllers/LancamentoController.html":{}}}],["src/aplicativo/controllers/notification.controller.ts",{"_index":784,"title":{},"body":{"controllers/NotificationController.html":{},"coverage.html":{}}}],["src/aplicativo/controllers/notification.controller.ts:105",{"_index":789,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/aplicativo/controllers/notification.controller.ts:36",{"_index":794,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/aplicativo/controllers/notification.controller.ts:48",{"_index":793,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/aplicativo/controllers/notification.controller.ts:59",{"_index":790,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/aplicativo/controllers/notification.controller.ts:70",{"_index":798,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/aplicativo/controllers/notification.controller.ts:82",{"_index":800,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/aplicativo/controllers/notification.controller.ts:94",{"_index":788,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/aplicativo/controllers/user.controller.ts",{"_index":899,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/aplicativo/controllers/user.controller.ts:110",{"_index":902,"title":{},"body":{"controllers/UserController.html":{}}}],["src/aplicativo/controllers/user.controller.ts:122",{"_index":906,"title":{},"body":{"controllers/UserController.html":{}}}],["src/aplicativo/controllers/user.controller.ts:35",{"_index":911,"title":{},"body":{"controllers/UserController.html":{}}}],["src/aplicativo/controllers/user.controller.ts:47",{"_index":916,"title":{},"body":{"controllers/UserController.html":{}}}],["src/aplicativo/controllers/user.controller.ts:60",{"_index":908,"title":{},"body":{"controllers/UserController.html":{}}}],["src/aplicativo/controllers/user.controller.ts:73",{"_index":914,"title":{},"body":{"controllers/UserController.html":{}}}],["src/aplicativo/controllers/user.controller.ts:86",{"_index":919,"title":{},"body":{"controllers/UserController.html":{}}}],["src/aplicativo/controllers/user.controller.ts:98",{"_index":922,"title":{},"body":{"controllers/UserController.html":{}}}],["src/aplicativo/decorators/get",{"_index":1028,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/aplicativo/dto/authentication",{"_index":588,"title":{},"body":{"classes/CreateAuthenticationDto.html":{},"classes/UpdateAuthenticationDto.html":{},"coverage.html":{}}}],["src/aplicativo/dto/conta",{"_index":596,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/UpdateContaDto.html":{},"coverage.html":{}}}],["src/aplicativo/dto/lancamento",{"_index":617,"title":{},"body":{"classes/CreateLancamentoDto.html":{},"classes/UpdateLancamentoDto.html":{},"coverage.html":{}}}],["src/aplicativo/dto/notification",{"_index":635,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["src/aplicativo/dto/response",{"_index":830,"title":{},"body":{"classes/ResponseDto.html":{},"coverage.html":{}}}],["src/aplicativo/dto/sign",{"_index":849,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/aplicativo/dto/user",{"_index":648,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/aplicativo/entities/authentication.entity.ts",{"_index":150,"title":{},"body":{"entities/Authentication.html":{},"coverage.html":{}}}],["src/aplicativo/entities/authentication.entity.ts:13",{"_index":179,"title":{},"body":{"entities/Authentication.html":{}}}],["src/aplicativo/entities/authentication.entity.ts:18",{"_index":206,"title":{},"body":{"entities/Authentication.html":{}}}],["src/aplicativo/entities/authentication.entity.ts:23",{"_index":184,"title":{},"body":{"entities/Authentication.html":{}}}],["src/aplicativo/entities/authentication.entity.ts:27",{"_index":200,"title":{},"body":{"entities/Authentication.html":{}}}],["src/aplicativo/entities/authentication.entity.ts:31",{"_index":198,"title":{},"body":{"entities/Authentication.html":{}}}],["src/aplicativo/entities/authentication.entity.ts:34",{"_index":168,"title":{},"body":{"entities/Authentication.html":{}}}],["src/aplicativo/entities/authentication.entity.ts:37",{"_index":189,"title":{},"body":{"entities/Authentication.html":{}}}],["src/aplicativo/entities/authentication.entity.ts:40",{"_index":171,"title":{},"body":{"entities/Authentication.html":{}}}],["src/aplicativo/entities/conta.entity.ts",{"_index":461,"title":{},"body":{"entities/Conta.html":{},"coverage.html":{}}}],["src/aplicativo/entities/conta.entity.ts:13",{"_index":476,"title":{},"body":{"entities/Conta.html":{}}}],["src/aplicativo/entities/conta.entity.ts:18",{"_index":497,"title":{},"body":{"entities/Conta.html":{}}}],["src/aplicativo/entities/conta.entity.ts:22",{"_index":484,"title":{},"body":{"entities/Conta.html":{}}}],["src/aplicativo/entities/conta.entity.ts:26",{"_index":474,"title":{},"body":{"entities/Conta.html":{}}}],["src/aplicativo/entities/conta.entity.ts:30",{"_index":488,"title":{},"body":{"entities/Conta.html":{}}}],["src/aplicativo/entities/conta.entity.ts:34",{"_index":490,"title":{},"body":{"entities/Conta.html":{}}}],["src/aplicativo/entities/conta.entity.ts:38",{"_index":492,"title":{},"body":{"entities/Conta.html":{}}}],["src/aplicativo/entities/conta.entity.ts:42",{"_index":486,"title":{},"body":{"entities/Conta.html":{}}}],["src/aplicativo/entities/conta.entity.ts:46",{"_index":496,"title":{},"body":{"entities/Conta.html":{}}}],["src/aplicativo/entities/conta.entity.ts:50",{"_index":495,"title":{},"body":{"entities/Conta.html":{}}}],["src/aplicativo/entities/conta.entity.ts:54",{"_index":470,"title":{},"body":{"entities/Conta.html":{}}}],["src/aplicativo/entities/conta.entity.ts:57",{"_index":471,"title":{},"body":{"entities/Conta.html":{}}}],["src/aplicativo/entities/conta.entity.ts:60",{"_index":493,"title":{},"body":{"entities/Conta.html":{}}}],["src/aplicativo/entities/conta.entity.ts:63",{"_index":472,"title":{},"body":{"entities/Conta.html":{}}}],["src/aplicativo/entities/conta.entity.ts:69",{"_index":482,"title":{},"body":{"entities/Conta.html":{}}}],["src/aplicativo/entities/lancamento.entity.ts",{"_index":679,"title":{},"body":{"entities/Lancamento.html":{},"coverage.html":{}}}],["src/aplicativo/entities/lancamento.entity.ts:12",{"_index":692,"title":{},"body":{"entities/Lancamento.html":{}}}],["src/aplicativo/entities/lancamento.entity.ts:17",{"_index":701,"title":{},"body":{"entities/Lancamento.html":{}}}],["src/aplicativo/entities/lancamento.entity.ts:21",{"_index":696,"title":{},"body":{"entities/Lancamento.html":{}}}],["src/aplicativo/entities/lancamento.entity.ts:25",{"_index":698,"title":{},"body":{"entities/Lancamento.html":{}}}],["src/aplicativo/entities/lancamento.entity.ts:29",{"_index":690,"title":{},"body":{"entities/Lancamento.html":{}}}],["src/aplicativo/entities/lancamento.entity.ts:33",{"_index":688,"title":{},"body":{"entities/Lancamento.html":{}}}],["src/aplicativo/entities/lancamento.entity.ts:37",{"_index":703,"title":{},"body":{"entities/Lancamento.html":{}}}],["src/aplicativo/entities/lancamento.entity.ts:41",{"_index":681,"title":{},"body":{"entities/Lancamento.html":{}}}],["src/aplicativo/entities/lancamento.entity.ts:45",{"_index":694,"title":{},"body":{"entities/Lancamento.html":{}}}],["src/aplicativo/entities/lancamento.entity.ts:49",{"_index":684,"title":{},"body":{"entities/Lancamento.html":{}}}],["src/aplicativo/entities/lancamento.entity.ts:53",{"_index":685,"title":{},"body":{"entities/Lancamento.html":{}}}],["src/aplicativo/entities/lancamento.entity.ts:56",{"_index":686,"title":{},"body":{"entities/Lancamento.html":{}}}],["src/aplicativo/entities/lancamento.entity.ts:59",{"_index":699,"title":{},"body":{"entities/Lancamento.html":{}}}],["src/aplicativo/entities/lancamento.entity.ts:62",{"_index":689,"title":{},"body":{"entities/Lancamento.html":{}}}],["src/aplicativo/entities/notification.entity.ts",{"_index":766,"title":{},"body":{"entities/Notification.html":{},"coverage.html":{}}}],["src/aplicativo/entities/notification.entity.ts:13",{"_index":770,"title":{},"body":{"entities/Notification.html":{}}}],["src/aplicativo/entities/notification.entity.ts:18",{"_index":781,"title":{},"body":{"entities/Notification.html":{}}}],["src/aplicativo/entities/notification.entity.ts:23",{"_index":772,"title":{},"body":{"entities/Notification.html":{}}}],["src/aplicativo/entities/notification.entity.ts:27",{"_index":780,"title":{},"body":{"entities/Notification.html":{}}}],["src/aplicativo/entities/notification.entity.ts:31",{"_index":776,"title":{},"body":{"entities/Notification.html":{}}}],["src/aplicativo/entities/notification.entity.ts:34",{"_index":767,"title":{},"body":{"entities/Notification.html":{}}}],["src/aplicativo/entities/notification.entity.ts:37",{"_index":773,"title":{},"body":{"entities/Notification.html":{}}}],["src/aplicativo/entities/notification.entity.ts:40",{"_index":768,"title":{},"body":{"entities/Notification.html":{}}}],["src/aplicativo/entities/user.entity.ts",{"_index":858,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/aplicativo/entities/user.entity.ts:17",{"_index":867,"title":{},"body":{"entities/User.html":{}}}],["src/aplicativo/entities/user.entity.ts:23",{"_index":880,"title":{},"body":{"entities/User.html":{}}}],["src/aplicativo/entities/user.entity.ts:30",{"_index":872,"title":{},"body":{"entities/User.html":{}}}],["src/aplicativo/entities/user.entity.ts:35",{"_index":866,"title":{},"body":{"entities/User.html":{}}}],["src/aplicativo/entities/user.entity.ts:40",{"_index":876,"title":{},"body":{"entities/User.html":{}}}],["src/aplicativo/entities/user.entity.ts:44",{"_index":878,"title":{},"body":{"entities/User.html":{}}}],["src/aplicativo/entities/user.entity.ts:48",{"_index":859,"title":{},"body":{"entities/User.html":{}}}],["src/aplicativo/entities/user.entity.ts:52",{"_index":869,"title":{},"body":{"entities/User.html":{}}}],["src/aplicativo/entities/user.entity.ts:57",{"_index":862,"title":{},"body":{"entities/User.html":{}}}],["src/aplicativo/entities/user.entity.ts:60",{"_index":879,"title":{},"body":{"entities/User.html":{}}}],["src/aplicativo/entities/user.entity.ts:63",{"_index":863,"title":{},"body":{"entities/User.html":{}}}],["src/aplicativo/entities/user.entity.ts:69",{"_index":861,"title":{},"body":{"entities/User.html":{}}}],["src/aplicativo/guards/authentication.guard.ts",{"_index":286,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/aplicativo/guards/authentication.guard.ts:15",{"_index":292,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/aplicativo/guards/authentication.guard.ts:30",{"_index":296,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/aplicativo/guards/authentication.guard.ts:58",{"_index":305,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/aplicativo/interfaces/iresponse.interface.ts",{"_index":672,"title":{},"body":{"interfaces/IResponse.html":{},"coverage.html":{}}}],["src/aplicativo/services/authentication.service.ts",{"_index":332,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["src/aplicativo/services/authentication.service.ts:112",{"_index":373,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/aplicativo/services/authentication.service.ts:124",{"_index":370,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/aplicativo/services/authentication.service.ts:136",{"_index":349,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/aplicativo/services/authentication.service.ts:16",{"_index":344,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/aplicativo/services/authentication.service.ts:169",{"_index":386,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/aplicativo/services/authentication.service.ts:194",{"_index":354,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/aplicativo/services/authentication.service.ts:222",{"_index":360,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/aplicativo/services/authentication.service.ts:239",{"_index":391,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/aplicativo/services/authentication.service.ts:39",{"_index":381,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/aplicativo/services/authentication.service.ts:76",{"_index":377,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/aplicativo/services/conta.service.ts",{"_index":543,"title":{},"body":{"injectables/ContaService.html":{},"coverage.html":{}}}],["src/aplicativo/services/conta.service.ts:103",{"_index":551,"title":{},"body":{"injectables/ContaService.html":{}}}],["src/aplicativo/services/conta.service.ts:124",{"_index":547,"title":{},"body":{"injectables/ContaService.html":{}}}],["src/aplicativo/services/conta.service.ts:13",{"_index":546,"title":{},"body":{"injectables/ContaService.html":{}}}],["src/aplicativo/services/conta.service.ts:181",{"_index":553,"title":{},"body":{"injectables/ContaService.html":{}}}],["src/aplicativo/services/conta.service.ts:216",{"_index":548,"title":{},"body":{"injectables/ContaService.html":{}}}],["src/aplicativo/services/conta.service.ts:33",{"_index":550,"title":{},"body":{"injectables/ContaService.html":{}}}],["src/aplicativo/services/conta.service.ts:82",{"_index":552,"title":{},"body":{"injectables/ContaService.html":{}}}],["src/aplicativo/services/lancamento.service.ts",{"_index":730,"title":{},"body":{"injectables/LancamentoService.html":{},"coverage.html":{}}}],["src/aplicativo/services/lancamento.service.ts:117",{"_index":732,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["src/aplicativo/services/lancamento.service.ts:13",{"_index":731,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["src/aplicativo/services/lancamento.service.ts:175",{"_index":739,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["src/aplicativo/services/lancamento.service.ts:214",{"_index":733,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["src/aplicativo/services/lancamento.service.ts:33",{"_index":736,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["src/aplicativo/services/lancamento.service.ts:75",{"_index":738,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["src/aplicativo/services/lancamento.service.ts:96",{"_index":737,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["src/aplicativo/services/notification.service.ts",{"_index":813,"title":{},"body":{"injectables/NotificationService.html":{},"coverage.html":{}}}],["src/aplicativo/services/notification.service.ts:102",{"_index":820,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/aplicativo/services/notification.service.ts:121",{"_index":815,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/aplicativo/services/notification.service.ts:13",{"_index":814,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/aplicativo/services/notification.service.ts:154",{"_index":822,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/aplicativo/services/notification.service.ts:180",{"_index":816,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/aplicativo/services/notification.service.ts:31",{"_index":817,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/aplicativo/services/notification.service.ts:61",{"_index":819,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/aplicativo/services/notification.service.ts:81",{"_index":818,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/aplicativo/services/user.service.ts",{"_index":940,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/aplicativo/services/user.service.ts:108",{"_index":956,"title":{},"body":{"injectables/UserService.html":{}}}],["src/aplicativo/services/user.service.ts:118",{"_index":959,"title":{},"body":{"injectables/UserService.html":{}}}],["src/aplicativo/services/user.service.ts:134",{"_index":958,"title":{},"body":{"injectables/UserService.html":{}}}],["src/aplicativo/services/user.service.ts:14",{"_index":945,"title":{},"body":{"injectables/UserService.html":{}}}],["src/aplicativo/services/user.service.ts:150",{"_index":954,"title":{},"body":{"injectables/UserService.html":{}}}],["src/aplicativo/services/user.service.ts:159",{"_index":974,"title":{},"body":{"injectables/UserService.html":{}}}],["src/aplicativo/services/user.service.ts:175",{"_index":971,"title":{},"body":{"injectables/UserService.html":{}}}],["src/aplicativo/services/user.service.ts:204",{"_index":969,"title":{},"body":{"injectables/UserService.html":{}}}],["src/aplicativo/services/user.service.ts:235",{"_index":965,"title":{},"body":{"injectables/UserService.html":{}}}],["src/aplicativo/services/user.service.ts:273",{"_index":947,"title":{},"body":{"injectables/UserService.html":{}}}],["src/aplicativo/services/user.service.ts:309",{"_index":951,"title":{},"body":{"injectables/UserService.html":{}}}],["src/aplicativo/services/user.service.ts:33",{"_index":960,"title":{},"body":{"injectables/UserService.html":{}}}],["src/aplicativo/services/user.service.ts:69",{"_index":963,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app.controller.ts",{"_index":76,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:26",{"_index":88,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":138,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:14",{"_index":140,"title":{},"body":{"injectables/AppService.html":{}}}],["src/config/typeorm.config",{"_index":41,"title":{},"body":{"modules/AplicativoModule.html":{},"guards/AuthenticationGuard.html":{}}}],["src/config/typeorm.config.ts",{"_index":1038,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":1039,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/migrations/*.js",{"_index":1231,"title":{},"body":{"miscellaneous/variables.html":{}}}],["start:devcontribuição",{"_index":1160,"title":{},"body":{"index.html":{}}}],["started",{"_index":1098,"title":{"index.html":{}},"body":{}}],["statements",{"_index":1022,"title":{},"body":{"coverage.html":{}}}],["store",{"_index":1057,"title":{},"body":{"dependencies.html":{}}}],["string",{"_index":180,"title":{},"body":{"entities/Authentication.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IResponse.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["sua",{"_index":1184,"title":{},"body":{"index.html":{}}}],["sub",{"_index":406,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["success",{"_index":430,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"interfaces/IResponse.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"injectables/UserService.html":{}}}],["sucesso/falha",{"_index":678,"title":{},"body":{"interfaces/IResponse.html":{},"classes/ResponseDto.html":{}}}],["suporte",{"_index":1186,"title":{},"body":{"index.html":{}}}],["support",{"_index":1195,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1196,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1089,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":1226,"title":{},"body":{"miscellaneous/variables.html":{}}}],["syncronize",{"_index":1146,"title":{},"body":{"index.html":{}}}],["table",{"_index":1042,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1041,"title":{},"body":{"coverage.html":{}}}],["tb_migration_table",{"_index":1233,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tecnologia",{"_index":1105,"title":{},"body":{"index.html":{}}}],["tem",{"_index":1162,"title":{},"body":{"index.html":{}}}],["tempo",{"_index":839,"title":{},"body":{"classes/ResponseDto.html":{}}}],["text",{"_index":223,"title":{},"body":{"entities/Authentication.html":{},"entities/Lancamento.html":{}}}],["text'})@isnotempty",{"_index":183,"title":{},"body":{"entities/Authentication.html":{}}}],["this.active",{"_index":898,"title":{},"body":{"entities/User.html":{}}}],["this.appservice.gethealth",{"_index":117,"title":{},"body":{"controllers/AppController.html":{}}}],["this.create(dto",{"_index":414,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.data",{"_index":847,"title":{},"body":{"classes/ResponseDto.html":{}}}],["this.datasource.createqueryrunner",{"_index":571,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{}}}],["this.deletedat",{"_index":897,"title":{},"body":{"entities/User.html":{}}}],["this.email",{"_index":894,"title":{},"body":{"entities/User.html":{}}}],["this.email.tolowercase",{"_index":895,"title":{},"body":{"entities/User.html":{}}}],["this.error",{"_index":848,"title":{},"body":{"classes/ResponseDto.html":{}}}],["this.extracttokenfromheader(request",{"_index":315,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.jwtservice.sign(payload",{"_index":411,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.jwtservice.verifyasync",{"_index":320,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.message",{"_index":846,"title":{},"body":{"classes/ResponseDto.html":{}}}],["this.repository.delete",{"_index":450,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["this.repository.find",{"_index":425,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["this.repository.findby",{"_index":824,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.repository.findoneby",{"_index":434,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["this.repository.findoneby({uuid",{"_index":445,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{}}}],["this.repository.save(entity",{"_index":439,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/NotificationService.html":{}}}],["this.repository.save(entitytoupdate",{"_index":448,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{}}}],["this.repository.save(user",{"_index":1010,"title":{},"body":{"injectables/UserService.html":{}}}],["this.repository.save(usertoupdate",{"_index":995,"title":{},"body":{"injectables/UserService.html":{}}}],["this.service.create(dto",{"_index":540,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{}}}],["this.service.createuser(dto",{"_index":937,"title":{},"body":{"controllers/UserController.html":{}}}],["this.service.delete(email",{"_index":939,"title":{},"body":{"controllers/UserController.html":{}}}],["this.service.delete(uuid",{"_index":542,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{}}}],["this.service.findbyid(id",{"_index":929,"title":{},"body":{"controllers/UserController.html":{}}}],["this.service.findone(email",{"_index":927,"title":{},"body":{"controllers/UserController.html":{}}}],["this.service.finduserphoto(id",{"_index":932,"title":{},"body":{"controllers/UserController.html":{}}}],["this.service.getall",{"_index":805,"title":{},"body":{"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["this.service.getallbyuserid(id",{"_index":533,"title":{},"body":{"controllers/ContaController.html":{}}}],["this.service.getbyaccount(id",{"_index":729,"title":{},"body":{"controllers/LancamentoController.html":{}}}],["this.service.getbyguid(uuid",{"_index":808,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.service.getbyid(id",{"_index":535,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{}}}],["this.service.getnotificationstouser(iduser",{"_index":810,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.service.me(req.user",{"_index":283,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.service.signin(dto.username",{"_index":272,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.service.update(dto.uuid",{"_index":537,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{}}}],["this.service.update(uuid",{"_index":812,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.service.updateuser(dto",{"_index":933,"title":{},"body":{"controllers/UserController.html":{}}}],["this.service.updateuserphoto(dto",{"_index":936,"title":{},"body":{"controllers/UserController.html":{}}}],["this.success",{"_index":845,"title":{},"body":{"classes/ResponseDto.html":{}}}],["this.usersservice.findsignin(email",{"_index":454,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.usersservice.findsignin(username",{"_index":402,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.verifypassword(plaintextpassword",{"_index":455,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["throw",{"_index":316,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{}}}],["timestamp",{"_index":165,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["tip_role",{"_index":877,"title":{},"body":{"entities/User.html":{}}}],["tipo",{"_index":630,"title":{},"body":{"classes/CreateLancamentoDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{}}}],["tipolancamento",{"_index":621,"title":{},"body":{"classes/CreateLancamentoDto.html":{},"entities/Lancamento.html":{},"injectables/LancamentoService.html":{},"classes/UpdateLancamentoDto.html":{}}}],["titulo",{"_index":622,"title":{},"body":{"classes/CreateLancamentoDto.html":{},"entities/Lancamento.html":{},"injectables/LancamentoService.html":{},"classes/UpdateLancamentoDto.html":{}}}],["todas",{"_index":519,"title":{},"body":{"controllers/ContaController.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["todo",{"_index":1150,"title":{},"body":{"index.html":{}}}],["todos",{"_index":719,"title":{},"body":{"controllers/LancamentoController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["token",{"_index":157,"title":{},"body":{"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/UpdateAuthenticationDto.html":{},"miscellaneous/variables.html":{}}}],["transaction",{"_index":575,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{}}}],["transformer",{"_index":1059,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Authentication.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"injectables/ContaService.html":{},"entities/Lancamento.html":{},"injectables/LancamentoService.html":{},"entities/Notification.html":{},"injectables/NotificationService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["true/false",{"_index":978,"title":{},"body":{"injectables/UserService.html":{}}}],["true})@generated('uuid",{"_index":700,"title":{},"body":{"entities/Lancamento.html":{}}}],["true})@isemail",{"_index":865,"title":{},"body":{"entities/User.html":{}}}],["true})@joincolumn({name",{"_index":774,"title":{},"body":{"entities/Notification.html":{}}}],["try",{"_index":318,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["txt_categories",{"_index":680,"title":{},"body":{"entities/Lancamento.html":{}}}],["txt_description",{"_index":473,"title":{},"body":{"entities/Conta.html":{},"entities/Lancamento.html":{}}}],["txt_email",{"_index":864,"title":{},"body":{"entities/User.html":{}}}],["txt_message",{"_index":783,"title":{},"body":{"entities/Notification.html":{}}}],["txt_message'})@isnotempty",{"_index":771,"title":{},"body":{"entities/Notification.html":{}}}],["txt_name",{"_index":483,"title":{},"body":{"entities/Conta.html":{},"entities/User.html":{}}}],["txt_password",{"_index":873,"title":{},"body":{"entities/User.html":{}}}],["txt_title",{"_index":697,"title":{},"body":{"entities/Lancamento.html":{}}}],["txt_token",{"_index":182,"title":{},"body":{"entities/Authentication.html":{}}}],["txt_uuid",{"_index":201,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["type",{"_index":161,"title":{},"body":{"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IResponse.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type:'text",{"_index":706,"title":{},"body":{"entities/Lancamento.html":{}}}],["typeorm",{"_index":214,"title":{},"body":{"entities/Authentication.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"injectables/ContaService.html":{},"entities/Lancamento.html":{},"injectables/LancamentoService.html":{},"entities/Notification.html":{},"injectables/NotificationService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeorm.config.ts",{"_index":1142,"title":{},"body":{"index.html":{}}}],["typeormconfig",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeormmodule",{"_index":36,"title":{},"body":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{}}}],["typeormmodule.forfeature",{"_index":63,"title":{},"body":{"modules/AplicativoModule.html":{}}}],["typeormmodule.forroot(typeormconfig",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":1215,"title":{},"body":{"miscellaneous/variables.html":{}}}],["types/bcrypt",{"_index":1052,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":1109,"title":{},"body":{"index.html":{}}}],["título",{"_index":631,"title":{},"body":{"classes/CreateLancamentoDto.html":{},"classes/UpdateLancamentoDto.html":{}}}],["ui",{"_index":1090,"title":{},"body":{"dependencies.html":{}}}],["um",{"_index":307,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["uma",{"_index":509,"title":{},"body":{"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["unauthorizedexception",{"_index":311,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{}}}],["unauthorizedexception(error",{"_index":417,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["undefined",{"_index":310,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Notification.html":{}}}],["unique",{"_index":202,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["unknown",{"_index":368,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["unsigned",{"_index":175,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["update",{"_index":339,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{}}}],["update(@body",{"_index":536,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/UserController.html":{}}}],["update(@param('uuid",{"_index":811,"title":{},"body":{"controllers/NotificationController.html":{}}}],["update(dto",{"_index":521,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/UserController.html":{}}}],["update(uuid",{"_index":384,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["updateauthenticationdto",{"_index":385,"title":{"classes/UpdateAuthenticationDto.html":{}},"body":{"injectables/AuthenticationService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/UpdateAuthenticationDto.html":{},"coverage.html":{}}}],["updatecontadto",{"_index":522,"title":{"classes/UpdateContaDto.html":{}},"body":{"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateContaDto.html":{},"classes/UpdateContaDto.html":{},"coverage.html":{}}}],["updated",{"_index":449,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["updatedat",{"_index":158,"title":{},"body":{"entities/Authentication.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"injectables/ContaService.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"injectables/NotificationService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["updatedatecolumn",{"_index":210,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["updatedatecolumn({name",{"_index":185,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["updatelancamentodto",{"_index":632,"title":{"classes/UpdateLancamentoDto.html":{}},"body":{"classes/CreateLancamentoDto.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/UpdateLancamentoDto.html":{},"coverage.html":{}}}],["updatenotificationdto",{"_index":645,"title":{"classes/UpdateNotificationDto.html":{}},"body":{"classes/CreateNotificationDto.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["updates",{"_index":1070,"title":{},"body":{"dependencies.html":{}}}],["updateuser",{"_index":943,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuser(updateuserdto",{"_index":964,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto",{"_index":661,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserdto.active",{"_index":1009,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto.email",{"_index":999,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto.name",{"_index":1002,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto.name.length",{"_index":1003,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto.role",{"_index":1007,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserphoto",{"_index":901,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuserphoto(@body",{"_index":935,"title":{},"body":{"controllers/UserController.html":{}}}],["updateuserphoto(dto",{"_index":920,"title":{},"body":{"controllers/UserController.html":{}}}],["updateuserphoto(updateuserphotodto",{"_index":968,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserphotodto",{"_index":668,"title":{"classes/UpdateUserPhotoDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserphotodto.id",{"_index":992,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserphotodto.image",{"_index":994,"title":{},"body":{"injectables/UserService.html":{}}}],["usar",{"_index":1128,"title":{},"body":{"index.html":{}}}],["useguards",{"_index":252,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(authenticationguard",{"_index":274,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["usepipes",{"_index":525,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["usepipes(new",{"_index":538,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["user",{"_index":48,"title":{"entities/User.html":{}},"body":{"modules/AplicativoModule.html":{},"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.active",{"_index":1008,"title":{},"body":{"injectables/UserService.html":{}}}],["user.decorator.ts",{"_index":1029,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.email",{"_index":407,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UserService.html":{}}}],["user.entity",{"_index":217,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Notification.html":{}}}],["user.id",{"_index":191,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Notification.html":{}}}],["user.name",{"_index":1000,"title":{},"body":{"injectables/UserService.html":{}}}],["user.password",{"_index":405,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UserService.html":{}}}],["user.role",{"_index":409,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UserService.html":{}}}],["user.service",{"_index":394,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["usercontroller",{"_index":30,"title":{"controllers/UserController.html":{}},"body":{"modules/AplicativoModule.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["userid",{"_index":159,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"injectables/ContaService.html":{},"classes/CreateContaDto.html":{},"classes/CreateNotificationDto.html":{},"entities/Notification.html":{},"injectables/NotificationService.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateNotificationDto.html":{}}}],["username",{"_index":383,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/SignInDto.html":{},"miscellaneous/variables.html":{}}}],["userrole",{"_index":887,"title":{},"body":{"entities/User.html":{}}}],["users",{"_index":983,"title":{},"body":{"injectables/UserService.html":{}}}],["users.length",{"_index":984,"title":{},"body":{"injectables/UserService.html":{}}}],["users[0",{"_index":985,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":13,"title":{"injectables/UserService.html":{}},"body":{"modules/AplicativoModule.html":{},"injectables/AuthenticationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usersservice",{"_index":343,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["usertoupdate",{"_index":991,"title":{},"body":{"injectables/UserService.html":{}}}],["usertoupdate.email",{"_index":1004,"title":{},"body":{"injectables/UserService.html":{}}}],["usertoupdate.image",{"_index":993,"title":{},"body":{"injectables/UserService.html":{}}}],["usertoupdate.name",{"_index":1001,"title":{},"body":{"injectables/UserService.html":{}}}],["usertoupdate.password",{"_index":1005,"title":{},"body":{"injectables/UserService.html":{}}}],["usertoupdate.role",{"_index":1006,"title":{},"body":{"injectables/UserService.html":{}}}],["utilidador",{"_index":903,"title":{},"body":{"controllers/UserController.html":{}}}],["utilizador",{"_index":232,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["utilizadores",{"_index":917,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["utilização",{"_index":1168,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":160,"title":{},"body":{"entities/Authentication.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["uuid.length",{"_index":586,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{}}}],["valida",{"_index":297,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/UserService.html":{}}}],["validar",{"_index":144,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{}}}],["validate",{"_index":403,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UserService.html":{}}}],["validate(id",{"_index":970,"title":{},"body":{"injectables/UserService.html":{}}}],["validatepassword",{"_index":944,"title":{},"body":{"injectables/UserService.html":{}}}],["validatepassword(plain",{"_index":972,"title":{},"body":{"injectables/UserService.html":{}}}],["validationpipe",{"_index":507,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["validator",{"_index":216,"title":{},"body":{"entities/Authentication.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"classes/SignInDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"dependencies.html":{}}}],["valor",{"_index":623,"title":{},"body":{"classes/CreateLancamentoDto.html":{},"entities/Lancamento.html":{},"injectables/LancamentoService.html":{},"classes/UpdateLancamentoDto.html":{},"index.html":{}}}],["value",{"_index":1210,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":1030,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1207,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verdade",{"_index":90,"title":{},"body":{"controllers/AppController.html":{}}}],["verdadeiro",{"_index":97,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["verifypassword",{"_index":340,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["verifypassword(plaintextpassword",{"_index":389,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["version",{"_index":1202,"title":{},"body":{"properties.html":{}}}],["verticalmente",{"_index":1114,"title":{},"body":{"index.html":{}}}],["vírgula",{"_index":625,"title":{},"body":{"classes/CreateLancamentoDto.html":{},"classes/UpdateLancamentoDto.html":{}}}],["we're",{"_index":321,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["zoom",{"_index":18,"title":{},"body":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AplicativoModule.html":{"url":"modules/AplicativoModule.html","title":"module - AplicativoModule","body":"\n                   \n\n\n\n\n    Modules\n    AplicativoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AplicativoModule\n\n\n\ncluster_AplicativoModule_exports\n\n\n\ncluster_AplicativoModule_providers\n\n\n\n\nAuthenticationService \n\nAuthenticationService \n\n\n\nUserService \n\nUserService \n\n\n\nAplicativoModule\n\nAplicativoModule\n\nAuthenticationService  -->\n\nAplicativoModule->AuthenticationService \n\n\n\nUserService  -->\n\nAplicativoModule->UserService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAplicativoModule -->\n\nAuthenticationService->AplicativoModule\n\n\n\n\n\nContaService\n\nContaService\n\nAplicativoModule -->\n\nContaService->AplicativoModule\n\n\n\n\n\nLancamentoService\n\nLancamentoService\n\nAplicativoModule -->\n\nLancamentoService->AplicativoModule\n\n\n\n\n\nNotificationService\n\nNotificationService\n\nAplicativoModule -->\n\nNotificationService->AplicativoModule\n\n\n\n\n\nUserService\n\nUserService\n\nAplicativoModule -->\n\nUserService->AplicativoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/aplicativo/aplicativo.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Módulo do aplicativo\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationService\n                        \n                        \n                            ContaService\n                        \n                        \n                            LancamentoService\n                        \n                        \n                            NotificationService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthenticationController\n                        \n                        \n                            UserController\n                        \n                        \n                            NotificationController\n                        \n                        \n                            ContaController\n                        \n                        \n                            LancamentoController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthenticationService\n                        \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from 'src/config/typeorm.config';\n\nimport { AuthenticationController } from './controllers/authentication.controller';\nimport { AuthenticationService } from './services/authentication.service';\nimport { Authentication } from './entities/authentication.entity';\n\nimport { UserController } from './controllers/user.controller';\nimport { UserService } from './services/user.service';\nimport { User } from './entities/user.entity';\n\nimport { Notification } from './entities/notification.entity';\nimport { NotificationController } from './controllers/notification.controller';\nimport { NotificationService } from './services/notification.service';\n\n\nimport { Conta } from './entities/conta.entity';\nimport { ContaController } from './controllers/conta.controller';\nimport { ContaService } from './services/conta.service';\n\nimport { Lancamento } from './entities/lancamento.entity';\nimport { LancamentoController } from './controllers/lancamento.controller';\nimport { LancamentoService } from './services/lancamento.service';\n\n/**\n * Módulo do aplicativo\n */\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      User,      \n      Authentication,\n      Notification,\n      Lancamento,\n      Conta\n    ]),\n    JwtModule.register({      \n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '3600s' },\n    })    \n  ],\n  controllers: [\n    AuthenticationController,\n    UserController,\n    NotificationController,\n    ContaController,    \n    LancamentoController\n  ],\n  providers: [\n    AuthenticationService,\n    UserService,\n    NotificationService,\n    ContaService,    \n    LancamentoService\n  ],\n  exports: [ \n    AuthenticationService,\n    UserService,\n  ],\n})\nexport class AplicativoModule  {\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n            \n                Description\n            \n            \n                Controlador básico do sistema\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getHealth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getHealth\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHealth()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:26\n                        \n                    \n\n\n            \n                \n                        Returna VERDADE se a API estiver a rodar\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Verdadeiro, se estiver a funcionar correctamente\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { ApiTags } from '@nestjs/swagger';\nimport { Get } from '@nestjs/common/decorators/http/request-mapping.decorator';\n\n/**\n * Controlador básico do sistema\n */\n@ApiTags('Health')\n@Controller('health')\nexport class AppController {\n  \n  /**\n   * Constructor do Serviço / Injeção de Dependência\n   * \n   * @param {AppService} appService serviço básico do sistema\n   */\n  constructor(private readonly appService: AppService) {}\n\n  /**\n   * Returna VERDADE se a API estiver a rodar\n   *\n   * @returns Verdadeiro, se estiver a funcionar correctamente\n   */\n  @Get()\n  async getHealth(): Promise {\n    return this.appService.getHealth();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAplicativoModule\n\nAplicativoModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAplicativoModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Módulo central de carga do sistema\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AplicativoModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { typeOrmConfig } from './config/typeorm.config';\nimport { AplicativoModule } from './aplicativo/aplicativo.module';\nimport { ConfigModule } from '@nestjs/config';\n\n/**\n * Módulo central de carga do sistema\n */\n@Module({\n  imports: [\n    TypeOrmModule.forRoot(typeOrmConfig), \n    AplicativoModule,\n    ConfigModule.forRoot({ isGlobal: true, cache: true })\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule{\n \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Serviço básico da API\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getHealth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getHealth\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHealth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:14\n                        \n                    \n\n\n            \n                \n                        Função simples para validar o funcionamento da API\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Verdadeiro, se estiver a funcionar correctamente\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * Serviço básico da API\n */\n@Injectable()\nexport class AppService {\n\n  /**\n   * Função simples para validar o funcionamento da API\n   * \n   * @returns {boolean} Verdadeiro, se estiver a funcionar correctamente\n   */\n  async getHealth(): Promise {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Authentication.html":{"url":"entities/Authentication.html","title":"entity - Authentication","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Authentication\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/entities/authentication.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entidade Autenticação\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                token\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                    \n                                userId\n                            \n                            \n                                    \n                                    \n                                    \n                                uuid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'DAT_CREATED', type: 'timestamp', default: () => NOW()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/authentication.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({name: 'DAT_DELETED', type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/authentication.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@PrimaryGeneratedColumn({name: 'COD_AUTHENTICATION_ID', unsigned: true, comment: 'Primary Key'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/authentication.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'TXT_TOKEN', type: 'text'})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/authentication.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'DAT_UPDATED', type: 'timestamp', onUpdate: 'CURRENT_TIMESTAMP(6)'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/authentication.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.id, {onDelete: 'NO ACTION', onUpdate: 'NO ACTION'})@JoinColumn({name: 'COD_USER_ID', foreignKeyConstraintName: 'FK_AUTHENTICATION_USER'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/authentication.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'COD_USER_ID', unsigned: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/authentication.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'TXT_UUID', unique: true, comment: 'Another PK as GUID'})@Generated('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/authentication.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, Generated, UpdateDateColumn, DeleteDateColumn, JoinColumn, ManyToOne } from 'typeorm';\nimport { IsNotEmpty } from 'class-validator';\nimport { User } from './user.entity';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * Entidade Autenticação\n */\n@Entity('TB_AUTHENTICATION')\nexport class Authentication {\n  @ApiProperty()\n  @PrimaryGeneratedColumn({ name: 'COD_AUTHENTICATION_ID', unsigned: true, comment: 'Primary Key' })\n  id: number;\n\n  @ApiProperty()\n  @Column({ name: 'TXT_UUID', unique: true, comment: 'Another PK as GUID' })\n  @Generated(\"uuid\")\n  uuid: string;\n\n  @ApiProperty()\n  @Column({ name: 'TXT_TOKEN', type: 'text' })\n  @IsNotEmpty()\n  token: string;\n\n  @ApiProperty()\n  @Column({ name: 'COD_USER_ID', unsigned: true, nullable: true })\n  userId: number;\n\n  @ManyToOne(() => User, user => user.id, { onDelete: 'NO ACTION', onUpdate: 'NO ACTION' })\n  @JoinColumn({ name: \"COD_USER_ID\", foreignKeyConstraintName: 'FK_AUTHENTICATION_USER' })\n  user: User;\n\n  @Column({ name: 'DAT_CREATED', type: 'timestamp', default: () => 'NOW()' })\n  createdAt: Date;\n  \n  @UpdateDateColumn({ name: 'DAT_UPDATED', type: 'timestamp', onUpdate: 'CURRENT_TIMESTAMP(6)' })\n  updatedAt: Date;\n  \n  @DeleteDateColumn({ name: 'DAT_DELETED', type: 'timestamp' })\n  deletedAt: Date;  \n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthenticationController.html":{"url":"controllers/AuthenticationController.html","title":"controller - AuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/controllers/authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                Controlador de Autenticação\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    Async\n                                me\n                            \n                            \n                                    \n                                    \n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(AuthenticationGuard)@Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/authentication.controller.ts:45\n                        \n                    \n\n\n            \n                \n                        Obtém o Utilizador logado\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Requisição (Parâmetro automático)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Utilizador\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        me\n                        \n                    \n                \n            \n            \n                \n                        \n                    me(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Get('me')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/authentication.controller.ts:57\n                        \n                    \n\n\n            \n                \n                        Obtém o Utilizador logado\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Requisição (Parâmetro automático)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Utilizador\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(dto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/authentication.controller.ts:32\n                        \n                    \n\n\n            \n                \n                        Autenticação do Utilizador\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO de Autenticação\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Utilizador com token JWT\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, HttpCode, HttpStatus, UseGuards, Request } from '@nestjs/common';\nimport { AuthenticationService } from '../services/authentication.service';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { SignInDto } from '../dto/sign-in-dto';\nimport { Get, Post } from '@nestjs/common/decorators/http/request-mapping.decorator';\nimport { Body } from '@nestjs/common/decorators/http/route-params.decorator';\nimport { AuthenticationGuard } from '../guards/authentication.guard';\nimport { IResponse } from '../interfaces/iresponse.interface';\n\n/**\n * Controlador de Autenticação\n */\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthenticationController {\n\n  /**\n   * Injeção de Dependencia pelo constructor\n   * \n   * @param {AuthenticationService} Serviço de Autenticação\n   */\n  constructor(private service: AuthenticationService) {}\n\n  /**\n   * Autenticação do Utilizador\n   * \n   * @param {SignInDto} dto DTO de Autenticação\n   * @returns {User} Utilizador com token JWT\n   */\n  @HttpCode(HttpStatus.OK)\n  @Post('login')\n  signIn(@Body() dto: SignInDto) {\n    return this.service.signIn(dto.username, dto.password);\n  }\n\n  /**\n   * Obtém o Utilizador logado\n   * \n   * @param req Requisição (Parâmetro automático)\n   * @returns {User} Utilizador\n   */\n  @ApiBearerAuth()\n  @UseGuards(AuthenticationGuard)\n  @Get('profile')\n  getProfile(@Request() req) {\n    return req.user;\n  }\n  \n  /**\n   * Obtém o Utilizador logado\n   * \n   * @param req Requisição (Parâmetro automático)\n   * @returns {User} Utilizador\n   */  \n  @ApiBearerAuth()\n  @Get('me')\n  async me(@Request() req): Promise {\n    const result = await this.service.me(req.user);\n    return result;\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/aplicativo/guards/authentication.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Guard de Autenticação\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractTokenFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/aplicativo/guards/authentication.guard.ts:15\n                            \n                        \n\n                \n                    \n                            Injeção de Dependência\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Serviço responsável pelo JWT\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/guards/authentication.guard.ts:30\n                        \n                    \n\n\n            \n                \n                        Valida se o utilizador pode aceder\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Contexto de Execução\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Permissão de execução\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractTokenFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractTokenFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/guards/authentication.guard.ts:58\n                        \n                    \n\n\n            \n                \n                        Extrai o token de um header, se houver\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { Request } from 'express';\nimport { jwtConstants } from 'src/config/typeorm.config';\n\n/**\n * Guard de Autenticação\n */\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n\n  /**\n   * Injeção de Dependência\n   * \n   * @param jwtService Serviço responsável pelo JWT\n   */\n  constructor(private jwtService: JwtService) {}\n\n  /**\n   * Valida se o utilizador pode aceder\n   * \n   * @param context Contexto de Execução\n   * @returns {boolean} Permissão de execução\n   */  \n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n    const token = this.extractTokenFromHeader(request);\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n    try {\n      const payload = await this.jwtService.verifyAsync(\n        token,\n        {\n          secret: jwtConstants.secret\n        }\n      );\n      // 💡 We're assigning the payload to the request object here\n      // so that we can access it in our route handlers\n      request['user'] = payload;\n    } catch {\n      throw new UnauthorizedException();\n    }\n    return true;\n  }\n\n  /**\n   * Extrai o token de um header, se houver\n   * \n   * @param request {Request}\n   * @returns {string}\n   */\n  private extractTokenFromHeader(request: Request): string | undefined {\n    const [type, token] = request.headers.authorization?.split(' ') ?? [];\n    return type === 'Bearer' ? token : undefined;\n  }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/services/authentication.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Serviço de Autenticação\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                getAuthenticatedUser\n                            \n                            \n                                    Async\n                                getByGuid\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                me\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Private\n                                    Async\n                                verifyPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository, usersService: UserService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/aplicativo/services/authentication.service.ts:16\n                            \n                        \n\n                \n                    \n                            Injeção de Dependencia pelo constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Repositório de Dados de Autenticação\n\n                                                        \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateAuthenticationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/authentication.service.ts:136\n                        \n                    \n\n\n            \n                \n                        Criar autenticação\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateAuthenticationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO de criação de registo da autenticação\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Autenticação\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(uuid: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/authentication.service.ts:194\n                        \n                    \n\n\n            \n                \n                        Excluir autenticação\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    identificador secundário do utilizador\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Autenticação\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getAuthenticatedUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAuthenticatedUser(email: string, plainTextPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/authentication.service.ts:222\n                        \n                    \n\n\n            \n                \n                        Obter Utilizador autenticado\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    conta de e-mail do utilizador\n\n                                            \n                                        \n                                        \n                                                plainTextPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    senha de acesso do utilizador\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Utilizador\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getByGuid\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByGuid(uuid: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/authentication.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Obter Autenticação por uuid\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    identificador secundário do utilizador\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Autenticação\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/authentication.service.ts:112\n                        \n                    \n\n\n            \n                \n                        Obter autenticação por identificador primário\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    identificador principal da autenticação\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Autenticação\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        me\n                        \n                    \n                \n            \n            \n                \n                        \n                    me(user: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/authentication.service.ts:76\n                        \n                    \n\n\n            \n                \n                        Retorna o utilizador autenticado\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(username, pass)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/authentication.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Autenticar Utilizador\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                username\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    conta de e-email do utilizador\n\n                                            \n                                        \n                                        \n                                                pass\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    senha de acesso do utilizador\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                DTO de Autenticação\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(uuid: string, dto: UpdateAuthenticationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/authentication.service.ts:169\n                        \n                    \n\n\n            \n                \n                        Actualizar autenticação\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    identificador secundário do utilizador\n\n                                            \n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdateAuthenticationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO de actualização de registo da autenticação\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Autenticação\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        verifyPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyPassword(plainTextPassword: string, hashedPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/authentication.service.ts:239\n                        \n                    \n\n\n            \n                \n                        Validar senha\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                plainTextPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    senha de acesso do utilizador\n\n                                            \n                                        \n                                        \n                                                hashedPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    senha criptografada\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { Authentication } from '../entities/authentication.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateAuthenticationDto, UpdateAuthenticationDto } from '../dto/authentication-dto';\nimport { ResponseDto } from '../dto/response-dto';\nimport { IResponse } from '../interfaces/iresponse.interface';\nimport { compare } from 'bcrypt';\n\n/**\n * Serviço de Autenticação\n **/\n@Injectable()\nexport class AuthenticationService {\n\n   /**\n    * Injeção de Dependencia pelo constructor\n    * \n    * @param {Repository} repository Repositório de Dados de Autenticação\n    */\n    constructor(\n        @InjectRepository(Authentication)\n          private readonly repository: Repository,      \n        private usersService: UserService,\n        private jwtService: JwtService,\n      ) {\n\n    }\n    \n  /**\n   * Autenticar Utilizador\n   * \n   * @param {string} username conta de e-email do utilizador\n   * @param {string} pass senha de acesso do utilizador\n   * @returns {CreateAuthenticationDto} DTO de Autenticação\n   */\n    async signIn(username, pass) {        \n        try {                    \n          const user = await this.usersService.findSignIn(username);          \n          if (user) {\n            const validate = await compare(pass, user.password);\n            if (!validate) {\n              throw new UnauthorizedException();\n            }\n            const payload = { sub: user, username: user.email, role: user.role };\n                \n            try {\n              const access_token = this.jwtService.sign(payload);              \n              const dto = new CreateAuthenticationDto();\n              dto.token = access_token;\n              dto.user = user;\n              await this.create(dto);\n              return dto;\n            } catch (error) {\n              const dto = new CreateAuthenticationDto();\n              dto.token = error;\n              dto.user = null;\n              return dto;  \n            }\n            \n          } else {\n            throw new UnauthorizedException();\n          }            \n        } catch (error) {\n          throw new UnauthorizedException(error);\n        }\n    }\n\n  /**   \n   * Retorna o utilizador autenticado\n   * \n   * @param {any} me\n   */    \n    async me(user: any): Promise {\n      /* lookupAll() gets all data only active is true */\n      try {\n        const response = new ResponseDto();\n        response.success = true;      \n        response.data = await this.repository.find({\n          select: {\n             id: true,\n             uuid: true,\n             token: true,\n             createdAt: true,\n             updatedAt: true,\n             deletedAt: true,             \n          },\n          relations: {\n            user: true\n          },\n          where: {\n            user: user\n          },\n          cache: true\n        });\n        response.error = null;\n        response.message = '';\n        return response;\n      } catch (error) {\n        return { success: false, data: null, message: 'Error occurred.', error: error };      \n      }\n    }\n\n  /**\n   * Obter autenticação por identificador primário\n   * \n   * @param {number} id identificador principal da autenticação\n   * @returns {Authentication} Autenticação\n   */    \n    async getById(id: number): Promise {\n      return await this.repository.findOneBy({\n        id: id,\n      });\n    }\n  \n  /**\n   * Obter Autenticação por uuid\n   * \n   * @param {string} uuid identificador secundário do utilizador\n   * @returns {Authentication} Autenticação\n   */    \n    async getByGuid(uuid: string): Promise {\n      return await this.repository.findOneBy({\n        uuid: uuid,\n      });\n    }\n  \n  /**\n   * Criar autenticação\n   * \n   * @param {CreateAuthenticationDto} dto DTO de criação de registo da autenticação\n   * @returns {Authentication} Autenticação\n   */    \n    async create(dto: CreateAuthenticationDto): Promise {  \n      try {\n        const response = new ResponseDto();\n\n        const entity = new Authentication();\n        entity.token = dto ? dto.token : '';\n        entity.userId = dto ? dto.user.id : 0;\n  \n        const result = await this.repository.save(entity);\n        if (result.id) {\n          response.success = true;\n          response.message = 'record has been created';\n          response.data = result;\n          response.error = null;\n        } else {\n          response.success = false;\n          response.message = 'record cant be created';\n          response.data = result;\n          response.error = null;          \n        }\n        return response;      \n    } catch (error) {\n        return { success: false, message: 'record cant be created', data: null, error: error };  \n    }\n    }\n    \n  /**\n   * Actualizar autenticação\n   * \n   * @param {string} uuid identificador secundário do utilizador\n   * @param {UpdateAuthenticationDto} dto DTO de actualização de registo da autenticação\n   * @returns {Authentication} Autenticação\n   */    \n    async update(uuid: string, dto: UpdateAuthenticationDto): Promise {  \n      try {\n        const response = new ResponseDto();\n\n        const entityToUpdate = await this.repository.findOneBy({uuid: uuid});\n      \n        entityToUpdate.token = (entityToUpdate.token !== dto.token) && dto.token.length > 0 ? dto.token : entityToUpdate.token;\n  \n        const result = this.repository.save(entityToUpdate);\n        response.success = true;\n        response.data = result;\n        response.message = 'record has been updated';\n        response.error = null;        \n        return response;\n      } catch (error) {\n        return {success: false, message: 'record cant be updated', data: null, error: error };  \n      }\n    }\n  \n  /**\n   * Excluir autenticação\n   * \n   * @param {string} uuid identificador secundário do utilizador\n   * @returns {Authentication} Autenticação\n   */   \n    async delete(uuid: string): Promise {\n      try {\n        const response = new ResponseDto();\n        const result = await this.repository.delete( { uuid: uuid } );\n        if (result.affected && result.affected > 0) {\n          response.success = true;\n          response.data = result.affected;\n          response.message = 'record has been deleted';\n          response.error = result.raw;\n        } else {\n          response.success = false;\n          response.data = result.affected;\n          response.message = 'record cant be deleted';\n          response.error = result.raw;          \n        }\n        return response;\n      } catch (error) {\n        return {success: false, message: 'record cant be deleted', data: null, error: error };\n      }\n    }\n\n  /**\n   * Obter Utilizador autenticado\n   *\n   * @param {string} email conta de e-mail do utilizador\n   * @param {string} plainTextPassword senha de acesso do utilizador\n   * @returns {User} Utilizador\n   */    \n    public async getAuthenticatedUser(email: string, plainTextPassword: string) {\n      try {\n        const user = await this.usersService.findSignIn(email);\n        await this.verifyPassword(plainTextPassword, user.password);\n        user.password = undefined;\n        return user;\n      } catch (error) {\n        throw new HttpException('Wrong credentials provided', HttpStatus.BAD_REQUEST);\n      }\n    }\n\n    /**\n     * Validar senha\n     *\n     * @param {string} plainTextPassword senha de acesso do utilizador\n     * @param {string} hashedPassword senha criptografada\n     */    \n    private async verifyPassword(plainTextPassword: string, hashedPassword: string) {\n      const isPasswordMatching = await compare(\n        plainTextPassword,\n        hashedPassword\n      );\n      if (!isPasswordMatching) {\n        throw new HttpException('Wrong credentials provided', HttpStatus.BAD_REQUEST);\n      }\n    }    \n  }\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Conta.html":{"url":"entities/Conta.html","title":"entity - Conta","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Conta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/entities/conta.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entidade Conta\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                active\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                    \n                                descricao\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                lancamentos\n                            \n                            \n                                    \n                                    \n                                nome\n                            \n                            \n                                    \n                                    \n                                saldoConsolidado\n                            \n                            \n                                    \n                                    \n                                saldoCredito\n                            \n                            \n                                    \n                                    \n                                saldoDebito\n                            \n                            \n                                    \n                                    \n                                saldoFuturo\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                    \n                                userId\n                            \n                            \n                                    \n                                    \n                                    \n                                uuid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'FLG_ACTIVE', default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/conta.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'DAT_CREATED', type: 'timestamp', default: () => NOW()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/conta.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({name: 'DAT_DELETED', type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/conta.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        descricao\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'TXT_DESCRIPTION'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/conta.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@PrimaryGeneratedColumn({name: 'COD_ACCOUNT_ID', unsigned: true, comment: 'Primary Key'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/conta.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        lancamentos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Lancamento[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, lancamento => lancamento.conta, {lazy: true, nullable: true, cascade: false, onDelete: 'NO ACTION', onUpdate: 'NO ACTION', createForeignKeyConstraints: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/conta.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        nome\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'TXT_NAME'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/conta.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        saldoConsolidado\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'NUM_BALANCE_CONSOLIDATED', unsigned: false, default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/conta.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        saldoCredito\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'NUM_BALANCE_CREDIT', unsigned: false, default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/conta.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        saldoDebito\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'NUM_BALANCE_DEBIT', unsigned: false, default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/conta.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        saldoFuturo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'NUM_BALANCE_FUTURE', unsigned: false, default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/conta.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'DAT_UPDATED', type: 'timestamp', onUpdate: 'CURRENT_TIMESTAMP(6)'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/conta.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.id, {onDelete: 'NO ACTION', onUpdate: 'NO ACTION'})@JoinColumn({name: 'COD_USER_ID', foreignKeyConstraintName: 'FK_ACCOUNT_USER'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/conta.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'COD_USER_ID', unsigned: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/conta.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'TXT_UUID', unique: true, comment: 'Another PK as GUID'})@Generated('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/conta.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, DeleteDateColumn, Entity, Generated, JoinColumn, ManyToOne, OneToMany, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\nimport { ApiProperty } from \"@nestjs/swagger\";\nimport { User } from \"./user.entity\";\nimport { Lancamento } from \"./lancamento.entity\";\n\n/**\n * Entidade Conta\n */\n@Entity('TB_ACCOUNT')\nexport class Conta {\n    @ApiProperty()\n    @PrimaryGeneratedColumn({ name: 'COD_ACCOUNT_ID', unsigned: true, comment: 'Primary Key' })\n    id: number;\n  \n    @ApiProperty()\n    @Column({ name: 'TXT_UUID', unique: true, comment: 'Another PK as GUID' })\n    @Generated(\"uuid\")\n    uuid: string;  \n\n    @ApiProperty()\n    @Column({ name: 'TXT_NAME' }) \n    nome: string;\n\n    @ApiProperty()\n    @Column({ name: 'TXT_DESCRIPTION' }) \n    descricao: string;\n\n    @ApiProperty()\n    @Column({ name: 'NUM_BALANCE_CREDIT', unsigned: false, default: 0 })\n    saldoCredito: number;\n\n    @ApiProperty()\n    @Column({ name: 'NUM_BALANCE_DEBIT', unsigned: false, default: 0 })    \n    saldoDebito: number;\n\n    @ApiProperty()\n    @Column({ name: 'NUM_BALANCE_FUTURE', unsigned: false, default: 0 })    \n    saldoFuturo: number;\n\n    @ApiProperty()\n    @Column({ name: 'NUM_BALANCE_CONSOLIDATED', unsigned: false, default: 0 })    \n    saldoConsolidado: number;\n\n    @ApiProperty()\n    @Column({ name: 'COD_USER_ID', unsigned: true, nullable: true })\n    userId: number;\n  \n    @ManyToOne(() => User, user => user.id, { onDelete: 'NO ACTION', onUpdate: 'NO ACTION' })\n    @JoinColumn({ name: \"COD_USER_ID\", foreignKeyConstraintName: 'FK_ACCOUNT_USER' })\n    user: User;\n  \n    @ApiProperty()\n    @Column({ name: 'FLG_ACTIVE', default: true })\n    active: boolean;\n  \n    @Column({ name: 'DAT_CREATED', type: 'timestamp', default: () => 'NOW()' })\n    createdAt: Date;\n    \n    @UpdateDateColumn({ name: 'DAT_UPDATED', type: 'timestamp', onUpdate: 'CURRENT_TIMESTAMP(6)' })\n    updatedAt: Date;\n    \n    @DeleteDateColumn({ name: 'DAT_DELETED', type: 'timestamp' })\n    deletedAt: Date;  \n\n    @OneToMany(() => Lancamento, (lancamento) => lancamento.conta, \n                { lazy: true, nullable: true, cascade: false, \n                  onDelete: 'NO ACTION', onUpdate: 'NO ACTION',\n                  createForeignKeyConstraints: true })    \n    lancamentos?: Lancamento[]\n  \n  }\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ContaController.html":{"url":"controllers/ContaController.html","title":"controller - ContaController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ContaController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/controllers/conta.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                account\n            \n\n\n            \n                Description\n            \n            \n                Controlador de Conta\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    Async\n                                findById\n                            \n                            \n                                    \n                                    Async\n                                getByUserId\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateContaDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UsePipes(new ValidationPipe())\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/conta.controller.ts:73\n                        \n                    \n\n\n            \n                \n                        Criar uma Conta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateContaDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO de criação de Conta\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Conta\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(uuid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':uuid')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/conta.controller.ts:84\n                        \n                    \n\n\n            \n                \n                        Excluir o Lançamento\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Identificador secundário\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Conta\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('getById/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/conta.controller.ts:49\n                        \n                    \n\n\n            \n                \n                        Obter Conta pelo identificador primário\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    identificador primário de Conta\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Conta\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByUserId(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('getAllByUserId/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/conta.controller.ts:37\n                        \n                    \n\n\n            \n                \n                        Obter todas as contas por Utilizador\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    identificador primário de Utilizador\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Contas\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(dto: UpdateContaDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/conta.controller.ts:61\n                        \n                    \n\n\n            \n                \n                        Actualizar a Conta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            UpdateContaDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO de actualização de Conta\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Conta\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, UsePipes, ValidationPipe } from '@nestjs/common';\nimport { ApiBearerAuth, ApiExtraModels, ApiTags } from '@nestjs/swagger';\nimport { Get, Put, Post, Delete } from '@nestjs/common/decorators/http/request-mapping.decorator';\nimport { Param, Body } from '@nestjs/common/decorators/http/route-params.decorator';\nimport { IResponse } from '../interfaces/iresponse.interface';\nimport { ResponseDto } from '../dto/response-dto';\nimport { Conta } from '../entities/conta.entity';\nimport { ContaService } from '../services/conta.service';\nimport { CreateContaDto, UpdateContaDto } from '../dto/conta-dto';\n\n/**\n * Controlador de Conta\n */\n@ApiTags('Account')\n@ApiExtraModels(ResponseDto)\n@ApiExtraModels(Conta)\n@ApiBearerAuth()\n@Controller('account')\nexport class ContaController {\n\n  /**\n   * Injeção de Dependencia pelo constructor\n   * \n   * @param {ContaService} Serviço de Contas\n   */\n  constructor(\n    private readonly service: ContaService\n  ) { }\n \n  /**\n   * Obter todas as contas por Utilizador\n   * \n   * @param {number} id identificador primário de Utilizador\n   * @returns {Conta[]} Contas\n   */  \n  @Get('getAllByUserId/:id')\n  async getByUserId(@Param('id') id: number): Promise {\n    const result = await this.service.getAllByUserId(id);\n    return result;\n  }\n\n  /**\n   * Obter Conta pelo identificador primário\n   * \n   * @param {number} id identificador primário de Conta\n   * @returns {Conta} Conta\n   */  \n  @Get('getById/:id')\n  async findById(@Param('id') id: number): Promise {\n    const result = await this.service.getById(id);\n    return result;\n  }\n\n  /**\n   * Actualizar a Conta\n   * \n   * @param {UpdateContaDto} dto DTO de actualização de Conta\n   * @returns {Conta} Conta\n   */  \n  @Put()\n  async update(@Body() dto: UpdateContaDto): Promise {\n    return await this.service.update(dto.uuid, dto);\n  }\n\n  /**\n   * Criar uma Conta\n   * \n   * @param {CreateContaDto} dto DTO de criação de Conta\n   * @returns {Conta} Conta\n   */\n  @Post()\n  @UsePipes(new ValidationPipe())\n  async create(@Body() dto: CreateContaDto): Promise {\n    return await this.service.create(dto);\n  }\n\n  /**\n   * Excluir o Lançamento\n   * \n   * @param {string} uuid Identificador secundário\n   * @returns {Conta} Conta\n   */  \n  @Delete(':uuid')\n  async delete(@Param('uuid') uuid: string): Promise {\n    return await this.service.delete(uuid);\n  }\n\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContaService.html":{"url":"injectables/ContaService.html","title":"injectable - ContaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/services/conta.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Serviço de Contas\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getAllByUserId\n                            \n                            \n                                    Async\n                                getByGuid\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository, dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/aplicativo/services/conta.service.ts:13\n                            \n                        \n\n                \n                    \n                            Injeção de Dependencia pelo constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Repositório de Dados de Conta\n\n                                                        \n                                                \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateContaDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/conta.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Criar uma conta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateContaDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO de criação de conta\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Conta\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(uuid: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/conta.service.ts:216\n                        \n                    \n\n\n            \n                \n                        Excluir uma conta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    identificador secundário do utilizador\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Conta\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllByUserId(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/conta.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Obter todas as contas do utilizador\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    identificador do utilizador\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Contas\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getByGuid\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByGuid(uuid: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/conta.service.ts:103\n                        \n                    \n\n\n            \n                \n                        Obter uma conta por guid\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    identificador secundário da conta\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Conta\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/conta.service.ts:82\n                        \n                    \n\n\n            \n                \n                        Obter uma conta por id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    identificador da conta\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Conta\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(uuid: string, dto: UpdateContaDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/conta.service.ts:181\n                        \n                    \n\n\n            \n                \n                        Actualizar uma conta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    identificador secundário do utilizador\n\n                                            \n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdateContaDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO de criação de conta\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Conta\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { DataSource, Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ResponseDto } from '../dto/response-dto';\nimport { IResponse } from '../interfaces/iresponse.interface';\nimport { Conta } from '../entities/conta.entity';\nimport { CreateContaDto, UpdateContaDto } from '../dto/conta-dto';\n\n/**\n * Serviço de Contas\n **/\n@Injectable()\nexport class ContaService {\n\n   /**\n    * Injeção de Dependencia pelo constructor\n    * \n    * @param {Repository} repository Repositório de Dados de Conta\n    */  \n  constructor(\n    @InjectRepository(Conta)\n    private readonly repository: Repository,\n    private dataSource: DataSource\n    ) {\n  }\n\n  /**\n   * Obter todas as contas do utilizador\n   * \n   * @param {number} id identificador do utilizador\n   * @returns {Conta[]} Contas\n   */    \n  async getAllByUserId(id: number): Promise {\n    try {\n      const response = new ResponseDto();\n      response.success = true;      \n      response.data = await this.repository.find({\n        select: {\n           id: true,\n           uuid: true,  \n           nome: true,\n           descricao: true,\n           \n           userId: true,\n\n           active: true,\n\n           saldoConsolidado: true,\n           saldoCredito: true,\n           saldoDebito: true,\n           saldoFuturo: true,\n\n           createdAt: true,\n           updatedAt: true,\n           deletedAt: true,\n\n        },\n        where: {\n          userId: id\n        },\n        relations: {\n          lancamentos: true\n        },\n        order: {\n          nome: 'DESC'\n        },\n        cache: false\n      });\n      response.error = null;\n      response.message = '';\n      return response;\n    } catch (error) {\n      return { success: false, data: null, message: 'Error occurred.', error: error };      \n    }  }\n\n  /**\n   * Obter uma conta por id\n   * \n   * @param {number} id identificador da conta\n   * @returns {Conta} Conta\n   */        \n  async getById(id: number): Promise {\n    try {\n      const response = new ResponseDto();\n      response.success = true;      \n      response.data = await this.repository.findOneBy({\n        id: id,\n      });  \n      response.error = null;\n      response.message = '';\n      return response;\n    } catch (error) {\n      return { success: false, data: null, message: 'Error occurred.', error: error };      \n    }\n  }\n\n  /**\n   * Obter uma conta por guid\n   * \n   * @param {string} uuid identificador secundário da conta\n   * @returns {Conta} Conta\n   */        \n  async getByGuid(uuid: string): Promise {\n    try {\n      const response = new ResponseDto();\n      response.success = true;      \n      response.data = await this.repository.findOneBy({\n        uuid: uuid,\n      });\n      response.error = null;\n      response.message = '';\n      return response;\n    } catch (error) {\n      return { success: false, data: null, message: 'Error occurred.', error: error };      \n    }\n  }\n\n  /**\n   * Criar uma conta\n   * \n   * @param {CreateContaDto} dto DTO de criação de conta\n   * @returns {Conta} Conta\n   */        \n  async create(dto: CreateContaDto): Promise {\n    try {\n      const response = new ResponseDto();\n\n      const entity = new Conta();\n\n      entity.nome = dto.nome;\n      entity.descricao = dto.descricao;\n      entity.saldoCredito = dto.saldoCredito;\n      entity.saldoDebito = dto.saldoDebito;\n      entity.saldoFuturo = dto.saldoFuturo;\n      entity.saldoConsolidado = dto.saldoConsolidado;\n      entity.userId = dto.userId;\n  \n      const queryRunner = this.dataSource.createQueryRunner();\n      await queryRunner.connect();\n      await queryRunner.startTransaction();\n      try {\n        const result = await queryRunner.manager.save(Conta, entity, { transaction: true });\n        await queryRunner.commitTransaction();\n        if (result.id) {\n          response.success = true;\n          response.message = 'record has been created';\n          response.data = result;\n          response.error = null;\n        } else {\n          response.success = false;\n          response.message = 'record cant be created';\n          response.data = result;\n          response.error = null;          \n        }        \n      } catch (error) {\n        await queryRunner.rollbackTransaction();\n\n        response.success = false;\n        response.message = 'record cant be created';\n        response.data = null;\n        response.error = error;\n\n        return response;\n      }\n      finally {\n        await queryRunner.release();\n      }\n      return response;\n  } catch (error) {\n      return { success: false, message: 'record cant be created', data: null, error: error };  \n  }\n}\n\n  /**\n   * Actualizar uma conta      \n   * \n   * @param {string} uuid identificador secundário do utilizador\n   * @param {UpdateContaDto} dto DTO de criação de conta\n   * @returns {Conta} Conta\n   */        \n   async update(uuid: string, dto: UpdateContaDto): Promise {\n    try {\n      const response = new ResponseDto();\n\n      if (dto.uuid && dto?.uuid?.length > 0) {        \n\n        const entityToUpdate = await this.repository.findOneBy({uuid: uuid});\n    \n        entityToUpdate.nome = dto.nome;\n        entityToUpdate.descricao = dto.descricao;        \n    \n        const result = this.repository.save(entityToUpdate);\n        response.success = true;\n        response.data = result;\n        response.message = 'record has been updated';\n        response.error = null;        \n        return response;  \n      } else {\n        response.success = false;\n        response.data = null;\n        response.message = 'missing identifier';\n        response.error = null;        \n      }\n      return response;\n    } catch (error) {\n      return {success: false, message: 'record cant be updated', data: null, error: error };  \n    }\n  }\n\n  /**\n   * Excluir uma conta\n   * \n   * @param {string} uuid identificador secundário do utilizador\n   * @returns {Conta} Conta\n   */        \n  async delete(uuid: string): Promise {\n    try {\n      const response = new ResponseDto();\n      if (uuid && uuid.length > 0) {\n        const result = await this.repository.delete( { uuid: uuid } );\n        if (result.affected && result.affected > 0) {\n          response.success = true;\n          response.data = result.affected;\n          response.message = 'record has been deleted';\n          response.error = result.raw;\n        } else {\n          response.success = false;\n          response.data = result.affected;\n          response.message = 'record cant be deleted';\n          response.error = result.raw;          \n        }          \n      } else {\n        response.success = false;\n        response.data = null;\n        response.message = 'missing identifier';\n        response.error = null\n      }\n      return response;\n    } catch (error) {\n      return {success: false, message: 'record cant be deleted', data: null, error: error };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAuthenticationDto.html":{"url":"classes/CreateAuthenticationDto.html","title":"class - CreateAuthenticationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAuthenticationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/dto/authentication-dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO de criação de Autenticação\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                token\n                            \n                            \n                                    \n                                user\n                            \n                            \n                                    \n                                uuid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/authentication-dto.ts:19\n                        \n                    \n\n            \n                \n                    Token JWT\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/authentication-dto.ts:25\n                        \n                    \n\n            \n                \n                    Utilizador\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/authentication-dto.ts:13\n                        \n                    \n\n            \n                \n                    Identificador secundário de autenticação\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\nimport { User } from \"../entities/user.entity\";\n\n/**\n * DTO de criação de Autenticação\n */\nexport class CreateAuthenticationDto {\n\n    /**\n     * Identificador secundário de autenticação\n     */\n    @ApiProperty()\n    uuid: string;\n    \n    /**\n     * Token JWT\n     */\n    @ApiProperty()\n    token: string;\n\n    /**\n     * Utilizador\n     */\n    @ApiProperty()\n    user: User;\n}\n\n/**\n * DTO de actualização de Autenticação\n */\nexport class UpdateAuthenticationDto extends PartialType(CreateAuthenticationDto) {\n    \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateContaDto.html":{"url":"classes/CreateContaDto.html","title":"class - CreateContaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateContaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/dto/conta-dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO de criação de Conta\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                descricao\n                            \n                            \n                                    \n                                nome\n                            \n                            \n                                    \n                                saldoConsolidado\n                            \n                            \n                                    \n                                saldoCredito\n                            \n                            \n                                    \n                                saldoDebito\n                            \n                            \n                                    \n                                saldoFuturo\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        descricao\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/conta-dto.ts:18\n                        \n                    \n\n            \n                \n                    Descrição\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        nome\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/conta-dto.ts:12\n                        \n                    \n\n            \n                \n                    Nome da Conta\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        saldoConsolidado\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/conta-dto.ts:42\n                        \n                    \n\n            \n                \n                    Saldo consolidado de Crédito - Débitos +- Futuro\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        saldoCredito\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/conta-dto.ts:24\n                        \n                    \n\n            \n                \n                    Saldo de Créditos da Conta\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        saldoDebito\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/conta-dto.ts:30\n                        \n                    \n\n            \n                \n                    Saldo de Débitos da Conta\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        saldoFuturo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/conta-dto.ts:36\n                        \n                    \n\n            \n                \n                    Saldo de Lançamentos maior que data actual\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/conta-dto.ts:48\n                        \n                    \n\n            \n                \n                    Identificador primário do Utilizador\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\n\n/**\n * DTO de criação de Conta\n */\nexport class CreateContaDto {\n\n    /**\n     * Nome da Conta\n     */\n    @ApiProperty()\n    nome: string;\n\n    /**\n     * Descrição\n     */\n    @ApiProperty()    \n    descricao: string;\n\n    /**\n     * Saldo de Créditos da Conta\n     */\n    @ApiProperty()    \n    saldoCredito: number;\n\n    /**\n     * Saldo de Débitos da Conta\n     */    \n    @ApiProperty()    \n    saldoDebito: number;\n\n    /**\n     * Saldo de Lançamentos maior que data actual\n     */    \n    @ApiProperty()    \n    saldoFuturo: number;\n\n    /**\n     * Saldo consolidado de Crédito - Débitos +- Futuro\n     */\n    @ApiProperty()    \n    saldoConsolidado: number;\n\n    /**\n     * Identificador primário do Utilizador\n     */    \n    @ApiProperty()\n    userId: number\n\n}\n\n/**\n * DTO de actualização de Conta\n */\nexport class UpdateContaDto extends PartialType(CreateContaDto) {\n\n    /**\n     * Identificador secundário de Conta\n     */    \n    @ApiProperty()\n    uuid?: string;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateLancamentoDto.html":{"url":"classes/CreateLancamentoDto.html","title":"class - CreateLancamentoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateLancamentoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/dto/lancamento-dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO de criação de Lançamento\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                categorias\n                            \n                            \n                                    \n                                contaId\n                            \n                            \n                                    \n                                data\n                            \n                            \n                                    \n                                descricao\n                            \n                            \n                                    \n                                image\n                            \n                            \n                                    \n                                tipoLancamento\n                            \n                            \n                                    \n                                titulo\n                            \n                            \n                                    \n                                valor\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        categorias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/lancamento-dto.ts:42\n                        \n                    \n\n            \n                \n                    Categorias (separado por vírgula)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        contaId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/lancamento-dto.ts:54\n                        \n                    \n\n            \n                \n                    Identificador de Conta\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/lancamento-dto.ts:30\n                        \n                    \n\n            \n                \n                    Data\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        descricao\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/lancamento-dto.ts:24\n                        \n                    \n\n            \n                \n                    Descrição\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/lancamento-dto.ts:48\n                        \n                    \n\n            \n                \n                    Imagem (string base 64)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tipoLancamento\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/lancamento-dto.ts:12\n                        \n                    \n\n            \n                \n                    Tipo de Lançamento\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        titulo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/lancamento-dto.ts:18\n                        \n                    \n\n            \n                \n                    Nome do Título\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        valor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/lancamento-dto.ts:36\n                        \n                    \n\n            \n                \n                    Valor\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\n\n/**\n * DTO de criação de Lançamento\n */\nexport class CreateLancamentoDto {\n\n    /**\n     * Tipo de Lançamento\n     */\n    @ApiProperty()    \n    tipoLancamento: string;\n\n    /**\n     * Nome do Título\n     */\n    @ApiProperty()    \n    titulo: string;\n    \n    /**\n     * Descrição\n     */\n    @ApiProperty()    \n    descricao: string;\n\n    /**\n     * Data\n     */\n    @ApiProperty()    \n    data: Date;\n\n    /**\n     * Valor\n     */\n    @ApiProperty()    \n    valor: number;\n\n    /**\n     * Categorias (separado por vírgula)\n     */\n    @ApiProperty()    \n    categorias: string;\n\n    /**\n     * Imagem (string base 64)\n     */\n    @ApiProperty()    \n    image: string;\n\n    /**\n     * Identificador de Conta\n     */    \n    @ApiProperty()\n    contaId: number;\n}\n\n/**\n * DTO de actualização de Lançamento\n */\nexport class UpdateLancamentoDto extends PartialType(CreateLancamentoDto) {\n  \n    /**\n     * Identificador secundário de Lançamento\n     */\n    @ApiProperty()\n    uuid?: string;\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateNotificationDto.html":{"url":"classes/CreateNotificationDto.html","title":"class - CreateNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/dto/notification-dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO de criação de Notificação\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                message\n                            \n                            \n                                    \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/notification-dto.ts:15\n                        \n                    \n\n            \n                \n                    Mensagem\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/notification-dto.ts:21\n                        \n                    \n\n            \n                \n                    Identificador primário de Utilizador, caso exista\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\nimport { IsBoolean, IsNotEmpty, IsString } from \"class-validator\";\n\n/**\n * DTO de criação de Notificação\n */\nexport class CreateNotificationDto {\n\n    /**\n     * Mensagem\n     */\n    @ApiProperty()\n    @IsNotEmpty()\n    @IsString()\n    message: string;\n\n    /**\n     * Identificador primário de Utilizador, caso exista\n     */\n    @ApiProperty()\n    userId?: number | null;\n}\n\n/**\n * DTO de actualização de Notificação\n */\nexport class UpdateNotificationDto extends PartialType(CreateNotificationDto) {\n\n    /**\n     * Identificador secundário de Notificação\n     */    \n    @ApiProperty()\n    uuid?: string;\n    \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/dto/user-dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO de criação de Utilizador\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                    \n                                    Readonly\n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/user-dto.ts:24\n                        \n                    \n\n            \n                \n                    E-mail\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsString()@MinLength(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/user-dto.ts:16\n                        \n                    \n\n            \n                \n                    Nome\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/user-dto.ts:32\n                        \n                    \n\n            \n                \n                    Senha\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/user-dto.ts:38\n                        \n                    \n\n            \n                \n                    Tipo de Utilizador (1 = ADMIN, 2 = USER)\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsNotEmpty, IsString, IsEmail, MinLength } from 'class-validator';\nimport { ApiProperty, PartialType } from '@nestjs/swagger';\n\n/**\n * DTO de criação de Utilizador\n */\nexport class CreateUserDto {\n\n  /**\n   * Nome\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(4)\n  readonly name: string;\n\n  /**\n   * E-mail\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Senha\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  readonly password: string;\n\n  /**\n   * Tipo de Utilizador (1 = ADMIN, 2 = USER)\n   */\n  @ApiProperty()\n  readonly role: number;\n}\n\n/**\n * DTO de actualização de Utilizador\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {\n\n  /**\n   * Indica se utilizador está activo\n   */\n  @ApiProperty()\n  readonly active: boolean;\n\n}\n\n/**\n * DTO de Autenticação no sistema\n */\nexport class LoginUserDto {\n\n  /**\n   * E-Mail do Utilizador\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  readonly email: string;\n\n  /**\n   * Senha do Utilizador\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  readonly password: string;\n}\n\n/**\n * DTO de Actualização de Foto do Utilizador\n */\nexport class UpdateUserPhotoDto {\n\n  /**\n   * Identificador primário do Utilizador\n   */  \n  @ApiProperty()\n  readonly id: number;\n\n  /**\n   * Foto do Utilizador (string de base64)\n   */  \n  @ApiProperty()\n  readonly image: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IResponse.html":{"url":"interfaces/IResponse.html","title":"interface - IResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/interfaces/iresponse.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface de Resposta da API\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     any | any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any | any[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Dados de resposta :: Array ou Objeto\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Objeto de erro\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Mensagem de resposta, caso exista\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Sucesso/Falha\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface IResponse {\n\n    /**\n     * Sucesso/Falha\n     */\n    success: boolean;\n\n    /**\n     * Mensagem de resposta, caso exista\n     */\n    message: string;\n\n    /**\n     * Dados de resposta :: Array ou Objeto\n     */\n    data: any | any[];\n\n    /**\n     * Objeto de erro\n     */\n    error: any;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Lancamento.html":{"url":"entities/Lancamento.html","title":"entity - Lancamento","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Lancamento\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/entities/lancamento.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entidade Lançamento\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                categorias\n                            \n                            \n                                    \n                                    \n                                conta\n                            \n                            \n                                    \n                                    \n                                contaId\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                data\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                    \n                                descricao\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                image\n                            \n                            \n                                    \n                                    \n                                tipoLancamento\n                            \n                            \n                                    \n                                    \n                                titulo\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                    \n                                uuid\n                            \n                            \n                                    \n                                    \n                                valor\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        categorias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'TXT_CATEGORIES', nullable: false, default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/lancamento.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        conta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Conta\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, conta => conta.id)@JoinColumn({name: 'COD_ACCOUNT_ID', foreignKeyConstraintName: 'FK_ACCOUNTING_ENTRY_ACCOUNT'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/lancamento.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        contaId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'COD_ACCOUNT_ID', unsigned: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/lancamento.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'DAT_CREATED', type: 'timestamp', default: () => NOW()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/lancamento.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'DAT_DATE', type: 'date', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/lancamento.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({name: 'DAT_DELETED', type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/lancamento.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        descricao\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'TXT_DESCRIPTION'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/lancamento.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@PrimaryGeneratedColumn({name: 'COD_ACCOUNTING_ENTRY_ID', unsigned: true, comment: 'Primary Key'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/lancamento.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'B64_IMAGE', type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/lancamento.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tipoLancamento\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'COD_ENTRY_TYPE', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/lancamento.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        titulo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'TXT_TITLE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/lancamento.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'DAT_UPDATED', type: 'timestamp', onUpdate: 'CURRENT_TIMESTAMP(6)'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/lancamento.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'TXT_UUID', unique: true, comment: 'Another PK as GUID', nullable: true})@Generated('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/lancamento.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        valor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'NUM_VALUE', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/lancamento.entity.ts:37\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, DeleteDateColumn, Entity, Generated, JoinColumn, ManyToOne, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\nimport { Conta } from \"./conta.entity\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n\n/**\n * Entidade Lançamento\n */\n@Entity('TB_ACCOUNTING_ENTRY')\nexport class Lancamento {\n    @ApiProperty()\n    @PrimaryGeneratedColumn({ name: 'COD_ACCOUNTING_ENTRY_ID', unsigned: true, comment: 'Primary Key' })\n    id: number;\n  \n    @ApiProperty()\n    @Column({ name: 'TXT_UUID', unique: true, comment: 'Another PK as GUID', nullable: true })\n    @Generated(\"uuid\")\n    uuid: string;\n  \n    @ApiProperty()\n    @Column({ name: 'COD_ENTRY_TYPE', nullable: false })\n    tipoLancamento: string;\n\n    @ApiProperty()\n    @Column({ name: 'TXT_TITLE' })\n    titulo: string;\n    \n    @ApiProperty()\n    @Column({ name: 'TXT_DESCRIPTION' })\n    descricao: string;\n\n    @ApiProperty()\n    @Column({ name: 'DAT_DATE', type: 'date', nullable: false })\n    data: Date;\n\n    @ApiProperty()\n    @Column({ name: 'NUM_VALUE', nullable: false })\n    valor: number;\n\n    @ApiProperty()\n    @Column({ name: 'TXT_CATEGORIES', nullable: false, default: '' })\n    categorias: string;\n\n    @ApiProperty()\n    @Column({ name: 'B64_IMAGE', type:'text', nullable: true })\n    image: string;\n \n    @ManyToOne( () => Conta, conta => conta.id)    \n    @JoinColumn({ name: \"COD_ACCOUNT_ID\", foreignKeyConstraintName: 'FK_ACCOUNTING_ENTRY_ACCOUNT' })\n    conta: Conta;\n\n    @ApiProperty()\n    @Column({ name: 'COD_ACCOUNT_ID', unsigned: true, nullable: false })\n    contaId: number;  \n\n    @Column({ name: 'DAT_CREATED', type: 'timestamp', default: () => 'NOW()' })\n    createdAt: Date;\n    \n    @UpdateDateColumn({ name: 'DAT_UPDATED', type: 'timestamp', onUpdate: 'CURRENT_TIMESTAMP(6)' })\n    updatedAt: Date;\n    \n    @DeleteDateColumn({ name: 'DAT_DELETED', type: 'timestamp' })\n    deletedAt: Date;  \n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LancamentoController.html":{"url":"controllers/LancamentoController.html","title":"controller - LancamentoController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LancamentoController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/controllers/lancamento.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                entry\n            \n\n\n            \n                Description\n            \n            \n                Controlador de Lançamento\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    Async\n                                findById\n                            \n                            \n                                    \n                                    Async\n                                getByAccount\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateLancamentoDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UsePipes(new ValidationPipe())\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/lancamento.controller.ts:73\n                        \n                    \n\n\n            \n                \n                        Criar o Lançamento\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateLancamentoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO de criação de Lançamento\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Lançamento\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(uuid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':uuid')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/lancamento.controller.ts:84\n                        \n                    \n\n\n            \n                \n                        Excluir o Lançamento\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Identificador secundário\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Lançamento\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('getById/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/lancamento.controller.ts:49\n                        \n                    \n\n\n            \n                \n                        Obtém um Lannçamento\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Identificador primário do Lançamento\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Lançamento\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getByAccount\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByAccount(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('getByAccount/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/lancamento.controller.ts:37\n                        \n                    \n\n\n            \n                \n                        Obtem todos os Lançamentos de uma Conta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    código de identificação primário de Conta\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(dto: UpdateLancamentoDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/lancamento.controller.ts:61\n                        \n                    \n\n\n            \n                \n                        Actualizar o Lançamento\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            UpdateLancamentoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO de actualização de Lançamento\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Lançamento\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, UsePipes, ValidationPipe } from '@nestjs/common';\nimport { ApiBearerAuth, ApiExtraModels, ApiTags } from '@nestjs/swagger';\nimport { Get, Put, Post, Delete } from '@nestjs/common/decorators/http/request-mapping.decorator';\nimport { Param, Body } from '@nestjs/common/decorators/http/route-params.decorator';\nimport { IResponse } from '../interfaces/iresponse.interface';\nimport { ResponseDto } from '../dto/response-dto';\nimport { Lancamento } from '../entities/lancamento.entity';\nimport { LancamentoService } from '../services/lancamento.service';\nimport { CreateLancamentoDto, UpdateLancamentoDto } from '../dto/lancamento-dto';\n\n/**\n * Controlador de Lançamento\n */\n@ApiTags('Accounting Entry')\n@ApiExtraModels(ResponseDto)\n@ApiExtraModels(Lancamento)\n@ApiBearerAuth()\n@Controller('entry')\nexport class LancamentoController {\n\n    /**\n   * Injeção de Dependencia pelo constructor\n   * \n   * @param {LancamentoService} Serviço de Lançamentos\n   */\n  constructor(\n    private readonly service: LancamentoService\n  ) { }\n \n  /**\n   * Obtem todos os Lançamentos de uma Conta\n   * \n   * @param {number} id código de identificação primário de Conta\n   * @returns {Lancamento[]}\n   */\n  @Get('getByAccount/:id')\n  async getByAccount(@Param('id') id: number): Promise {\n    const result = await this.service.getByAccount(id);\n    return result;\n  }\n\n  /**\n   * Obtém um Lannçamento\n   * \n   * @param {number} id Identificador primário do Lançamento\n   * @returns {Lancamento} Lançamento\n   */  \n  @Get('getById/:id')\n  async findById(@Param('id') id: number): Promise {\n    const result = await this.service.getById(id);\n    return result;\n  }\n\n  /**\n   * Actualizar o Lançamento\n   * \n   * @param {UpdateLancamentoDto} dto DTO de actualização de Lançamento\n   * @returns {Lancamento} Lançamento\n   */  \n  @Put()\n  async update(@Body() dto: UpdateLancamentoDto): Promise {\n    return await this.service.update(dto.uuid, dto);\n  }\n\n  /**\n   * Criar o Lançamento\n   * \n   * @param {CreateLancamentoDto} dto DTO de criação de Lançamento\n   * @returns {Lancamento} Lançamento\n   */\n  @Post()\n  @UsePipes(new ValidationPipe())\n  async create(@Body() dto: CreateLancamentoDto): Promise {    \n    return await this.service.create(dto);\n  }\n\n  /**\n   * Excluir o Lançamento\n   * \n   * @param {string} uuid Identificador secundário\n   * @returns {Lancamento} Lançamento\n   */  \n  @Delete(':uuid')\n  async delete(@Param('uuid') uuid: string): Promise {\n    return await this.service.delete(uuid);\n  }\n\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LancamentoService.html":{"url":"injectables/LancamentoService.html","title":"injectable - LancamentoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LancamentoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/services/lancamento.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Serviço de Lançamentos\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getByAccount\n                            \n                            \n                                    Async\n                                getByGuid\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository, dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/aplicativo/services/lancamento.service.ts:13\n                            \n                        \n\n                \n                    \n                            Injeção de Dependencia pelo constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Repositório de Dados de Lançamento\n\n                                                        \n                                                \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateLancamentoDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/lancamento.service.ts:117\n                        \n                    \n\n\n            \n                \n                        Criar um lançamento\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateLancamentoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO de criação de Lançamento\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Lançamento\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(uuid: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/lancamento.service.ts:214\n                        \n                    \n\n\n            \n                \n                        Excluir um lançamento\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    código primário alternativo de Lançamento\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Lançamento\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getByAccount\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByAccount(contaId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/lancamento.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Obtém todas os lançamentos de uma conta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contaId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    código primário da Conta\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Lancamentos\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getByGuid\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByGuid(uuid: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/lancamento.service.ts:96\n                        \n                    \n\n\n            \n                \n                        Obter um Lançamento\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Lançamento\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/lancamento.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Obter um Lançamento\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    código primário de Lançamento\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Lançamento\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(uuid: string, dto: UpdateLancamentoDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/lancamento.service.ts:175\n                        \n                    \n\n\n            \n                \n                        Actualizar um lançamento\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    código primário alternativo da Lançamento\n\n                                            \n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdateLancamentoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO de actualização de Lançamento\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Lançamento\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { DataSource, Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ResponseDto } from '../dto/response-dto';\nimport { IResponse } from '../interfaces/iresponse.interface';\nimport { Lancamento } from '../entities/lancamento.entity';\nimport { CreateLancamentoDto, UpdateLancamentoDto } from '../dto/lancamento-dto';\n\n/**\n * Serviço de Lançamentos\n **/\n@Injectable()\nexport class LancamentoService {\n\n   /**\n    * Injeção de Dependencia pelo constructor\n    * \n    * @param {Repository} repository Repositório de Dados de Lançamento\n    */\n   constructor(\n    @InjectRepository(Lancamento)\n    private readonly repository: Repository,\n    private dataSource: DataSource\n    ) {\n  }\n\n  /**  \n   * Obtém todas os lançamentos de uma conta\n   * \n   * @param {number} contaId código primário da Conta\n   * @returns {Lancamento[]} Lancamentos\n   */  \n  async getByAccount(contaId: number): Promise {    \n    try {\n      const response = new ResponseDto();\n      response.success = true;      \n      response.data = await this.repository.find({\n        select: {\n           id: true,\n           uuid: true,  \n           tipoLancamento: true,\n           titulo: true,\n           descricao: true,\n           data: true,\n           valor: true,\n           categorias: true,\n           image: true,\n           contaId: true\n        },\n        relations: {\n          conta: true\n        },\n        where: {\n          contaId: contaId\n        },\n        order: {\n          data: 'DESC'\n        },\n        cache: false\n      });\n      response.error = null;\n      response.message = '';\n      return response;\n    } catch (error) {\n      return { success: false, data: null, message: 'Error occurred.', error: error };      \n    }\n  }\n\n  /**  \n   * Obter um Lançamento\n   * \n   * @param {id} id código primário de Lançamento\n   * @returns {Lancamento} Lançamento\n   */    \n  async getById(id: number): Promise {\n    try {\n      const response = new ResponseDto();\n      response.success = true;      \n      response.data = await this.repository.findOneBy({\n        id: id,\n      });  \n      response.error = null;\n      response.message = '';\n      return response;\n    } catch (error) {\n      return { success: false, data: null, message: 'Error occurred.', error: error };      \n    }\n  }\n\n  /**  \n   * Obter um Lançamento\n   * \n   * @param {uuid} id código primário alternativo de Lançamento\n   * @returns {Lancamento} Lançamento\n   */    \n  async getByGuid(uuid: string): Promise {\n    try {\n      const response = new ResponseDto();\n      response.success = true;      \n      response.data = await this.repository.findOneBy({\n        uuid: uuid,\n      });\n      response.error = null;\n      response.message = '';\n      return response;\n    } catch (error) {\n      return { success: false, data: null, message: 'Error occurred.', error: error };      \n    }\n  }\n\n  /**  \n   * Criar um lançamento\n   * \n   * @param {CreateLancamentoDto} dto DTO de criação de Lançamento\n   * @returns {Lancamento} Lançamento\n   */  \n  async create(dto: CreateLancamentoDto): Promise {\n    try {\n      const response = new ResponseDto();\n\n      const entity = new Lancamento();\n\n      entity.tipoLancamento = dto.tipoLancamento;\n      entity.titulo = dto.titulo;\n      entity.descricao = dto.descricao;\n      entity.data = new Date(dto.data);\n      entity.valor = dto.valor\n      entity.categorias = dto.categorias;\n      entity.image = dto.image;\n      entity.contaId = dto.contaId;  \n  \n      const queryRunner = this.dataSource.createQueryRunner();\n      await queryRunner.connect();\n      await queryRunner.startTransaction();\n      try {\n        const result = await queryRunner.manager.save(Lancamento, entity, { transaction: true });\n        await queryRunner.commitTransaction();\n        if (result.id) {\n          response.success = true;\n          response.message = 'record has been created';\n          response.data = result;\n          response.error = null;\n        } else {\n          response.success = false;\n          response.message = 'record cant be created';\n          response.data = result;\n          response.error = null;          \n        }  \n        \n      } catch (error) {\n        await queryRunner.rollbackTransaction();\n\n        response.success = false;\n        response.message = 'record cant be created';\n        response.data = null;\n        response.error = error;\n        return response;\n      }\n      finally {\n        await queryRunner.release();\n      }\n      return response;\n  } catch (error) {\n      return { success: false, message: 'record cant be created', data: null, error: error };  \n  }\n}\n\n  /**  \n   * Actualizar um lançamento\n   * \n   * @param {string} uuid código primário alternativo da Lançamento\n   * @param {UpdateLancamentoDto} dto DTO de actualização de Lançamento\n   * @returns {Lancamento} Lançamento\n   */  \n  async update(uuid: string, dto: UpdateLancamentoDto): Promise {\n    try {\n      const response = new ResponseDto();\n\n      if (uuid) {\n        const entityToUpdate = await this.repository.findOneBy({uuid: uuid});\n\n        entityToUpdate.tipoLancamento = dto.tipoLancamento;\n        entityToUpdate.titulo = dto.titulo;\n        entityToUpdate.descricao = dto.descricao;\n        entityToUpdate.data = new Date(dto.data);\n        entityToUpdate.valor = dto.valor\n        entityToUpdate.categorias = dto.categorias;\n        entityToUpdate.image = dto.image;\n        entityToUpdate.contaId = dto.contaId;\n    \n        const result = this.repository.save(entityToUpdate);\n        response.success = true;\n        response.data = result;\n        response.message = 'record has been updated';\n        response.error = null;                \n      } else {\n        response.success = false;\n        response.data = null;\n        response.message = 'missing identifier';\n        response.error = null;\n      }\n      return response;\n    } catch (error) {\n      return {success: false, message: 'record cant be updated', data: null, error: error };  \n    }\n  }\n\n  /**  \n   * Excluir um lançamento\n   * \n   * @param {string} uuid código primário alternativo de Lançamento\n   * @returns {Lancamento} Lançamento\n   */      \n  async delete(uuid: string): Promise {\n    try {\n      const response = new ResponseDto();\n\n      if (uuid && uuid.length > 0) {\n        const result = await this.repository.delete( { uuid: uuid } );\n        if (result.affected && result.affected > 0) {\n          response.success = true;\n          response.data = result.affected;\n          response.message = 'record has been deleted';\n          response.error = result.raw;\n        } else {\n          response.success = false;\n          response.data = result.affected;\n          response.message = 'record cant be deleted';\n          response.error = result.raw;          \n        }        \n      } else {\n        response.success = false;\n        response.data = null;\n        response.message = 'missing identifier';\n        response.error = null;\n      }\n      return response;\n    } catch (error) {\n      return {success: false, message: 'record cant be deleted', data: null, error: error };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/dto/user-dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO de Autenticação no sistema\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/user-dto.ts:64\n                        \n                    \n\n            \n                \n                    E-Mail do Utilizador\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/user-dto.ts:71\n                        \n                    \n\n            \n                \n                    Senha do Utilizador\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsNotEmpty, IsString, IsEmail, MinLength } from 'class-validator';\nimport { ApiProperty, PartialType } from '@nestjs/swagger';\n\n/**\n * DTO de criação de Utilizador\n */\nexport class CreateUserDto {\n\n  /**\n   * Nome\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(4)\n  readonly name: string;\n\n  /**\n   * E-mail\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Senha\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  readonly password: string;\n\n  /**\n   * Tipo de Utilizador (1 = ADMIN, 2 = USER)\n   */\n  @ApiProperty()\n  readonly role: number;\n}\n\n/**\n * DTO de actualização de Utilizador\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {\n\n  /**\n   * Indica se utilizador está activo\n   */\n  @ApiProperty()\n  readonly active: boolean;\n\n}\n\n/**\n * DTO de Autenticação no sistema\n */\nexport class LoginUserDto {\n\n  /**\n   * E-Mail do Utilizador\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  readonly email: string;\n\n  /**\n   * Senha do Utilizador\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  readonly password: string;\n}\n\n/**\n * DTO de Actualização de Foto do Utilizador\n */\nexport class UpdateUserPhotoDto {\n\n  /**\n   * Identificador primário do Utilizador\n   */  \n  @ApiProperty()\n  readonly id: number;\n\n  /**\n   * Foto do Utilizador (string de base64)\n   */  \n  @ApiProperty()\n  readonly image: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Notification.html":{"url":"entities/Notification.html","title":"entity - Notification","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Notification\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/entities/notification.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entidade Notificação\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                message\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                user\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                userId\n                            \n                            \n                                    \n                                    \n                                    \n                                uuid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'DAT_CREATED', type: 'timestamp', default: () => NOW()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/notification.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({name: 'DAT_DELETED', type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/notification.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@PrimaryGeneratedColumn({name: 'COD_NOTIFICATION_ID', unsigned: true, comment: 'Primary Key'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/notification.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'TXT_MESSAGE'})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/notification.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'DAT_UPDATED', type: 'timestamp', onUpdate: 'CURRENT_TIMESTAMP(6)'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/notification.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.id, {onDelete: 'NO ACTION', onUpdate: 'NO ACTION', cascade: false, nullable: true})@JoinColumn({name: 'COD_USER_ID', foreignKeyConstraintName: 'FK_NOTIFICATION_USER'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/notification.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'COD_USER_ID', unsigned: true, default: undefined, nullable: true, comment: 'Define IF this notificatios is to an user or a broadcast message'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/notification.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'TXT_UUID', unique: true, comment: 'Another PK as GUID'})@Generated('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/notification.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, Generated, UpdateDateColumn, DeleteDateColumn, Index, ManyToOne, JoinColumn } from 'typeorm';\nimport { IsNotEmpty } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { User } from './user.entity';\n\n/**\n * Entidade Notificação\n */\n@Entity('TB_NOTIFICATION')\nexport class Notification {\n  @ApiProperty()\n  @PrimaryGeneratedColumn({ name: 'COD_NOTIFICATION_ID', unsigned: true, comment: 'Primary Key' })\n  id: number;\n\n  @ApiProperty()\n  @Column({ name: 'TXT_UUID', unique: true, comment: 'Another PK as GUID' })\n  @Generated(\"uuid\")\n  uuid: string;\n\n  @ApiProperty()\n  @Column({ name: 'TXT_MESSAGE' })\n  @IsNotEmpty()\n  message: string;\n\n  @ApiProperty()\n  @Column({ name: 'COD_USER_ID', unsigned: true, default: null, nullable: true, comment: 'Define IF this notificatios is to an user or a broadcast message'})\n  userId?: number;\n\n  @ManyToOne(() => User, user => user.id, { onDelete: 'NO ACTION', onUpdate: 'NO ACTION', cascade: false, nullable: true })\n  @JoinColumn({ name: \"COD_USER_ID\", foreignKeyConstraintName: 'FK_NOTIFICATION_USER' })\n  user?: User;  \n\n  @Column({ name: 'DAT_CREATED', type: 'timestamp', default: () => 'NOW()' })\n  createdAt: Date;\n  \n  @UpdateDateColumn({ name: 'DAT_UPDATED', type: 'timestamp', onUpdate: 'CURRENT_TIMESTAMP(6)' })\n  updatedAt: Date;\n  \n  @DeleteDateColumn({ name: 'DAT_DELETED', type: 'timestamp' })\n  deletedAt: Date;  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/NotificationController.html":{"url":"controllers/NotificationController.html","title":"controller - NotificationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  NotificationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/controllers/notification.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                notification\n            \n\n\n            \n                Description\n            \n            \n                Controlador de Notificação\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    Async\n                                findById\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    \n                                    Async\n                                getNotificationsToUser\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateNotificationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UsePipes(new ValidationPipe())\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/notification.controller.ts:94\n                        \n                    \n\n\n            \n                \n                        Criar Notificação\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateNotificationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO de criação de Notificação\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Notificação\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(uuid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/notification.controller.ts:105\n                        \n                    \n\n\n            \n                \n                        Excluir uma notificação\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    código de identificação secundário\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Notificação\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('getById/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/notification.controller.ts:59\n                        \n                    \n\n\n            \n                \n                        Obter Notificação pelo identificador primário\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    código identificador primário\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(uuid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('getByGuid/:uuid')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/notification.controller.ts:48\n                        \n                    \n\n\n            \n                \n                        Obter Notificação pelo identificador secundário\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    código de identificação secundário\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/notification.controller.ts:36\n                        \n                    \n\n\n            \n                \n                        Obter todas as notificações\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Notificações\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getNotificationsToUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNotificationsToUser(idUser: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('getNotificationsToUser')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/notification.controller.ts:70\n                        \n                    \n\n\n            \n                \n                        Obter Notificações de um utilizador\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                idUser\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    código de identificação primário do Utilizador\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Notificações\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(uuid: string, dto: UpdateNotificationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/notification.controller.ts:82\n                        \n                    \n\n\n            \n                \n                        Actualizar Notificação\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    código de identificação secundário\n\n                                            \n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdateNotificationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO de actualização de Notificação\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, UsePipes, ValidationPipe } from '@nestjs/common';\nimport { ApiBearerAuth, ApiExtraModels, ApiTags } from '@nestjs/swagger';\nimport { Get, Put, Post, Delete } from '@nestjs/common/decorators/http/request-mapping.decorator';\nimport { Param, Body } from '@nestjs/common/decorators/http/route-params.decorator';\nimport { NotificationService } from '../services/notification.service';\nimport { Notification } from '../entities/notification.entity';\nimport { CreateNotificationDto, UpdateNotificationDto } from '../dto/notification-dto';\nimport { IResponse } from '../interfaces/iresponse.interface';\nimport { ResponseDto } from '../dto/response-dto';\n\n/**\n * Controlador de Notificação\n */\n@ApiBearerAuth()\n@ApiExtraModels(ResponseDto)\n@ApiExtraModels(Notification)\n@ApiTags('Notification')\n@Controller('notification')\nexport class NotificationController {\n\n  /**\n   * Injeção de Dependencia pelo constructor\n   * \n   * @param {NotificationService} Serviço de Notificação\n   */\n  constructor(\n    private readonly service: NotificationService\n  ) { }\n\n  /**\n   * Obter todas as notificações\n   * \n   * @returns {Notification[]} Notificações\n   */\n  @Get()\n  async getAll(): Promise {\n    const result = await this.service.getAll();\n    return result;\n  }\n\n  /**\n   * Obter Notificação pelo identificador secundário\n   * \n   * @param   {string}      uuid código de identificação secundário\n   * @returns {Notificacao}\n   */\n  @Get('getByGuid/:uuid')\n  async findOne(@Param('uuid') uuid: string): Promise {\n    return await this.service.getByGuid(uuid);\n  }\n  \n  /**\n   * Obter Notificação pelo identificador primário\n   * \n   * @param {number} id código identificador primário\n   * @returns {Notification}\n   */\n  @Get('getById/:id')\n  async findById(@Param('id') id: number): Promise {\n    return await this.service.getById(id);\n  }\n\n  /**\n   * Obter Notificações de um utilizador\n   * \n   * @param {number} idUser código de identificação primário do Utilizador\n   * @returns {Notification[]} Notificações\n   */\n  @Get('getNotificationsToUser')\n  async getNotificationsToUser(@Param('idUser') idUser: number): Promise {\n    return await this.service.getNotificationsToUser(idUser);\n  }\n\n  /**\n   * Actualizar Notificação\n   * \n   * @param {string} uuid código de identificação secundário\n   * @param {UpdateNotificationDto} dto DTO de actualização de Notificação\n   * @returns \n   */\n  @Put()\n  async update(@Param('uuid') uuid: string, @Body() dto: UpdateNotificationDto): Promise {\n    return await this.service.update(uuid, dto);\n  }\n\n  /**\n   * Criar Notificação\n   * \n   * @param {CreateNotificationDto} dto DTO de criação de Notificação\n   * @returns {Notification} Notificação\n   */\n  @Post()\n  @UsePipes(new ValidationPipe())\n  async create(@Body() dto: CreateNotificationDto): Promise {\n    return await this.service.create(dto);\n  }\n\n  /**\n   * Excluir uma notificação\n   * \n   * @param {string} uuid código de identificação secundário\n   * @returns {Notification} Notificação\n   */\n  @Delete()\n  async delete(@Param('uuid') uuid: string): Promise {\n    return await this.service.delete(uuid);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationService.html":{"url":"injectables/NotificationService.html","title":"injectable - NotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/services/notification.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Notification Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getByGuid\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getNotificationsToUser\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/aplicativo/services/notification.service.ts:13\n                            \n                        \n\n                \n                    \n                            Injeção de Dependencia pelo constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Repositório de Dados de Notificação\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateNotificationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/notification.service.ts:121\n                        \n                    \n\n\n            \n                \n                        Criar uma notificação\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateNotificationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO de criação de Notificação\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Notificação\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(uuid: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/notification.service.ts:180\n                        \n                    \n\n\n            \n                \n                        Excluir uma notificação\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    código primário alternativo da Notificação\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Notificação\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/notification.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Obtém todas as notificações\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Notificações\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getByGuid\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByGuid(uuid: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/notification.service.ts:81\n                        \n                    \n\n\n            \n                \n                        Obtém uma notificação por uuid\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Notificações\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/notification.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Obtém uma notificação por id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Notificações\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getNotificationsToUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNotificationsToUser(idUser: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/notification.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Obtém todas as notificações de um utilizador\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                idUser\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    código único do Utilizador\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Notificações\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(uuid: string, dto: UpdateNotificationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/notification.service.ts:154\n                        \n                    \n\n\n            \n                \n                        Actualizar uma notificação\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    código primário alternativo da Notificação\n\n                                            \n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdateNotificationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO de actualização de Notificação\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Notificação\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Notification } from '../entities/notification.entity';\nimport { CreateNotificationDto, UpdateNotificationDto } from '../dto/notification-dto';\nimport { ResponseDto } from '../dto/response-dto';\nimport { IResponse } from '../interfaces/iresponse.interface';\n\n/**\n * Notification Service\n */\n@Injectable()\nexport class NotificationService {\n  \n   /**\n    * Injeção de Dependencia pelo constructor\n    * \n    * @param {Repository} repository Repositório de Dados de Notificação\n    */\n   constructor(\n    @InjectRepository(Notification)\n    private readonly repository: Repository\n    ) {\n  }\n\n  /**  \n   * Obtém todas as notificações\n   * \n   * @returns {Notification[]} Notificações\n   */\n  async getAll(): Promise {    \n    try {\n      const response = new ResponseDto();\n      response.success = true;      \n      response.data = await this.repository.find({\n        select: {\n           id: true,\n           uuid: true,\n           message: true,\n           createdAt: true,\n           updatedAt: true          \n        },\n        order: {\n          createdAt: 'DESC'\n        },\n        cache: true\n      });\n      response.error = null;\n      response.message = '';\n      return response;\n    } catch (error) {\n      return { success: false, data: null, message: 'Error occurred.', error: error };      \n    }\n  }\n\n  /**  \n   * Obtém uma notificação por id\n   * \n   * @returns {Notification} Notificações\n   */\n  async getById(id: number): Promise {\n    try {\n      const response = new ResponseDto();\n      response.success = true;      \n      response.data = await this.repository.findOneBy({\n        id: id,\n      });  \n      response.error = null;\n      response.message = '';\n      return response;\n    } catch (error) {\n      return { success: false, data: null, message: 'Error occurred.', error: error };      \n    }\n  }\n\n  /**  \n   * Obtém uma notificação por uuid\n   * \n   * @returns {Notification} Notificações\n   */\n  async getByGuid(uuid: string): Promise {\n    try {\n      const response = new ResponseDto();\n      response.success = true;      \n      response.data = await this.repository.findOneBy({\n        uuid: uuid,\n      });\n      response.error = null;\n      response.message = '';\n      return response;\n    } catch (error) {\n      return { success: false, data: null, message: 'Error occurred.', error: error };      \n    }\n  }\n\n  /**  \n   * Obtém todas as notificações de um utilizador\n   * \n   * @param {number} idUser código único do Utilizador\n   * @returns {Notification[]} Notificações\n   */  \n  async getNotificationsToUser(idUser: number): Promise {\n    try {\n        const response = new ResponseDto();\n        response.success = true;      \n        response.data = await this.repository.findBy({ userId: idUser });\n        response.error = null;\n        response.message = '';\n        return response;\n    } catch (error) {\n        return { success: false, data: null, message: 'Error occurred.', error: error };      \n    }    \n  }\n\n  /**  \n   * Criar uma notificação\n   * \n   * @param {CreateNotificationDto} dto DTO de criação de Notificação\n   * @returns {Notification} Notificação\n   */  \n  async create(dto: CreateNotificationDto): Promise {\n    try {\n      const response = new ResponseDto();\n\n      const entity = new Notification();\n      entity.message = dto.message;      \n      entity.userId = dto.userId;\n  \n      const result = await this.repository.save(entity);\n      if (result.id) {\n        response.success = true;\n        response.message = 'record has been created';\n        response.data = result;\n        response.error = null;\n      } else {\n        response.success = false;\n        response.message = 'record cant be created';\n        response.data = result;\n        response.error = null;          \n      }\n      return response;      \n  } catch (error) {\n      return { success: false, message: 'record cant be created', data: null, error: error };  \n  }\n}\n\n  /**  \n   * Actualizar uma notificação\n   * \n   * @param {string} uuid código primário alternativo da Notificação\n   * @param {UpdateNotificationDto} dto DTO de actualização de Notificação\n   * @returns {Notification} Notificação\n   */  \n  async update(uuid: string, dto: UpdateNotificationDto): Promise {\n    try {\n      const response = new ResponseDto();\n\n      const entityToUpdate = await this.repository.findOneBy({uuid: uuid});\n    \n      entityToUpdate.message = (entityToUpdate.message !== dto.message) && dto.message.length > 0 ? dto.message : entityToUpdate.message;      \n      entityToUpdate.userId = dto.userId;\n  \n      const result = this.repository.save(entityToUpdate);\n      response.success = true;\n      response.data = result;\n      response.message = 'record has been updated';\n      response.error = null;        \n      return response;\n    } catch (error) {\n      return {success: false, message: 'record cant be updated', data: null, error: error };  \n    }\n  }\n\n  /**  \n   * Excluir uma notificação\n   * \n   * @param {string} uuid código primário alternativo da Notificação\n   * @returns {Notification} Notificação\n   */      \n  async delete(uuid: string): Promise {\n    try {\n      const response = new ResponseDto();\n      const result = await this.repository.delete( { uuid: uuid } );\n      if (result.affected && result.affected > 0) {\n        response.success = true;\n        response.data = result.affected;\n        response.message = 'record has been deleted';\n        response.error = result.raw;\n      } else {\n        response.success = false;\n        response.data = result.affected;\n        response.message = 'record cant be deleted';\n        response.error = result.raw;          \n      }\n      return response;\n    } catch (error) {\n      return {success: false, message: 'record cant be deleted', data: null, error: error };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResponseDto.html":{"url":"classes/ResponseDto.html","title":"class - ResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/dto/response-dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Objeto de Resposta da API\nHavendo sempre resposta evita que erros sejam emitidos para fora do aplicativo,\nmaximizando o tempo de resposta.\n\n            \n\n\n            \n                Implements\n            \n            \n                            IResponse\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                data\n                            \n                            \n                                    \n                                error\n                            \n                            \n                                    \n                                message\n                            \n                            \n                                    \n                                success\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/aplicativo/dto/response-dto.ts:34\n                            \n                        \n\n                \n                    \n                            Inicializa os atributos\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/response-dto.ts:28\n                        \n                    \n\n            \n                \n                    Dados de resposta :: Array ou Objeto\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/response-dto.ts:34\n                        \n                    \n\n            \n                \n                    Objeto de erro\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/response-dto.ts:22\n                        \n                    \n\n            \n                \n                    Mensagem de resposta, caso exista\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        success\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/response-dto.ts:16\n                        \n                    \n\n            \n                \n                    Sucesso/Falha\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IResponse } from \"../interfaces/iresponse.interface\";\n\n/**\n * Objeto de Resposta da API\n * \n * Havendo sempre resposta evita que erros sejam emitidos para fora do aplicativo, \n * maximizando o tempo de resposta.\n */\nexport class ResponseDto implements IResponse {\n\n    /**\n     * Sucesso/Falha\n     */\n    @ApiProperty()\n    success: boolean;\n\n    /**\n     * Mensagem de resposta, caso exista\n     */    \n    @ApiProperty()\n    message: string;\n\n    /**\n     * Dados de resposta :: Array ou Objeto\n     */\n    @ApiProperty()\n    data: any;\n\n    /**\n     * Objeto de erro\n     */\n    @ApiProperty()\n    error: any;        \n\n    /**\n     * Inicializa os atributos\n     */\n    constructor() {\n        this.success = false;\n        this.message = '';\n        this.data = null;\n        this.error = null;\n    }    \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/dto/sign-in-dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO de entrada no sistema\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/sign-in-dto.ts:23\n                        \n                    \n\n            \n                \n                    Senha do Utilizador\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/sign-in-dto.ts:15\n                        \n                    \n\n            \n                \n                    E-mail do Utilizador\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail, IsNotEmpty, IsString } from \"class-validator\";\n\n/**\n * DTO de entrada no sistema\n */\nexport class SignInDto {\n\n    /**\n     * E-mail do Utilizador\n     */\n    @ApiProperty()\n    @IsNotEmpty()\n    @IsEmail()\n    username: string;\n\n    /**\n     * Senha do Utilizador\n     */\n    @ApiProperty()\n    @IsNotEmpty()\n    @IsString()\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAuthenticationDto.html":{"url":"classes/UpdateAuthenticationDto.html","title":"class - UpdateAuthenticationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAuthenticationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/dto/authentication-dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO de actualização de Autenticação\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateAuthenticationDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\nimport { User } from \"../entities/user.entity\";\n\n/**\n * DTO de criação de Autenticação\n */\nexport class CreateAuthenticationDto {\n\n    /**\n     * Identificador secundário de autenticação\n     */\n    @ApiProperty()\n    uuid: string;\n    \n    /**\n     * Token JWT\n     */\n    @ApiProperty()\n    token: string;\n\n    /**\n     * Utilizador\n     */\n    @ApiProperty()\n    user: User;\n}\n\n/**\n * DTO de actualização de Autenticação\n */\nexport class UpdateAuthenticationDto extends PartialType(CreateAuthenticationDto) {\n    \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateContaDto.html":{"url":"classes/UpdateContaDto.html","title":"class - UpdateContaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateContaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/dto/conta-dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO de actualização de Conta\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateContaDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                uuid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/conta-dto.ts:61\n                        \n                    \n\n            \n                \n                    Identificador secundário de Conta\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\n\n/**\n * DTO de criação de Conta\n */\nexport class CreateContaDto {\n\n    /**\n     * Nome da Conta\n     */\n    @ApiProperty()\n    nome: string;\n\n    /**\n     * Descrição\n     */\n    @ApiProperty()    \n    descricao: string;\n\n    /**\n     * Saldo de Créditos da Conta\n     */\n    @ApiProperty()    \n    saldoCredito: number;\n\n    /**\n     * Saldo de Débitos da Conta\n     */    \n    @ApiProperty()    \n    saldoDebito: number;\n\n    /**\n     * Saldo de Lançamentos maior que data actual\n     */    \n    @ApiProperty()    \n    saldoFuturo: number;\n\n    /**\n     * Saldo consolidado de Crédito - Débitos +- Futuro\n     */\n    @ApiProperty()    \n    saldoConsolidado: number;\n\n    /**\n     * Identificador primário do Utilizador\n     */    \n    @ApiProperty()\n    userId: number\n\n}\n\n/**\n * DTO de actualização de Conta\n */\nexport class UpdateContaDto extends PartialType(CreateContaDto) {\n\n    /**\n     * Identificador secundário de Conta\n     */    \n    @ApiProperty()\n    uuid?: string;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateLancamentoDto.html":{"url":"classes/UpdateLancamentoDto.html","title":"class - UpdateLancamentoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateLancamentoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/dto/lancamento-dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO de actualização de Lançamento\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateLancamentoDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                uuid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/lancamento-dto.ts:66\n                        \n                    \n\n            \n                \n                    Identificador secundário de Lançamento\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\n\n/**\n * DTO de criação de Lançamento\n */\nexport class CreateLancamentoDto {\n\n    /**\n     * Tipo de Lançamento\n     */\n    @ApiProperty()    \n    tipoLancamento: string;\n\n    /**\n     * Nome do Título\n     */\n    @ApiProperty()    \n    titulo: string;\n    \n    /**\n     * Descrição\n     */\n    @ApiProperty()    \n    descricao: string;\n\n    /**\n     * Data\n     */\n    @ApiProperty()    \n    data: Date;\n\n    /**\n     * Valor\n     */\n    @ApiProperty()    \n    valor: number;\n\n    /**\n     * Categorias (separado por vírgula)\n     */\n    @ApiProperty()    \n    categorias: string;\n\n    /**\n     * Imagem (string base 64)\n     */\n    @ApiProperty()    \n    image: string;\n\n    /**\n     * Identificador de Conta\n     */    \n    @ApiProperty()\n    contaId: number;\n}\n\n/**\n * DTO de actualização de Lançamento\n */\nexport class UpdateLancamentoDto extends PartialType(CreateLancamentoDto) {\n  \n    /**\n     * Identificador secundário de Lançamento\n     */\n    @ApiProperty()\n    uuid?: string;\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateNotificationDto.html":{"url":"classes/UpdateNotificationDto.html","title":"class - UpdateNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/dto/notification-dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO de actualização de Notificação\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateNotificationDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                uuid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/notification-dto.ts:33\n                        \n                    \n\n            \n                \n                    Identificador secundário de Notificação\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\nimport { IsBoolean, IsNotEmpty, IsString } from \"class-validator\";\n\n/**\n * DTO de criação de Notificação\n */\nexport class CreateNotificationDto {\n\n    /**\n     * Mensagem\n     */\n    @ApiProperty()\n    @IsNotEmpty()\n    @IsString()\n    message: string;\n\n    /**\n     * Identificador primário de Utilizador, caso exista\n     */\n    @ApiProperty()\n    userId?: number | null;\n}\n\n/**\n * DTO de actualização de Notificação\n */\nexport class UpdateNotificationDto extends PartialType(CreateNotificationDto) {\n\n    /**\n     * Identificador secundário de Notificação\n     */    \n    @ApiProperty()\n    uuid?: string;\n    \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/dto/user-dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO de actualização de Utilizador\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                active\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/user-dto.ts:50\n                        \n                    \n\n            \n                \n                    Indica se utilizador está activo\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsNotEmpty, IsString, IsEmail, MinLength } from 'class-validator';\nimport { ApiProperty, PartialType } from '@nestjs/swagger';\n\n/**\n * DTO de criação de Utilizador\n */\nexport class CreateUserDto {\n\n  /**\n   * Nome\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(4)\n  readonly name: string;\n\n  /**\n   * E-mail\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Senha\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  readonly password: string;\n\n  /**\n   * Tipo de Utilizador (1 = ADMIN, 2 = USER)\n   */\n  @ApiProperty()\n  readonly role: number;\n}\n\n/**\n * DTO de actualização de Utilizador\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {\n\n  /**\n   * Indica se utilizador está activo\n   */\n  @ApiProperty()\n  readonly active: boolean;\n\n}\n\n/**\n * DTO de Autenticação no sistema\n */\nexport class LoginUserDto {\n\n  /**\n   * E-Mail do Utilizador\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  readonly email: string;\n\n  /**\n   * Senha do Utilizador\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  readonly password: string;\n}\n\n/**\n * DTO de Actualização de Foto do Utilizador\n */\nexport class UpdateUserPhotoDto {\n\n  /**\n   * Identificador primário do Utilizador\n   */  \n  @ApiProperty()\n  readonly id: number;\n\n  /**\n   * Foto do Utilizador (string de base64)\n   */  \n  @ApiProperty()\n  readonly image: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserPhotoDto.html":{"url":"classes/UpdateUserPhotoDto.html","title":"class - UpdateUserPhotoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserPhotoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/dto/user-dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO de Actualização de Foto do Utilizador\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                id\n                            \n                            \n                                    \n                                    Readonly\n                                image\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/user-dto.ts:83\n                        \n                    \n\n            \n                \n                    Identificador primário do Utilizador\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/user-dto.ts:89\n                        \n                    \n\n            \n                \n                    Foto do Utilizador (string de base64)\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsNotEmpty, IsString, IsEmail, MinLength } from 'class-validator';\nimport { ApiProperty, PartialType } from '@nestjs/swagger';\n\n/**\n * DTO de criação de Utilizador\n */\nexport class CreateUserDto {\n\n  /**\n   * Nome\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(4)\n  readonly name: string;\n\n  /**\n   * E-mail\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Senha\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  readonly password: string;\n\n  /**\n   * Tipo de Utilizador (1 = ADMIN, 2 = USER)\n   */\n  @ApiProperty()\n  readonly role: number;\n}\n\n/**\n * DTO de actualização de Utilizador\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {\n\n  /**\n   * Indica se utilizador está activo\n   */\n  @ApiProperty()\n  readonly active: boolean;\n\n}\n\n/**\n * DTO de Autenticação no sistema\n */\nexport class LoginUserDto {\n\n  /**\n   * E-Mail do Utilizador\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  readonly email: string;\n\n  /**\n   * Senha do Utilizador\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  readonly password: string;\n}\n\n/**\n * DTO de Actualização de Foto do Utilizador\n */\nexport class UpdateUserPhotoDto {\n\n  /**\n   * Identificador primário do Utilizador\n   */  \n  @ApiProperty()\n  readonly id: number;\n\n  /**\n   * Foto do Utilizador (string de base64)\n   */  \n  @ApiProperty()\n  readonly image: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entidade Utilizador\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                active\n                            \n                            \n                                    \n                                    Optional\n                                contas\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                image\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                role\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                    \n                                uuid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'FLG_ACTIVE', default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/user.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        contas\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Conta[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, conta => conta.user, {lazy: true, nullable: true, cascade: false, onDelete: 'NO ACTION', onUpdate: 'NO ACTION', createForeignKeyConstraints: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/user.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'DAT_CREATED', type: 'timestamp', default: () => NOW()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/user.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({name: 'DAT_DELETED', type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/user.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'TXT_EMAIL', unique: true})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@PrimaryGeneratedColumn({name: 'COD_USER_ID', unsigned: true, comment: 'Primary Key'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'B64_IMAGE', type: 'longtext', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/user.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'TXT_NAME', unique: true, length: 256})@MinLength(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'TXT_PASSWORD', length: 128, select: false})@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'TIP_ROLE', unsigned: true, nullable: false, default: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/user.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'DAT_UPDATED', type: 'timestamp', onUpdate: 'CURRENT_TIMESTAMP(6)'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/user.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'TXT_UUID', unique: true, comment: 'Another PK as GUID'})@Generated('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, Generated, BeforeInsert, DeleteDateColumn, UpdateDateColumn, ManyToOne, JoinColumn, OneToMany } from 'typeorm';\nimport { MinLength, IsEmail } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Conta } from './conta.entity';\n\n/**\n * Entidade Utilizador\n */\n@Entity('TB_USER')\nexport class User {\n  \n  /* KEYS COLUMNS */\n\n  /* PK */\n  @ApiProperty()\n  @PrimaryGeneratedColumn({ name: 'COD_USER_ID', unsigned: true, comment: 'Primary Key' })\n  id: number;\n\n  /* UNIQUE KEY */\n  @ApiProperty()  \n  @Column({ name: 'TXT_UUID', unique: true, comment: 'Another PK as GUID' })\n  @Generated(\"uuid\")\n  uuid: string;\n\n  /* DATA COLUMNS */\n\n  @ApiProperty()\n  @Column({ name: 'TXT_NAME', unique: true, length: 256 })\n  @MinLength(4)\n  name: string;\n\n  @ApiProperty()\n  @Column({ name: 'TXT_EMAIL', unique: true })\n  @IsEmail()\n  email: string;\n\n  @ApiProperty()\n  @Column({ name: 'TXT_PASSWORD', length: 128, select: false })\n  @MinLength(8)\n  password: string;\n\n  @ApiProperty()  \n  @Column({ name: 'TIP_ROLE', unsigned: true, nullable: false, default: 2 })\n  role: number; //UserRole;\n  \n  @ApiProperty()\n  @Column({ name: 'FLG_ACTIVE', default: true })\n  active: boolean;\n\n  @ApiProperty()\n  @Column({ name: \"B64_IMAGE\", type: 'longtext', nullable: true })\n  image: string;\n\n  /* LOG PURPOSES COLUMNS */\n\n  @Column({ name: 'DAT_CREATED', type: 'timestamp', default: () => 'NOW()' })\n  createdAt: Date;\n  \n  @UpdateDateColumn({ name: 'DAT_UPDATED', type: 'timestamp', onUpdate: 'CURRENT_TIMESTAMP(6)' })\n  updatedAt: Date;\n  \n  @DeleteDateColumn({ name: 'DAT_DELETED', type: 'timestamp' })\n  deletedAt: Date;  \n  \n\n  @OneToMany(() => Conta, (conta) => conta.user, { lazy: true, nullable: true, cascade: false, \n                                                   onDelete: 'NO ACTION', onUpdate: 'NO ACTION',\n                                                   createForeignKeyConstraints: true })    \n  contas?: Conta[];\n\n  /* BEFORE INSERT RULES */\n\n  @BeforeInsert()\n  emailToLowerCase() {\n      this.email = this.email.toLowerCase();      \n  }\n\n  @BeforeInsert()\n  inactivate() {\n    if (this.deletedAt) {\n      this.active = false;\n    }\n  }  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/controllers/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n            \n                Description\n            \n            \n                Controlador de Utilizador\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findById\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findUserPhoto\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    Async\n                                updateUserPhoto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UsePipes(new ValidationPipe())\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/user.controller.ts:110\n                        \n                    \n\n\n            \n                \n                        Criar Utilidador\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/user.controller.ts:122\n                        \n                    \n\n\n            \n                \n                        Excluir Utilidador\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Get('getById/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/user.controller.ts:60\n                        \n                    \n\n\n            \n                \n                        Obter utilizador por identificador primário\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('getByEmail')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/user.controller.ts:35\n                        \n                    \n\n\n            \n                \n                        Obtém um utilizador por e-mail\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Utilizador\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findUserPhoto\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserPhoto(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Get('getUserPhoto/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/user.controller.ts:73\n                        \n                    \n\n\n            \n                \n                        Obter foto do Utilizador\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    identificador primário\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Get('getAll')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/user.controller.ts:47\n                        \n                    \n\n\n            \n                \n                        Obtém todos os Utilizadores\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Utilizadores\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(dto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Put()\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/user.controller.ts:86\n                        \n                    \n\n\n            \n                \n                        Actualizar Utilidador\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        updateUserPhoto\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserPhoto(dto: UpdateUserPhotoDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Put('updateUserPhoto')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/user.controller.ts:98\n                        \n                    \n\n\n            \n                \n                        Actualizar foto do Utilidador\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            UpdateUserPhotoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, UsePipes, ValidationPipe } from '@nestjs/common';\nimport { CreateUserDto, UpdateUserDto, UpdateUserPhotoDto } from 'src/aplicativo/dto/user-dto';\nimport { User } from '../entities/user.entity';\nimport { UserService } from '../services/user.service';\nimport { ApiBearerAuth, ApiExtraModels, ApiTags } from '@nestjs/swagger';\nimport { Get, Put, Post, Delete } from '@nestjs/common/decorators/http/request-mapping.decorator';\nimport { Param, Body } from '@nestjs/common/decorators/http/route-params.decorator';\nimport { IResponse } from '../interfaces/iresponse.interface';\nimport { ResponseDto } from '../dto/response-dto';\n\n/**\n * Controlador de Utilizador\n */\n@ApiTags('User')\n@ApiExtraModels(ResponseDto)\n@ApiExtraModels(User)\n@Controller('user')\nexport class UserController {\n\n  /**\n   * Injeção de Dependencia pelo constructor\n   * \n   * @param {UserService} service Serviço de Utilizador\n   */\n  constructor(\n    private readonly service: UserService\n  ) { }\n\n  /**\n   * Obtém um utilizador por e-mail\n   * @param email \n   * @returns {User} Utilizador\n   */\n  @Get('getByEmail')\n  async findOne(@Param('email') email: string): Promise {\n    const result = await this.service.findOne(email);\n    return result;\n  }\n  \n  /**\n   * Obtém todos os Utilizadores\n   * \n   * @returns {User[]} Utilizadores\n   */\n  @ApiBearerAuth()\n  @Get('getAll')\n  async getAll(): Promise {\n    const result = await this.service.getAll();\n    return result;\n  }\n\n  /**\n   * Obter utilizador por identificador primário\n   * \n   * @param id \n   * @returns {User}\n   */\n  @ApiBearerAuth()\n  @Get('getById/:id')\n  async findById(@Param('id') id: number): Promise {\n    const result = await this.service.findById(id);\n    return result;\n  }\n\n  /**\n   * Obter foto do Utilizador\n   * \n   * @param id   identificador primário\n   * @returns {User}\n   */\n  @ApiBearerAuth()\n  @Get('getUserPhoto/:id')\n  async findUserPhoto(@Param('id') id: number): Promise {\n    const result = await this.service.findUserPhoto(id);\n    return result;\n  }  \n\n  /**\n   * Actualizar Utilidador\n   * \n   * @param {UpdateUserDto} dto \n   * @returns {User}\n   */\n  @ApiBearerAuth()\n  @Put()\n  async update(@Body() dto: UpdateUserDto): Promise {\n    return await this.service.updateUser(dto);\n  }\n\n  /**\n   * Actualizar foto do Utilidador\n   * \n   * @param {UpdateUserPhotoDto} dto \n   * @returns {User}\n   */\n  @ApiBearerAuth()\n  @Put('updateUserPhoto')\n  async updateUserPhoto(@Body() dto: UpdateUserPhotoDto): Promise {\n    return await this.service.updateUserPhoto(dto);\n  }\n\n  /**\n   * Criar Utilidador\n   * \n   * @param {CreateUserDto} dto \n   * @returns {User}\n   */\n  @Post()\n  @UsePipes(new ValidationPipe())\n  async create(@Body() dto: CreateUserDto): Promise {\n    return await this.service.createUser(dto);\n  }\n\n  /**\n   * Excluir Utilidador\n   * \n   * @param {string} email \n   * @returns {User}\n   */\n  @ApiBearerAuth()\n  @Delete()\n  async delete(@Param('email') email: string): Promise {\n    return await this.service.delete(email);\n  }\n\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/services/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Serviço do Utilizador\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findSignIn\n                            \n                            \n                                    Async\n                                findUserPhoto\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                    Async\n                                updateUserPhoto\n                            \n                            \n                                    Async\n                                validate\n                            \n                            \n                                    Async\n                                validatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/aplicativo/services/user.service.ts:14\n                            \n                        \n\n                \n                    \n                            Injeção de Dependencia pelo constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Repositório de Dados de Utilizador\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/user.service.ts:273\n                        \n                    \n\n\n            \n                \n                        Cria um novo Utilizador\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                ResponseDTO => response.data = Utilizador incluído\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/user.service.ts:309\n                        \n                    \n\n\n            \n                \n                        Exclui um utilizador\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    conta de email do utilizador\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                ResponseDTO => response.data = Utilizador excluído\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/user.service.ts:150\n                        \n                    \n\n\n            \n                \n                        Obtém o Utilizador por código primário\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    código interno do utilizador\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Utilizador\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/user.service.ts:108\n                        \n                    \n\n\n            \n                \n                        Obtém um Utilizador por email\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Conta de e-mail do utilizador\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Utilizador\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findSignIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    findSignIn(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/user.service.ts:134\n                        \n                    \n\n\n            \n                \n                        Obtém o Utilizador por email\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    conta de e-mail do utilizador\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Utilizador\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserPhoto\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserPhoto(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/user.service.ts:118\n                        \n                    \n\n\n            \n                \n                        Obtém a foto do Utilizador por id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    código interno do Utilizador\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Imagem do Utilizador\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/user.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Obter todos os utilizadores activos\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Utilizadores Ativos\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/user.service.ts:69\n                        \n                    \n\n\n            \n                \n                        Obter Utilizador por código de identificador primário\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Código interno primário do Utilizador\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Utilizador\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/user.service.ts:235\n                        \n                    \n\n\n            \n                \n                        Actualiza os dados do Utilizador\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                ResponseDTO => response.data = Utilizador actualizado\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUserPhoto\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserPhoto(updateUserPhotoDto: UpdateUserPhotoDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/user.service.ts:204\n                        \n                    \n\n\n            \n                \n                        Actualiza a foto do Utilizador\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateUserPhotoDto\n                                            \n                                                            UpdateUserPhotoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                ResponseDTO => response.data = Utilizador actualizado\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(id: number, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/user.service.ts:175\n                        \n                    \n\n\n            \n                \n                        Valida a senha do Utilizador\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    código interno do utilizador\n\n                                            \n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    senha do utilizador\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                ResponseDTO => response.data = User\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validatePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    validatePassword(plain: string, hash: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/user.service.ts:159\n                        \n                    \n\n\n            \n                \n                        Compara a senha do utilizador com a senha hashed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                plain\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                hash\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                ResponseDTO => response.data = true/false\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../entities/user.entity';\nimport { CreateUserDto, UpdateUserDto, UpdateUserPhotoDto } from '../dto/user-dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { hash, compare, genSalt} from \"bcrypt\";\nimport { IResponse } from '../interfaces/iresponse.interface';\nimport { ResponseDto } from '../dto/response-dto';\n\n/**\n * Serviço do Utilizador\n */\n@Injectable()\nexport class UserService {\n  \n   /**\n    * Injeção de Dependencia pelo constructor\n    * \n    * @param {Repository} repository Repositório de Dados de Utilizador\n    */\n   constructor(\n    @InjectRepository(User)\n    private readonly repository: Repository\n    ) {\n\n  }\n\n /**  \n  * Obter todos os utilizadores activos\n  * \n  * @returns {User[]} Utilizadores Ativos\n  */\n  async getAll(): Promise {  \n    try {\n      const response = new ResponseDto();\n      response.success = true;      \n      response.data = await this.repository.find({\n        select: {\n          id: true,\n          uuid: true,\n          name: true,\n          role: true,\n          email: true,                    \n          createdAt: true,\n          updatedAt: true\n        },\n        where: {\n          active: true\n        },\n        order: {          \n          name: 'ASC'\n        },\n        cache: true\n      });\n      response.error = null;\n      response.message = '';\n      return response;\n    } catch (error) {\n      return { success: false, data: null, message: 'Error occurred.', error: error };      \n    }\n  }\n\n  /**  \n   * Obter Utilizador por código de identificador primário\n   * \n   * @param {number} id  Código interno primário do Utilizador\n   * @returns {User} Utilizador\n   */\n  async getById(id: number): Promise {  \n    try {\n      const response = new ResponseDto();\n      response.success = true;      \n      response.data = await this.repository.find({\n        select: {\n          id: true,\n          uuid: true,\n          name: true,\n          role: true,\n          email: true,                    \n          createdAt: true,\n          updatedAt: true\n        },\n        where: {\n          id: id\n        },\n        relations: {\n          contas: true,\n        },\n        order: {          \n          name: 'ASC'\n        },\n        cache: true\n      });\n      response.error = null;\n      response.message = '';\n      return response;\n    } catch (error) {\n      return { success: false, data: null, message: 'Error occurred.', error: error };      \n    }\n  }\n\n  /**  \n   * Obtém um Utilizador por email\n   * \n   * @param {email} email  Conta de e-mail do utilizador\n   * @returns {User} Utilizador\n   */\n  async findOne(email: string): Promise {    \n    return await this.repository.findOneBy({ email: email });\n  }\n\n /**  \n  * Obtém a foto do Utilizador por id\n  * \n  * @param {number} id  código interno do Utilizador\n  * @returns {User} Imagem do Utilizador\n  */\n  async findUserPhoto(id: number): Promise {\n    const users = await this.repository.find(\n      {\n        select: { image: true },\n        where: { id: id },                \n      }\n    );    \n    if (users && users.length > 0) return users[0]; else return null;    \n  }\n\n  /**  \n   * Obtém o Utilizador por email\n   * \n   * @param {email} email  conta de e-mail do utilizador\n   * @returns {User} Utilizador\n   */\n  async findSignIn(email: string): Promise {\n    const users = await this.repository.find(\n      {\n        select: { id: true, uuid: true, name: true, email: true, role: true, createdAt: true, password: true },\n        where: { email: email },                \n      }\n    );    \n    if (users && users.length > 0) return users[0]; else return null;\n  }\n\n /**  \n  * Obtém o Utilizador por código primário\n  * \n  * @param {number} id  código interno do utilizador\n  * @returns {User} Utilizador\n  */\n  async findById(id: number): Promise {\n    return await this.repository.findOneBy({ id: id });\n  }\n\n  /**  \n   * Compara a senha do utilizador com a senha hashed\n   * \n   * @returns {boolean} ResponseDTO => response.data = true/false\n   */\n  async validatePassword(plain: string, hash: string): Promise {\n    const isPasswordMatching = await compare(plain, hash);  \n    const response = new ResponseDto();\n    response.success = true;\n    response.message = \"is Password Matching\";\n    response.data = isPasswordMatching;\n    return response;\n  }\n\n  /**  \n   * Valida a senha do Utilizador\n   * \n   * @param {number} id  código interno do utilizador\n   * @param {string} password  senha do utilizador\n   * @returns ResponseDTO => response.data = User\n   */\n  async validate(id: number, password: string): Promise {\n    try {\n      const hashedPassword = await hash(password, 10);\n      //console.log(hashedPassword);\n      const user = await this.repository.findOneBy({ id: id, password: hashedPassword });\n      if (user) {\n        const response = new ResponseDto();\n        response.success = true;\n        response.message = \"user checked by id and password\";\n        response.data = user;\n        return response;  \n      } else {\n        const response = new ResponseDto();\n        response.success = false;\n        response.message = \"id and password cannot validate user\";\n        response.data = user;\n        return response;\n      }\n    } catch (error) {\n      return { success: false, message: 'record cant be updated', data: null, error: error };\n    }\n  }\n\n  /**  \n   * Actualiza a foto do Utilizador\n   * \n   * @param {UpdateUserPhotoDto} UpdateUserPhotoDto  DTO de actualização de imagem do utilizador\n   * @returns ResponseDTO => response.data = Utilizador actualizado\n   */  \n  async updateUserPhoto(updateUserPhotoDto: UpdateUserPhotoDto): Promise {\n    try {      \n      const response = new ResponseDto();\n      const userToUpdate = await this.repository.findOneBy({ id: updateUserPhotoDto.id });\n      if (userToUpdate) {\n        userToUpdate.image = updateUserPhotoDto.image;\n        const result = this.repository.save(userToUpdate);\n\n        response.success = true;\n        response.data = result;\n        response.message = 'photo has been updated';\n        response.error = null;        \n      } else {\n        response.success = false;\n        response.data = null;\n        response.message = 'invalid user';\n        response.error = null;\n      }\n  \n      return response;\n    } catch (error) {\n      return { success: false, message: 'record cant be updated', data: null, error: error };  \n    }    \n  }\n\n  /**  \n   * Actualiza os dados do Utilizador\n   * \n   * @param {UpdateUserDto} UpdateUserDto  DTO de actualização do utilizador\n   * @returns ResponseDTO => response.data = Utilizador actualizado\n   */  \n  async updateUser(updateUserDto: UpdateUserDto): Promise {\n    try {\n      //const hashedPassword = await bcrypt.hash(updateUserDto.password, 10);\n      const response = new ResponseDto();\n      const userToUpdate = await this.repository.findOneBy({ email: updateUserDto.email });\n      if (userToUpdate) {\n        const user = new User();\n        user.name = (userToUpdate.name !== updateUserDto.name) && updateUserDto.name.length > 0 ? updateUserDto.name : userToUpdate.name;\n        user.email = userToUpdate.email;\n        user.password = userToUpdate.password;\n        user.role = (userToUpdate.role !== updateUserDto.role) && updateUserDto.role > 0 ? updateUserDto.role : userToUpdate.role;\n        user.active = updateUserDto.active;\n\n        const result = this.repository.save(user);\n\n        response.success = true;\n        response.data = result;\n        response.message = 'record has been updated';\n        response.error = null;        \n      } else {\n        response.success = false;\n        response.data = null;\n        response.message = 'invalid user';\n        response.error = null;\n      }\n  \n      return response;\n    } catch (error) {\n      return { success: false, message: 'record cant be updated', data: null, error: error };  \n    }\n  }\n\n  /**  \n   * Cria um novo Utilizador\n   * \n   * @param {CreateUserDto} CreateUserDto  DTO de criação do utilizador\n   * @returns ResponseDTO => response.data = Utilizador incluído\n   */  \n  async createUser(createUserDto: CreateUserDto): Promise {\n    try {\n      const hashedPassword = await hash(createUserDto.password, 10);\n\n      const response = new ResponseDto();\n\n      const user = new User();\n      user.name = createUserDto.name;\n      user.email = createUserDto.email;\n      user.password = hashedPassword;\n      user.role = createUserDto.role;\n  \n      const result = await this.repository.save(user);\n      if (result.id) {\n        response.success = true;\n        response.message = 'record has been created';\n        response.data = result;\n        response.error = null;\n      } else {\n        response.success = false;\n        response.message = 'record cant be created';\n        response.data = result;\n        response.error = null;          \n      }\n      return response;      \n    } catch (error) {\n      return { success: false, message: 'record cant be created', data: null, error: error };  \n    }   \n  }\n\n  /**  \n   * Exclui um utilizador\n   * \n   * @param {string} email  conta de email do utilizador\n   * @returns ResponseDTO => response.data = Utilizador excluído\n   */  \n  async delete(email: string): Promise {\n    try {\n      const response = new ResponseDto();\n      const result = await this.repository.delete( { email: email } );\n      if (result.affected && result.affected > 0) {\n        response.success = true;\n        response.data = result.affected;\n        response.message = 'record has been deleted';\n        response.error = result.raw;\n      } else {\n        response.success = false;\n        response.data = result.affected;\n        response.message = 'record cant be deleted';\n        response.error = result.raw;          \n      }\n      return response;\n    } catch (error) {\n      return {success: false, message: 'record cant be deleted', data: null, error: error };\n    }\n  }\n\n  /*\n  private generatePassword(pwd: string): any {\n    genSalt(10, function(err, salt) {\n      hash(pwd, salt, function(err, hash) {\n          return hash;\n      });\n  });\n  }*/\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/aplicativo/controllers/authentication.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/aplicativo/controllers/conta.controller.ts\n            \n            controller\n            ContaController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/aplicativo/controllers/lancamento.controller.ts\n            \n            controller\n            LancamentoController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/aplicativo/controllers/notification.controller.ts\n            \n            controller\n            NotificationController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/aplicativo/controllers/user.controller.ts\n            \n            controller\n            UserController\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/aplicativo/decorators/get-user.decorator.ts\n            \n            variable\n            GetUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/aplicativo/dto/authentication-dto.ts\n            \n            class\n            CreateAuthenticationDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/aplicativo/dto/authentication-dto.ts\n            \n            class\n            UpdateAuthenticationDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/aplicativo/dto/conta-dto.ts\n            \n            class\n            CreateContaDto\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/aplicativo/dto/conta-dto.ts\n            \n            class\n            UpdateContaDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/aplicativo/dto/lancamento-dto.ts\n            \n            class\n            CreateLancamentoDto\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/aplicativo/dto/lancamento-dto.ts\n            \n            class\n            UpdateLancamentoDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/aplicativo/dto/notification-dto.ts\n            \n            class\n            CreateNotificationDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/aplicativo/dto/notification-dto.ts\n            \n            class\n            UpdateNotificationDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/aplicativo/dto/response-dto.ts\n            \n            class\n            ResponseDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/aplicativo/dto/sign-in-dto.ts\n            \n            class\n            SignInDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/aplicativo/dto/user-dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/aplicativo/dto/user-dto.ts\n            \n            class\n            LoginUserDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/aplicativo/dto/user-dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/aplicativo/dto/user-dto.ts\n            \n            class\n            UpdateUserPhotoDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/aplicativo/entities/authentication.entity.ts\n            \n            entity\n            Authentication\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/aplicativo/entities/conta.entity.ts\n            \n            entity\n            Conta\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/aplicativo/entities/lancamento.entity.ts\n            \n            entity\n            Lancamento\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/aplicativo/entities/notification.entity.ts\n            \n            entity\n            Notification\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/aplicativo/entities/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/aplicativo/guards/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/aplicativo/interfaces/iresponse.interface.ts\n            \n            interface\n            IResponse\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/aplicativo/services/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/aplicativo/services/conta.service.ts\n            \n            injectable\n            ContaService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/aplicativo/services/lancamento.service.ts\n            \n            injectable\n            LancamentoService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/aplicativo/services/notification.service.ts\n            \n            injectable\n            NotificationService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/aplicativo/services/user.service.ts\n            \n            injectable\n            UserService\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/config/typeorm.config.ts\n            \n            variable\n            jwtConstants\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/typeorm.config.ts\n            \n            variable\n            typeOrmConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.1.2\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.1.2\n        \n            @nestjs/jwt : ^10.1.0\n        \n            @nestjs/passport : ^10.0.0\n        \n            @nestjs/platform-express : ^10.1.2\n        \n            @nestjs/swagger : ^7.1.2\n        \n            @nestjs/typeorm : ^10.0.0\n        \n            @types/bcrypt : ^5.0.0\n        \n            bcrypt : ^5.1.1\n        \n            cache-manager-redis-store : ^1.5.0\n        \n            class-transformer : ^0.2.3\n        \n            class-validator : ^0.11.0\n        \n            dotenv : ^8.2.0\n        \n            lodash : ^4.17.15\n        \n            mysql2 : ^3.5.1\n        \n            npm-check-updates : ^16.10.16\n        \n            passport : ^0.4.1\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.0\n        \n            rxjs : ^7.8.1\n        \n            slugify : ^1.6.6\n        \n            swagger-ui-express : ^4.1.2\n        \n            typeorm : ^0.3.17\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Função de início do serviço\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAPI-CONTROLE\nDefinição\nA API-CONTROLE é um serviço REST API destinado ao controle da informação de Autenticação Utilizadores, Contas, Lançamento e Notificações.\nTecnologia\nFoi concebido em Typescript com NestJs de forma a permitir escalar (verticalmente e/ou horizontalmente).\nDocumentação\nA documentação do código é gerada pela biblioteca compodoc e deve ser executada sempre que houver mudanças no software.\nPara executar, usar:\nExample :   > npm run compodocÉ criada a pasta \"documentation\" na pasta raiz do projeto e deve ser executada pelo arquivo index.html.\nConfiguração\nA configuração do banco de dados MySQL deve ser mantida no arquivo \"typeorm.config.ts\". Se não houver dados na base destino, habilitar o parâmetro \"syncronize\" como \"true\", caso contrário, manter como \"false\".\nTODO: Implementar migrations\nExecução\nO software deve ser executado com o orquestrador a partir de seu arquivo main.ts ou com o comando interno para desenvolvimento:\nExample :   > npm run start:devContribuição\nEste projeto tem como objetivo criar um software opensource para administração de lançamentos financeiros simples de forma a democratizar a utilização de um gestor de finanças. O projeto é criado e mantido por Andre Mesquita a aproveitar minha paixão de criar soluções e desenvolver software. Se encontrar valor em algo, ficaria grato por sua contribuição para o suporte deste aplicativo e, neste caso, patrocinar-me (mensalmente, esporádico ou mesmo um café).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AplicativoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AplicativoModule\n\n\n\ncluster_AplicativoModule_exports\n\n\n\ncluster_AplicativoModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthenticationService \n\nAuthenticationService \n\n\n\nUserService \n\nUserService \n\n\n\nAplicativoModule\n\nAplicativoModule\n\nAuthenticationService  -->\n\nAplicativoModule->AuthenticationService \n\n\n\nUserService  -->\n\nAplicativoModule->UserService \n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAplicativoModule->AppModule\n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAplicativoModule -->\n\nAuthenticationService->AplicativoModule\n\n\n\n\n\nContaService\n\nContaService\n\nAplicativoModule -->\n\nContaService->AplicativoModule\n\n\n\n\n\nLancamentoService\n\nLancamentoService\n\nAplicativoModule -->\n\nLancamentoService->AplicativoModule\n\n\n\n\n\nNotificationService\n\nNotificationService\n\nAplicativoModule -->\n\nNotificationService->AplicativoModule\n\n\n\n\n\nUserService\n\nUserService\n\nAplicativoModule -->\n\nUserService->AplicativoModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    14 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.\n        \n            Description : API de Controle\n        \n            License : GNU\n        \n            Author : Andre Mesquita \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GetUser   (src/.../get-user.decorator.ts)\n                        \n                        \n                            jwtConstants   (src/.../typeorm.config.ts)\n                        \n                        \n                            typeOrmConfig   (src/.../typeorm.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/aplicativo/decorators/get-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((data, req): User => {\n  return req.user;\n})\n                    \n                \n\n            \n                \n                    Obtém o Utilizador da requisição\n\n                \n            \n\n        \n    \n\n    src/config/typeorm.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret : process.env.JWT_SECRET,\n}\n                    \n                \n\n            \n                \n                    Constante de segurança do token JWT\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        typeOrmConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TypeOrmModuleOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'mysql',\n  host: process.env.MYSQL_HOST,\n  port: parseInt(process.env.MYSQL_PORT,3306),\n  username: process.env.MYSQL_USERNAME, \n  password: process.env.MYSQL_PASSWORD,\n  database: process.env.MYSQL_DATABASE,\n  entities: [__dirname + '/../**/*.entity.{js,ts}'],\n  synchronize: false,\n  debug: process.env.DEBUG == 'true' ? true : false,\n  insecureAuth: process.env.INSECURE_AUTH == 'true' ? true : false,\n  migrations: [\"src/migrations/*.js\"],\n  migrationsTableName: \"tb_migration_table\",\n}\n                    \n                \n\n            \n                \n                    Constante de configuração do acesso a banco de dados\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
