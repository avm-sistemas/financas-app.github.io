var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AplicativoModule.html",[0,2.127,1,2.127]],["body/modules/AplicativoModule.html",[0,3.459,1,4.314,2,2.325,3,2.325,4,2.831,5,2.831,6,2.325,7,4.211,8,4.211,9,3.207,10,3.207,11,3.207,12,3.893,13,3.602,14,0.025,15,3.623,16,3.623,17,3.623,18,3.753,19,2.831,20,2.831,21,0.24,22,0.24,23,0.209,24,3.778,25,0.209,26,4.252,27,4.252,28,2.273,29,3.793,30,3.793,31,3.793,32,3.793,33,3.793,34,0.509,35,1.097,36,3.207,37,1.838,38,3.778,39,2.55,40,2.55,41,3.207,42,3.778,43,3.207,44,3.083,45,3.207,46,3.778,47,3.207,48,1.285,49,2.325,50,2.836,51,2.831,52,3.778,53,3.207,54,1.454,55,2.831,56,3.778,57,3.207,58,2.623,59,2.831,60,3.778,61,3.207,62,3.207,63,3.778,64,3.778,65,2.831,66,3.207,67,3.778,68,3.778,69,3.778,70,0.24,71,0.135,72,0.017,73,0.017]],["title/controllers/AppController.html",[74,1.209,75,2.333]],["body/controllers/AppController.html",[14,0.025,21,0.286,22,0.286,23,0.249,25,0.249,28,2.045,34,0.46,35,1.308,70,0.286,71,0.161,72,0.019,73,0.019,74,1.576,75,3.787,76,3.825,77,2.551,78,4.507,79,3.176,80,5.187,81,3.2,82,0.286,83,1.962,84,2.137,85,5.428,86,0.781,87,0.446,88,4.507,89,5.611,90,5.611,91,3.349,92,3.176,93,5.428,94,5.611,95,1.962,96,1.962,97,4.763,98,4.763,99,4.763,100,3.724,101,3.825,102,2.551,103,0.676,104,2.551,105,2.551,106,4.507,107,4.507,108,1.576,109,1.844,110,1.679,111,0.404,112,3.825,113,1.679,114,3.377,115,1.481,116,1.481,117,4.507]],["title/modules/AppModule.html",[0,2.127,118,2.333]],["body/modules/AppModule.html",[0,3.781,1,4.14,2,2.807,3,2.807,4,3.418,5,3.418,6,2.807,7,4.603,8,3.418,14,0.025,18,4.236,19,3.418,20,3.418,21,0.29,22,0.29,23,0.252,25,0.252,26,4.799,28,2.565,34,0.491,35,1.324,36,3.872,37,2.22,62,4.799,70,0.29,71,0.163,72,0.019,73,0.019,75,4.146,81,2.961,100,3.808,101,3.872,111,0.507,118,4.65,119,3.872,120,3.872,121,4.562,122,4.562,123,5.654,124,5.654,125,4.562,126,3.418,127,4.562,128,4.562,129,4.562,130,3.872,131,4.562,132,4.562,133,4.562,134,1.857,135,2.389]],["title/injectables/AppService.html",[100,1.956,136,1.136]],["body/injectables/AppService.html",[14,0.024,21,0.305,22,0.305,23,0.265,25,0.265,34,0.345,35,1.392,70,0.305,71,0.172,72,0.02,73,0.02,80,4.949,82,0.305,83,2.039,84,2.197,85,5.547,87,0.474,91,3.053,92,3.699,93,4.949,95,2.039,96,2.039,97,4.949,98,4.949,99,4.949,100,3.3,109,1.915,116,1.576,134,1.576,136,1.915,137,2.511,138,4.071,139,2.595,140,4.796,141,4.949,142,5.83,143,4.368,144,4.949,145,2.645,146,5.83,147,1.905]],["title/entities/Authentication.html",[44,2.127,148,1.067]],["body/entities/Authentication.html",[14,0.025,21,0.225,22,0.225,23,0.196,25,0.196,34,0.42,44,2.956,48,1.699,70,0.225,71,0.172,72,0.016,73,0.016,82,0.225,86,1.133,87,0.647,103,0.532,134,2.148,148,1.095,149,1.858,150,3.011,151,2.956,152,1.907,153,1.018,154,2.47,155,2.851,156,1.396,157,2.851,158,2.47,159,2.47,160,1.154,161,0.624,162,3.292,163,2.183,164,2.956,165,3.869,166,2.718,167,2.956,168,3.548,169,2.183,170,2.956,171,3.548,172,1.011,173,2.183,174,4.803,175,3.591,176,3.591,177,2.956,178,2.956,179,3.548,180,0.633,181,3.351,182,4.803,183,3.548,184,3.548,185,2.183,186,2.956,187,3.591,188,2.956,189,3.548,190,2.394,191,3.598,192,3.241,193,3.675,194,3.011,195,3.938,196,3.241,197,4.803,198,3.548,199,2.956,200,3.548,201,2.956,202,2.956,203,2.956,204,2.956,205,2.394,206,3.548,207,3.753,208,2.956,209,2.183,210,2.956,211,2.956,212,2.956,213,2.956,214,1.409,215,2.179,216,1.409,217,2.658,218,1.469,219,3.548,220,1.478,221,2.008,222,2.183,223,3.011]],["title/controllers/AuthenticationController.html",[29,2.333,74,1.209]],["body/controllers/AuthenticationController.html",[12,3.108,14,0.025,21,0.229,22,0.229,23,0.199,25,0.325,28,1.636,29,3.277,34,0.472,35,1.047,43,3.061,48,1.408,70,0.229,71,0.129,72,0.016,73,0.016,74,1.261,77,2.041,79,2.749,82,0.229,83,1.698,84,1.92,86,0.952,87,0.543,95,2.209,96,1.698,102,2.041,103,0.541,104,2.041,105,2.041,108,1.261,109,1.185,110,1.343,111,0.566,113,2.188,114,2.702,116,1.804,145,2.665,152,2.563,157,2.543,161,0.323,220,1.241,224,3.061,225,3.606,226,4.856,227,4.122,228,3.606,229,3.606,230,3.606,231,3.076,232,1.356,233,5.875,234,2.181,235,1.408,236,5.361,237,4.986,238,5.875,239,5.875,240,3.606,241,3.606,242,3.606,243,3.606,244,4.138,245,3.606,246,3.606,247,1.172,248,3.639,249,2.749,250,3.606,251,3.061,252,3.606,253,3.061,254,3.379,255,3.606,256,2.219,257,2.219,258,2.219,259,2.219,260,2.434,261,3.606,262,1.185,263,1.432,264,3.606,265,3.606,266,1.529,267,1.432,268,2.041,269,3.606,270,3.606,271,3.606,272,3.606,273,3.606,274,3.606,275,3.606,276,3.606,277,3.061,278,3.606,279,3.606,280,1.432,281,2.059,282,1.432,283,3.606]],["title/guards/AuthenticationGuard.html",[260,2.333,284,2.333]],["body/guards/AuthenticationGuard.html",[14,0.025,21,0.227,22,0.227,23,0.198,25,0.302,34,0.421,35,1.037,39,2.41,40,2.41,41,3.032,65,2.676,66,3.032,70,0.227,71,0.128,72,0.016,73,0.016,82,0.227,83,1.687,84,1.911,87,0.54,91,3.064,95,2.046,96,1.687,108,1.249,109,1.585,110,1.797,111,0.601,112,4.096,113,2.035,114,2.676,116,1.585,134,1.173,136,1.585,145,2.655,147,1.419,152,1.916,157,3.372,161,0.548,180,0.593,220,1.235,232,0.958,234,2.17,235,1.401,249,2.731,253,5.633,260,3.256,267,1.916,280,2.324,282,1.419,284,3.256,285,3.572,286,3.032,287,5.852,288,2.317,289,4.825,290,3.572,291,5.465,292,3.572,293,4.825,294,4.825,295,5.852,296,3.572,297,4.096,298,4.825,299,4.825,300,4.825,301,4.825,302,4.967,303,4.825,304,4.825,305,3.572,306,4.825,307,2.348,308,4.825,309,4.096,310,4.094,311,4.638,312,3.032,313,3.032,314,3.572,315,3.572,316,4.096,317,2.527,318,2.022,319,4.638,320,3.572,321,3.572,322,3.572,323,3.032,324,3.572,325,3.572,326,3.572,327,3.572,328,3.572,329,2.022,330,3.572,331,3.572]],["title/injectables/AuthenticationService.html",[12,1.956,136,1.136]],["body/injectables/AuthenticationService.html",[12,1.553,13,2.099,14,0.025,21,0.107,22,0.107,23,0.093,25,0.306,34,0.399,35,0.488,37,0.819,39,1.135,44,3.074,45,1.428,48,1.454,54,1.163,70,0.107,71,0.06,72,0.009,73,0.009,82,0.107,83,0.959,84,2.307,87,0.548,95,2.142,96,2.023,108,1.401,109,0.901,110,1.022,111,0.594,113,2.225,115,0.553,116,1.934,134,1.934,135,0.881,136,0.901,137,0.881,139,1.881,144,2.329,145,1.245,148,0.519,152,2.667,154,0.763,155,0.881,156,1.132,157,0.881,158,0.763,160,1.266,161,0.483,172,0.695,180,0.724,214,0.668,220,1.252,227,2.329,232,1.292,234,2.2,235,1.42,247,1.178,251,1.428,262,0.553,263,0.668,266,1.163,267,1.09,280,2.458,281,2.008,282,2.298,288,2.008,291,4.239,310,1.26,311,2.949,316,3.747,317,3.029,318,2.827,319,1.428,329,2.827,332,1.428,333,1.335,334,1.245,335,2.949,336,2.744,337,1.851,338,1.689,339,1.335,340,2.744,341,1.035,342,3.205,343,3.474,344,1.682,345,1.689,346,1.335,347,1.335,348,3.205,349,1.682,350,1.335,351,0.62,352,4.008,353,1.437,354,1.682,355,1.335,356,1.334,357,1.656,358,2.744,359,4.994,360,1.682,361,2.48,362,4.008,363,1.95,364,1.818,365,1.335,366,2.901,367,4.019,368,2.744,369,1.851,370,1.682,371,1.95,372,1.689,373,1.682,374,0.796,375,2.744,376,2.744,377,1.682,378,2.744,379,2.744,380,4.008,381,1.682,382,2.744,383,2.603,384,1.689,385,2.717,386,1.682,387,1.335,388,0.661,389,2.744,390,3.747,391,1.682,392,2.744,393,1.682,394,1.682,395,1.035,396,1.682,397,1.644,398,0.763,399,2.329,400,1.26,401,1.682,402,1.682,403,2.329,404,1.682,405,2.949,406,1.682,407,1.428,408,0.881,409,1.428,410,2.744,411,1.682,412,4.415,413,2.744,414,1.682,415,3.241,416,2.444,417,1.682,418,1.682,419,1.682,420,1.544,421,0.763,422,3.205,423,2.914,424,2.914,425,1.035,426,0.952,427,1.135,428,2.914,429,2.914,430,2.099,431,1.881,432,1.7,433,1.035,434,1.689,435,1.682,436,1.26,437,1.682,438,1.966,439,1.428,440,1.035,441,3.205,442,2.138,443,2.717,444,1.135,445,1.135,446,3.474,447,1.682,448,1.135,449,1.689,450,1.035,451,2.467,452,2.138,453,1.689,454,1.682,455,1.682,456,2.744,457,2.744,458,2.744,459,2.744,460,2.329]],["title/entities/Conta.html",[54,1.003,148,1.067]],["body/entities/Conta.html",[14,0.025,21,0.18,22,0.18,23,0.156,25,0.156,34,0.38,48,1.614,54,1.533,58,3.061,70,0.18,71,0.101,72,0.014,73,0.014,82,0.18,86,1.162,87,0.663,103,0.424,134,2.216,147,1.627,148,0.873,149,1.48,151,2.521,153,0.868,154,2.185,155,2.522,156,1.235,158,2.185,159,2.185,160,1.021,161,0.619,162,3.061,163,1.74,164,2.521,165,3.598,166,3.704,167,2.521,169,1.74,170,2.521,172,1.134,173,1.74,175,4.028,176,3.251,177,2.521,178,2.521,180,0.634,181,3.874,185,1.74,186,2.521,187,3.598,188,2.521,190,1.908,191,3.069,192,3.564,193,4.069,194,2.4,195,3.564,196,2.764,199,3.251,201,2.521,202,2.521,203,2.521,204,2.521,205,1.908,207,3.985,208,2.521,209,1.74,210,2.521,211,2.521,212,2.521,213,2.521,214,1.123,217,2.118,218,1.559,220,1.505,221,1.6,222,1.74,235,1.05,421,2.185,431,2.538,438,3.495,461,2.4,462,2.344,463,3.609,464,2.043,465,3.251,466,3.251,467,3.251,468,3.251,469,3.477,470,2.827,471,2.827,472,2.827,473,3.477,474,2.827,475,3.477,476,2.827,477,2.4,478,4.096,479,3.477,480,3.069,481,3.477,482,2.827,483,3.477,484,2.827,485,4.096,486,2.827,487,4.096,488,2.827,489,4.096,490,2.827,491,4.096,492,2.827,493,2.827,494,4.096,495,2.827,496,2.827,497,2.827,498,3.477,499,2.827,500,2.827]],["title/controllers/ContaController.html",[32,2.333,74,1.209]],["body/controllers/ContaController.html",[14,0.025,15,2.776,21,0.185,22,0.185,23,0.161,25,0.327,28,1.324,32,2.829,34,0.457,35,0.847,54,2.045,55,2.187,57,2.477,70,0.185,71,0.105,72,0.014,73,0.014,74,1.021,77,1.652,79,2.372,82,0.185,83,1.466,84,2.356,86,0.984,87,0.562,95,2.251,96,2.251,102,1.652,103,0.438,104,1.652,105,1.652,108,1.466,109,0.959,110,1.087,111,0.608,113,2.268,115,0.959,116,1.865,145,1.902,156,1.515,160,1.039,161,0.509,172,1.079,180,0.581,220,1.283,232,1.064,234,2.255,235,1.456,247,1.233,254,3.637,256,2.58,257,1.796,258,1.796,259,1.796,262,0.959,263,1.159,266,1.238,267,1.948,268,1.652,280,1.665,281,2.273,282,2.255,288,1.238,333,2.04,334,2.225,339,2.04,347,1.42,350,2.04,351,0.947,353,1.528,355,2.04,356,1.5,357,1.466,361,2.807,371,2.04,374,1.716,387,2.04,388,1.009,397,1.087,398,1.324,501,2.477,502,2.919,503,2.58,504,4.191,505,3.213,506,2.187,507,3.31,508,2.919,509,2.372,510,2.477,511,2.919,512,2.372,513,1.796,514,1.97,515,2.919,516,2.919,517,2.919,518,2.919,519,2.58,520,3.494,521,2.187,522,3.213,523,1.97,524,2.919,525,1.97,526,1.97,527,2.829,528,2.477,529,2.919,530,1.97,531,2.919,532,2.919,533,2.919,534,2.919,535,2.919,536,1.97,537,1.97,538,2.187,539,2.187,540,2.477,541,1.97,542,1.97,543,2.187,544,2.477,545,2.187,546,2.187]],["title/injectables/ContaService.html",[15,1.956,136,1.136]],["body/injectables/ContaService.html",[14,0.025,15,1.695,21,0.119,22,0.119,23,0.104,25,0.3,34,0.376,35,0.544,37,0.912,54,2.002,55,1.405,70,0.119,71,0.067,72,0.01,73,0.01,82,0.119,83,1.047,84,2.232,87,0.517,95,2.084,96,2.084,108,1.493,109,0.984,110,1.115,111,0.562,113,2.02,115,0.616,116,2.015,134,2.14,135,0.982,136,0.984,137,0.982,139,1.696,148,0.925,154,0.851,155,0.982,156,1.47,158,0.851,159,1.359,160,1.283,161,0.468,172,0.94,180,0.647,214,0.745,220,1.18,221,1.695,232,1.077,234,2.074,235,1.339,247,1.106,262,0.616,263,0.745,266,1.27,267,1.189,280,2.367,281,2.11,282,2.325,288,1.27,317,2.734,318,2.956,329,2.956,333,1.457,334,1.359,337,2.021,338,1.843,339,1.457,341,1.154,342,3.338,345,1.843,346,1.457,347,1.457,350,1.457,351,0.965,353,1.568,355,1.457,356,1.381,357,1.74,361,2.605,369,2.021,371,2.078,372,1.843,384,1.843,387,1.457,395,1.154,397,1.945,398,0.851,415,3.448,416,2.872,420,1.74,421,0.851,422,3.775,423,3.604,424,3.604,425,1.154,426,1.061,427,1.265,428,3.604,429,3.604,430,2.605,431,2.367,432,2.11,433,2.301,434,1.843,436,1.405,438,2.116,440,1.154,441,3.441,442,2.628,443,3.062,444,1.265,445,1.265,448,1.265,449,1.843,450,1.154,451,2.628,452,2.301,453,1.843,462,0.912,463,1.405,464,1.27,465,1.265,466,1.265,467,1.265,468,1.265,505,2.641,509,3.245,519,1.843,520,3.062,522,2.641,528,1.592,547,1.592,548,2.995,549,4.432,550,1.875,551,1.875,552,1.875,553,2.995,554,1.875,555,1.875,556,1.875,557,1.875,558,1.875,559,1.265,560,1.405,561,1.875,562,2.995,563,1.592,564,2.542,565,1.875,566,1.875,567,1.875,568,1.875,569,1.875,570,1.875,571,1.875,572,1.875,573,1.592,574,1.592,575,1.592,576,1.592,577,1.592,578,1.875,579,1.592,580,1.592,581,1.592,582,1.592,583,1.592,584,1.875,585,1.875,586,1.875,587,1.592,588,2.542,589,2.244,590,1.592]],["title/classes/CreateAuthenticationDto.html",[71,0.124,348,2.127]],["body/classes/CreateAuthenticationDto.html",[14,0.025,21,0.285,22,0.285,23,0.248,25,0.248,34,0.403,48,1.718,49,2.759,70,0.355,71,0.2,72,0.019,73,0.019,82,0.285,86,1.056,87,0.603,103,0.673,111,0.616,152,2.609,153,1.186,157,3.44,160,1.292,161,0.547,180,0.692,218,1.637,232,1.11,247,1.132,249,3.166,348,3.442,351,1.264,356,1.347,357,1.956,385,2.759,388,1.08,591,1.385,592,4.783,593,1.385,594,4.484,595,4.484,596,4.484,597,1.67,598,1.67,599,3.806]],["title/classes/CreateContaDto.html",[71,0.124,505,1.956]],["body/classes/CreateContaDto.html",[14,0.025,21,0.236,22,0.236,23,0.205,25,0.205,34,0.267,54,1.961,70,0.315,71,0.177,72,0.017,73,0.017,82,0.236,86,1.127,87,0.643,103,0.557,111,0.625,139,2.53,153,1.05,159,2.528,160,0.787,161,0.583,172,1.171,180,0.672,218,1.685,232,0.983,247,1.034,351,1.12,356,1.342,357,1.299,374,1.438,388,0.894,420,1.732,462,2.712,464,2.626,465,3.761,466,3.761,467,3.761,468,3.761,505,2.803,522,2.102,591,1.147,593,1.147,597,1.383,598,1.383,600,4.949,601,3.152,602,3.342,603,3.152,604,3.152,605,5.607,606,3.711,607,4.204,608,5.046,609,4.204,610,2.782,611,4.204,612,3.152,613,3.152,614,3.048,615,4.204,616,3.342,617,4.204,618,3.152,619,3.152]],["title/classes/CreateLancamentoDto.html",[71,0.124,620,1.956]],["body/classes/CreateLancamentoDto.html",[14,0.025,21,0.238,22,0.238,23,0.207,25,0.207,34,0.27,54,1.447,70,0.317,71,0.179,72,0.017,73,0.017,82,0.238,86,1.147,87,0.655,103,0.563,111,0.612,153,1.057,160,0.795,161,0.594,162,2.611,172,1.034,180,0.75,218,1.698,247,1.04,351,1.127,356,1.349,357,1.312,371,2.426,388,0.903,420,2.173,462,2.725,464,2.114,512,3.616,591,1.158,593,1.158,597,1.397,598,1.397,601,3.184,602,3.365,603,3.184,604,3.184,610,2.81,612,3.184,613,3.184,618,3.184,620,2.822,621,5.021,622,4.193,623,3.779,624,2.375,625,3.779,626,3.779,627,4.193,628,4.232,629,4.232,630,3.751,631,3.736,632,4.232,633,4.232,634,2.822,635,4.232,636,2.123,637,3.184]],["title/classes/CreateNotificationDto.html",[71,0.124,638,1.956]],["body/classes/CreateNotificationDto.html",[14,0.025,21,0.283,22,0.283,23,0.246,25,0.246,34,0.401,70,0.354,71,0.218,72,0.019,73,0.019,82,0.283,86,0.965,87,0.551,103,0.668,111,0.62,153,1.18,159,2.757,160,0.944,161,0.499,172,0.965,180,0.659,215,2.527,216,1.768,218,1.579,232,1.106,235,1.428,247,1.128,351,1.259,356,1.464,357,1.557,374,1.617,388,1.073,416,2.527,432,2.577,591,1.375,593,1.375,597,1.659,598,1.659,638,3.152,639,4.553,640,3.919,641,3.336,642,3.78,643,3.759,644,4.453,645,3.759,646,3.759,647,3.78,648,2.917,649,2.52,650,3.78]],["title/classes/CreateUserDto.html",[71,0.124,651,1.682]],["body/classes/CreateUserDto.html",[14,0.025,21,0.232,22,0.232,23,0.202,25,0.202,34,0.353,48,1.257,70,0.375,71,0.221,72,0.017,73,0.017,81,1.915,82,0.232,86,1.024,87,0.584,91,1.915,103,0.549,111,0.614,115,2.302,147,1.452,152,1.452,153,1.039,156,0.938,161,0.53,172,0.958,180,0.731,215,2.877,216,1.452,218,1.637,220,1.25,232,1.349,247,1.144,351,1.108,356,0.881,363,2.875,364,2.509,365,2.691,366,2.896,374,1.061,388,1.181,408,2.896,421,1.659,464,2.079,591,1.129,593,1.129,597,1.362,598,1.362,610,2.74,624,1.551,634,2.774,641,2.74,648,2.896,651,2.385,652,3.487,653,2.875,654,3.104,655,3.657,656,3.104,657,3.657,658,3.657,659,3.017,660,3.308,661,2.567,662,2.774,663,2.25,664,2.25,665,1.779,666,2.468,667,2.468,668,2.468,669,2.468,670,2.07,671,2.774,672,1.779,673,2.468]],["title/interfaces/IResponse.html",[262,1.136,674,2.333]],["body/interfaces/IResponse.html",[14,0.025,21,0.297,22,0.297,23,0.258,25,0.258,70,0.297,72,0.019,73,0.019,82,0.297,92,2.642,111,0.614,139,1.854,147,2.465,153,1.215,161,0.58,180,0.673,262,1.884,346,2.79,415,3.39,420,2.264,430,3.39,432,2.745,643,3.87,645,3.87,646,3.87,674,3.87,675,4.667,676,3.962,677,5.641,678,4.867,679,4.867,680,5.495,681,4.867,682,4.867]],["title/entities/Lancamento.html",[58,1.81,148,1.067]],["body/entities/Lancamento.html",[14,0.025,21,0.191,22,0.191,23,0.166,25,0.166,34,0.359,54,1.854,58,2.24,70,0.191,71,0.108,72,0.014,73,0.014,82,0.191,86,1.165,87,0.665,103,0.451,134,2.098,148,0.927,149,1.572,151,2.632,153,0.907,154,2.26,155,2.609,156,1.278,158,2.26,160,1.056,161,0.626,162,3.392,163,1.848,164,2.632,165,3.672,166,3.073,167,2.632,169,1.848,170,2.632,172,1.034,173,1.848,175,3.342,176,3.342,177,2.632,178,2.632,180,0.718,181,3.862,185,1.848,186,2.632,187,2.632,188,2.632,190,2.026,196,2.886,199,4.138,201,2.632,202,2.632,203,2.632,204,2.632,207,3.986,208,2.632,209,1.848,210,2.632,211,2.632,212,2.632,213,2.632,214,1.192,218,1.579,220,1.53,221,2.421,222,1.848,223,2.548,420,1.742,431,2.572,462,2.424,473,3.63,475,4.609,512,2.421,622,3.362,623,3.362,624,2.113,625,3.362,626,3.362,627,3.362,661,2.24,683,2.548,684,4.277,685,3.002,686,3.002,687,4.277,688,3.002,689,3.002,690,3.002,691,4.277,692,3.002,693,3.002,694,3.002,695,4.277,696,3.002,697,3.63,698,3.002,699,4.277,700,3.002,701,4.277,702,3.002,703,3.002,704,3.002,705,3.002,706,3.002,707,4.277,708,4.277,709,3.63,710,4.277,711,3.002,712,2.548,713,3.002,714,3.002,715,3.002,716,3.002]],["title/controllers/LancamentoController.html",[33,2.333,74,1.209]],["body/controllers/LancamentoController.html",[14,0.025,16,2.771,21,0.185,22,0.185,23,0.161,25,0.326,28,1.32,33,2.822,34,0.456,35,0.844,54,1.554,58,3.091,59,2.179,61,2.469,70,0.185,71,0.104,72,0.014,73,0.014,74,1.017,77,1.646,79,2.367,82,0.185,83,1.462,84,2.355,86,0.982,87,0.561,95,2.249,96,2.249,102,1.646,103,0.437,104,1.646,105,1.646,108,1.462,109,0.956,110,1.083,111,0.613,113,2.265,115,0.956,116,1.863,145,2.678,156,1.514,160,1.038,161,0.508,172,1.078,180,0.58,220,1.282,231,2.19,234,2.252,235,1.454,247,1.232,254,3.633,256,2.573,257,1.79,258,1.79,259,1.79,262,0.956,263,1.155,266,1.234,267,1.155,268,1.646,280,1.661,281,2.27,282,2.252,288,1.234,307,2.035,333,2.035,334,2.221,339,2.035,347,1.415,350,2.035,351,0.945,353,1.523,355,2.035,356,1.289,357,1.462,374,1.554,387,2.035,388,1.007,397,1.083,398,1.32,503,2.573,506,2.179,507,3.303,509,2.367,510,2.469,512,3.929,513,1.79,514,1.963,521,2.179,523,1.963,525,1.963,526,1.963,527,2.822,530,1.963,536,1.963,537,1.963,538,2.179,539,2.179,540,2.469,541,1.963,542,1.963,543,2.179,544,2.469,545,2.179,546,2.179,614,3.013,620,3.209,636,3.209,717,2.469,718,4.181,719,3.549,720,2.909,721,2.909,722,2.909,723,4.181,724,2.909,725,2.909,726,2.909,727,4.181,728,3.133,729,2.573,730,2.367,731,3.549,732,2.909,733,2.469,734,2.909,735,2.909,736,2.909,737,2.909,738,2.909,739,2.909]],["title/injectables/LancamentoService.html",[16,1.956,136,1.136]],["body/injectables/LancamentoService.html",[14,0.025,16,1.677,21,0.118,22,0.118,23,0.102,25,0.287,34,0.374,35,0.537,37,0.9,54,1.346,58,2.826,59,1.386,70,0.118,71,0.066,72,0.01,73,0.01,82,0.118,83,1.036,84,2.226,87,0.514,95,2.077,96,2.077,108,1.481,109,0.973,110,1.103,111,0.589,113,2.01,115,0.608,116,1.982,134,2.091,135,0.969,136,0.973,137,0.969,139,1.683,148,0.915,156,1.332,160,1.296,161,0.466,172,0.9,180,0.633,214,0.735,220,1.174,231,1.551,234,2.063,235,1.332,247,1.103,262,0.608,263,0.735,266,1.256,267,1.177,280,2.359,281,2.097,282,2.316,288,1.256,307,2.778,317,2.915,318,2.94,329,2.94,333,1.442,334,1.344,337,1.999,338,1.823,339,1.442,341,1.139,342,3.322,345,1.823,346,1.442,347,1.442,350,1.442,351,0.67,353,1.551,355,1.442,361,2.218,369,1.999,372,1.823,374,1.616,384,1.823,387,1.442,388,0.714,395,1.139,397,1.935,398,0.839,415,3.441,416,2.864,420,1.887,422,3.713,423,3.59,424,3.59,425,1.139,426,1.047,427,1.248,428,3.59,429,3.59,430,2.59,431,2.359,432,2.097,433,2.28,434,1.823,438,1.677,440,1.139,441,3.426,442,2.607,443,3.044,444,1.248,445,1.248,448,1.248,449,1.823,450,1.139,451,2.607,452,2.28,453,1.823,462,0.9,463,2.22,509,1.677,512,3.855,519,1.823,549,4.409,559,1.248,560,1.386,563,1.57,564,2.515,574,1.57,575,1.57,576,1.57,577,1.57,579,1.57,580,1.57,581,1.57,582,1.57,583,1.57,587,1.57,588,2.515,589,2.22,590,1.57,614,2.607,620,2.624,622,1.248,623,3.128,624,0.784,625,1.248,626,1.248,627,1.248,636,2.624,719,2.515,729,1.823,730,3.151,733,1.57,740,1.57,741,1.85,742,1.85,743,1.85,744,3.934,745,2.962,746,1.85,747,1.85,748,1.85,749,1.85,750,1.85,751,1.85,752,2.962,753,1.85,754,2.962,755,1.85,756,2.962,757,1.85,758,2.962,759,1.85,760,2.962,761,1.85,762,2.962,763,1.85,764,2.962,765,1.85,766,1.85,767,1.85,768,1.85,769,1.85,770,1.85,771,1.85,772,1.85]],["title/classes/LoginUserDto.html",[71,0.124,670,1.956]],["body/classes/LoginUserDto.html",[14,0.025,21,0.244,22,0.244,23,0.213,25,0.213,34,0.365,48,0.986,70,0.383,71,0.224,72,0.017,73,0.017,81,2.654,82,0.244,86,0.878,87,0.501,91,2.013,103,0.577,111,0.61,115,2.278,147,1.527,152,2.013,153,1.074,156,0.986,161,0.454,172,0.878,180,0.73,215,2.918,216,1.527,218,1.637,220,0.869,232,1.36,247,1.163,351,0.869,356,0.926,363,2.933,364,2.572,365,2.759,366,2.969,374,1.116,388,1.221,408,2.013,421,1.744,464,1.63,591,1.187,593,1.187,597,1.432,598,1.432,624,1.63,634,2.176,648,2.969,651,1.871,652,3.209,653,2.933,659,2.366,660,2.595,661,2.013,662,2.869,663,2.366,664,2.366,665,1.871,666,2.595,667,2.595,668,2.595,669,2.595,670,2.869,671,2.869,672,1.871,673,2.595,773,5.068,774,3.845,775,3.845]],["title/entities/Notification.html",[50,1.956,148,1.067]],["body/entities/Notification.html",[14,0.025,21,0.218,22,0.218,23,0.19,25,0.19,34,0.415,48,1.724,50,2.66,70,0.218,71,0.168,72,0.016,73,0.016,82,0.299,86,1.125,87,0.642,103,0.516,134,2.163,148,1.061,149,1.799,151,2.892,153,0.996,154,2.43,155,2.805,156,1.373,158,2.43,159,2.43,160,1.135,161,0.615,162,3.26,163,2.115,164,2.892,165,3.832,166,3.259,167,2.892,169,2.115,170,2.892,172,0.998,173,2.115,175,3.544,176,3.832,177,2.892,178,2.892,180,0.625,181,3.296,185,2.115,186,2.892,187,3.544,188,2.892,190,2.319,191,3.521,192,3.171,193,3.886,195,3.886,196,3.171,199,3.544,201,2.892,202,2.892,203,2.892,204,2.892,205,2.319,207,3.711,208,2.892,209,2.115,210,2.892,211,2.892,212,2.892,213,2.892,214,1.364,215,2.132,216,1.364,217,2.574,218,1.452,220,1.467,221,1.945,222,2.115,235,1.477,310,2.574,416,1.559,431,1.866,432,2.557,480,3.521,640,2.892,776,2.916,777,3.436,778,3.436,779,4.699,780,3.436,781,3.436,782,3.436,783,3.436,784,3.436,785,4.699,786,3.436,787,4.699,788,4.699,789,4.699,790,3.436,791,3.436,792,3.436,793,3.436]],["title/controllers/NotificationController.html",[31,2.333,74,1.209]],["body/controllers/NotificationController.html",[14,0.025,17,2.594,21,0.165,22,0.165,23,0.143,25,0.325,28,1.177,31,2.596,34,0.443,35,0.753,50,3.322,51,1.944,53,2.202,70,0.165,71,0.093,72,0.013,73,0.013,74,0.907,77,1.468,79,2.177,82,0.165,83,1.345,84,2.387,86,1.017,87,0.581,95,2.294,96,2.294,102,1.468,103,0.389,104,1.468,105,1.468,108,1.345,109,0.852,110,0.966,111,0.614,113,2.293,115,0.852,116,1.928,156,1.175,160,1.305,161,0.508,172,1.045,180,0.698,220,1.282,232,1.006,234,2.252,235,1.454,247,1.218,254,3.71,256,2.367,257,2.367,258,1.597,259,1.597,262,0.852,263,1.03,266,1.1,267,2.15,268,1.468,280,1.03,281,1.631,282,2.331,288,1.1,307,1.872,333,1.872,334,2.3,339,1.872,347,1.262,350,1.872,351,0.869,353,1.359,355,1.872,356,1.366,357,2.108,361,3.157,374,1.646,384,1.597,387,1.872,388,0.926,397,0.966,398,1.177,503,2.367,506,1.944,507,3.093,509,2.177,513,1.597,514,1.751,519,2.367,523,1.751,525,1.751,526,1.751,527,2.596,530,1.751,536,1.751,537,1.751,538,1.944,541,1.751,542,1.751,543,1.944,545,1.944,546,1.944,638,3.064,640,4.202,649,3.064,730,3.546,731,5.117,794,2.202,795,2.882,796,3.421,797,3.265,798,2.594,799,2.202,800,2.594,801,2.594,802,2.594,803,2.594,804,2.594,805,2.594,806,2.594,807,5.117,808,2.202,809,2.594,810,2.594,811,3.891,812,2.594,813,2.202,814,2.594,815,2.594,816,2.594,817,2.202,818,2.594,819,2.594,820,2.594,821,2.594,822,2.594,823,2.594,824,2.594,825,2.594,826,2.594]],["title/injectables/NotificationService.html",[17,1.956,136,1.136]],["body/injectables/NotificationService.html",[14,0.025,17,1.765,21,0.125,22,0.125,23,0.109,25,0.281,34,0.383,35,0.573,37,0.96,50,3.361,51,1.478,70,0.125,71,0.071,72,0.011,73,0.011,82,0.125,83,1.09,84,2.297,87,0.546,95,2.17,96,2.17,108,1.536,110,1.161,111,0.568,113,1.895,115,0.648,116,2.039,134,2.013,135,1.033,136,1.024,137,1.033,139,1.745,148,0.609,154,1.415,156,1.304,158,0.895,159,0.895,160,1.299,161,0.478,172,0.923,180,0.644,214,0.783,220,1.204,231,2.892,232,0.872,234,2.115,235,1.366,247,1.121,262,0.648,263,0.783,266,1.322,267,1.238,268,1.765,280,2.399,281,2.157,282,2.115,288,0.837,307,1.517,317,2.892,318,3.015,329,3.015,333,1.517,334,1.415,337,2.104,338,1.919,339,1.517,341,1.214,342,3.399,345,1.919,346,1.517,347,1.517,350,1.517,351,0.705,353,1.633,355,1.517,369,2.104,371,2.138,372,1.919,374,1.275,384,1.919,387,1.517,388,0.751,395,1.214,397,2.057,398,0.895,415,3.504,416,2.816,420,1.863,422,3.82,423,3.499,424,3.499,425,1.214,426,1.116,428,3.499,429,3.499,430,2.789,431,2.258,432,2.342,433,2.704,434,1.919,436,1.478,438,1.765,439,1.674,440,1.214,441,3.399,442,2.379,443,2.945,444,1.331,445,1.331,448,1.331,449,1.919,450,1.214,451,2.704,452,2.379,453,1.919,509,3.295,519,2.704,559,1.331,560,1.478,573,2.646,638,2.708,640,4.135,649,2.708,730,2.879,744,3.729,796,2.965,797,2.646,807,5.127,808,2.646,811,3.281,813,1.674,827,1.674,828,1.973,829,1.973,830,1.973,831,1.973,832,1.973,833,1.973,834,1.973,835,3.118,836,1.973,837,1.973,838,1.973,839,1.973,840,3.866,841,3.866,842,1.973,843,1.973]],["title/classes/ResponseDto.html",[71,0.124,397,1.287]],["body/classes/ResponseDto.html",[14,0.025,21,0.249,22,0.249,23,0.217,25,0.217,27,4.361,34,0.37,70,0.249,71,0.141,72,0.017,73,0.017,82,0.249,86,1.053,87,0.624,92,2.908,103,0.589,108,2.003,111,0.612,139,2.04,143,3.849,145,2.331,147,2.04,153,1.089,161,0.545,180,0.557,218,1.629,262,1.882,263,1.559,313,4.361,346,2.5,397,1.914,415,2.999,416,2.331,420,2.003,430,2.999,431,1.559,432,2.429,591,1.212,593,1.212,616,3.467,643,3.467,645,3.467,646,3.467,656,3.332,677,5.792,678,4.361,679,4.361,680,5.491,681,4.361,682,4.361,729,3.162,844,5.491,845,5.138,846,4.361,847,5.138,848,5.138,849,5.138,850,5.138,851,5.138,852,5.138,853,5.138,854,5.138,855,5.138,856,5.138,857,3.925,858,3.925,859,3.925,860,3.925,861,3.925,862,3.925]],["title/classes/SignInDto.html",[71,0.124,244,2.333]],["body/classes/SignInDto.html",[14,0.024,21,0.301,22,0.301,23,0.262,25,0.262,34,0.417,70,0.301,71,0.208,72,0.02,73,0.02,81,3.033,82,0.301,86,1.004,87,0.573,103,0.712,111,0.519,153,1.228,161,0.519,180,0.706,215,2.836,216,1.884,218,1.506,232,1.292,244,3.908,247,1.075,364,2.627,365,2.818,366,3.033,383,4.684,591,1.465,593,1.465,641,3.554,642,4.026,648,3.033,653,3.042,654,4.026,662,3.278,863,5.306,864,5.791,865,4.744]],["title/classes/UpdateAuthenticationDto.html",[71,0.124,385,2.127]],["body/classes/UpdateAuthenticationDto.html",[14,0.025,21,0.306,22,0.306,23,0.267,25,0.267,34,0.421,48,1.615,49,2.968,70,0.372,71,0.21,72,0.02,73,0.02,103,0.724,111,0.619,152,2.6,157,3.063,160,1.022,180,0.634,218,1.577,232,0.957,247,1.169,249,2.729,348,2.968,351,1.09,356,1.161,357,1.686,385,3.6,388,1.409,591,1.489,592,3.613,593,1.489,597,1.796,598,2.179,599,4.965]],["title/classes/UpdateContaDto.html",[71,0.124,522,1.956]],["body/classes/UpdateContaDto.html",[14,0.025,21,0.27,22,0.27,23,0.235,25,0.235,34,0.306,54,1.973,70,0.344,71,0.194,72,0.018,73,0.018,82,0.27,86,0.737,87,0.42,103,0.638,111,0.627,139,2.362,153,1.146,159,1.928,160,1.261,161,0.381,172,1.12,180,0.679,218,1.666,232,0.844,235,1.387,247,1.104,351,0.961,356,1.433,357,1.891,374,1.234,388,1.303,420,1.486,462,2.068,464,2.294,465,2.868,466,2.868,467,2.868,468,2.868,505,2.406,522,3.061,591,1.313,593,1.313,597,1.583,598,2.014,600,4.052,602,2.868,605,5.315,606,3.185,607,3.608,608,4.591,609,3.608,611,3.608,614,2.616,615,3.608,616,2.868,617,3.608,619,4.591,866,4.251]],["title/classes/UpdateLancamentoDto.html",[71,0.124,636,1.956]],["body/classes/UpdateLancamentoDto.html",[14,0.025,21,0.273,22,0.273,23,0.237,25,0.237,34,0.309,54,1.246,70,0.346,71,0.195,72,0.018,73,0.018,82,0.273,86,0.744,87,0.425,103,0.644,111,0.621,153,1.153,160,1.267,161,0.385,162,2.248,172,0.943,180,0.739,218,1.679,235,1.396,247,1.109,351,0.97,356,1.439,357,1.903,371,2.089,388,1.311,420,1.903,462,2.089,464,1.82,512,3.75,591,1.325,593,1.325,597,1.599,598,2.027,602,2.897,620,2.43,621,4.077,622,3.673,623,2.897,624,1.82,625,2.897,626,2.897,627,3.673,628,3.643,629,3.643,631,3.216,632,3.643,633,3.643,634,2.43,635,3.643,636,3.08,637,4.619,867,4.292]],["title/classes/UpdateNotificationDto.html",[71,0.124,649,1.956]],["body/classes/UpdateNotificationDto.html",[14,0.025,21,0.29,22,0.29,23,0.252,25,0.252,34,0.407,70,0.359,71,0.22,72,0.019,73,0.019,82,0.29,86,0.791,87,0.451,103,0.685,111,0.623,153,1.198,159,2.07,160,1.302,161,0.409,172,0.791,180,0.666,215,2.565,216,1.812,218,1.59,232,0.905,235,1.45,247,1.141,351,1.031,356,1.48,357,1.977,374,1.324,388,1.362,416,2.07,432,1.934,591,1.409,593,1.409,597,1.699,598,2.106,638,2.582,639,4.236,640,4.063,643,3.078,645,3.078,646,3.078,647,3.872,648,2.961,649,3.2,650,4.799,868,4.562]],["title/classes/UpdateUserDto.html",[71,0.124,665,1.682]],["body/classes/UpdateUserDto.html",[14,0.025,21,0.248,22,0.248,23,0.216,25,0.216,34,0.368,48,1.001,70,0.385,71,0.226,72,0.017,73,0.017,81,2.043,82,0.248,86,0.676,87,0.386,91,2.68,103,0.586,111,0.616,115,2.256,147,2.032,152,1.55,153,1.085,156,1.001,161,0.35,172,0.887,180,0.714,215,2.93,216,1.55,218,1.654,220,0.882,232,1.363,247,1.168,351,0.882,356,0.94,363,2.49,364,2.322,365,2.49,366,2.68,374,1.133,388,1.375,408,2.043,421,2.591,464,1.655,591,1.205,593,1.205,597,1.453,598,1.906,624,1.655,634,2.209,648,2.99,651,1.899,652,2.897,653,2.49,659,2.401,660,2.633,661,2.043,662,2.897,663,2.401,664,2.401,665,2.49,666,3.454,667,3.454,668,3.454,669,3.454,670,2.209,671,2.897,672,1.899,673,2.633,869,3.902]],["title/classes/UpdateUserPhotoDto.html",[71,0.124,672,1.682]],["body/classes/UpdateUserPhotoDto.html",[14,0.025,21,0.242,22,0.242,23,0.211,25,0.211,34,0.363,48,0.979,70,0.382,71,0.224,72,0.017,73,0.017,81,1.999,82,0.242,86,0.874,87,0.499,91,1.999,103,0.573,111,0.618,115,2.276,147,1.516,152,1.516,153,1.069,156,1.449,161,0.452,172,0.979,180,0.729,215,2.912,216,1.516,218,1.659,220,0.863,232,1.367,247,1.16,351,0.863,356,1.215,363,2.454,364,2.288,365,2.454,366,2.641,374,1.464,388,1.361,408,1.999,421,1.732,464,1.618,591,1.179,593,1.179,597,1.422,598,1.422,624,2.396,634,2.16,648,2.958,651,1.857,652,3.197,653,2.454,659,2.349,660,2.576,661,1.999,662,2.855,663,2.349,664,2.349,665,1.857,666,2.576,667,2.576,668,2.576,669,2.576,670,2.16,671,3.401,672,2.454,673,3.404,870,3.817,871,3.817]],["title/entities/User.html",[48,0.886,148,1.067]],["body/entities/User.html",[14,0.025,21,0.185,22,0.185,23,0.161,25,0.161,34,0.385,48,1.073,54,1.714,70,0.185,71,0.15,72,0.014,73,0.014,82,0.185,86,1.141,87,0.651,103,0.437,134,2.258,147,1.662,148,0.899,149,1.525,151,2.575,153,0.887,154,2.222,155,2.565,156,1.256,158,2.222,160,1.038,161,0.618,162,3.092,163,1.792,164,2.575,165,3.634,166,3.342,167,2.575,169,1.792,170,2.575,172,0.928,173,1.792,175,3.296,176,3.296,177,2.575,178,3.015,180,0.698,181,3.744,185,1.792,186,2.575,187,3.296,188,2.575,192,2.824,193,3.614,195,2.824,199,3.634,201,2.575,202,3.744,203,2.575,204,3.015,205,1.965,207,3.902,208,2.575,209,1.792,210,2.575,211,2.575,212,1.792,213,1.792,214,1.156,216,1.156,218,1.527,220,1.513,221,1.648,222,1.792,232,0.831,235,1.073,363,2.384,408,2.565,420,1.018,421,2.222,426,2.369,431,2.345,469,3.552,477,2.472,479,3.552,480,3.135,481,3.552,483,3.552,498,3.552,520,3.015,624,2.077,653,2.384,661,2.191,662,2.369,663,1.792,664,1.792,697,3.552,712,2.472,872,2.472,873,2.912,874,4.185,875,2.912,876,2.912,877,2.912,878,4.185,879,2.912,880,2.912,881,2.912,882,4.185,883,2.912,884,5.355,885,2.912,886,2.912,887,4.185,888,4.185,889,2.912,890,2.912,891,4.185,892,2.912,893,2.912,894,2.912,895,4.898,896,2.912,897,2.912,898,4.898,899,2.912,900,2.912,901,2.912,902,2.912,903,2.912,904,2.912,905,2.912,906,2.912,907,2.912,908,2.912,909,2.912,910,2.912,911,2.912,912,2.912]],["title/controllers/UserController.html",[30,2.333,74,1.209]],["body/controllers/UserController.html",[13,2.427,14,0.025,21,0.168,22,0.168,23,0.146,25,0.216,28,1.2,30,2.632,34,0.445,35,0.768,47,2.244,48,1.614,49,1.627,70,0.168,71,0.095,72,0.013,73,0.013,74,0.925,77,1.497,79,2.208,82,0.168,83,1.364,84,2.417,86,1.05,87,0.6,95,2.335,96,2.335,102,1.497,103,0.397,104,1.497,105,1.497,108,1.364,109,0.869,110,0.985,111,0.459,113,2.305,115,0.869,116,1.991,156,1.464,161,0.529,172,0.989,180,0.641,220,1.335,231,2.679,232,1.267,234,2.345,235,1.514,247,1.185,254,3.634,256,2.401,257,1.627,258,1.627,259,1.627,262,0.869,263,1.05,266,1.121,267,1.05,268,2.208,280,2.032,281,2.57,282,2.407,288,1.121,307,1.898,333,1.898,334,2.321,339,1.898,347,1.287,350,1.898,355,1.898,356,1.232,361,2.679,363,2.778,364,1.77,365,1.898,371,2.49,374,1.485,387,2.49,397,0.985,398,1.2,503,2.401,507,3.128,513,1.627,514,1.784,521,1.981,523,1.784,525,1.784,526,1.784,527,2.632,530,1.784,536,1.784,537,1.784,539,1.981,541,1.784,542,1.784,651,2.655,652,1.497,665,2.655,671,2.896,672,2.655,728,2.923,729,2.401,795,2.923,796,3.453,799,2.244,817,2.244,913,2.244,914,3.311,915,3.311,916,2.644,917,2.644,918,6.061,919,2.244,920,2.644,921,2.644,922,2.244,923,3.901,924,2.644,925,2.244,926,2.644,927,2.644,928,2.644,929,2.644,930,3.833,931,2.644,932,2.644,933,2.644,934,2.644,935,2.644,936,2.644,937,2.644,938,2.644,939,2.644,940,2.644,941,2.644,942,2.644,943,2.644,944,2.644,945,2.644,946,2.644,947,2.644,948,2.644,949,2.644,950,2.644,951,2.644]],["title/injectables/UserService.html",[13,1.81,136,1.136]],["body/injectables/UserService.html",[13,1.187,14,0.025,21,0.085,22,0.085,23,0.074,25,0.273,34,0.341,35,0.388,37,0.65,48,1.566,49,0.823,54,1.226,70,0.085,71,0.048,72,0.008,73,0.01,82,0.085,83,0.792,84,2.307,87,0.544,95,2.184,96,2.184,108,1.215,109,0.744,110,0.844,111,0.532,113,2.006,115,0.439,116,2.038,134,2.153,135,1.187,136,0.744,137,0.7,145,1.576,147,0.531,154,1.338,156,1.602,158,1.028,160,0.625,161,0.483,172,1.002,180,0.662,214,0.531,220,1.325,231,2.479,232,1.376,234,2.139,235,1.381,247,0.722,248,1.698,262,0.439,263,0.531,266,0.961,267,0.9,280,2.481,281,2.008,282,2.264,288,0.961,297,1.923,307,2.055,317,2.752,318,2.548,329,2.548,334,1.028,338,1.395,341,0.823,342,2.914,345,1.395,346,1.69,351,0.302,356,0.546,361,1.819,363,3.039,364,1.576,365,1.69,366,2.479,371,2.484,372,1.395,374,1.226,388,0.546,390,3.3,395,0.823,397,2.293,398,0.606,399,1.135,400,1.002,403,2.504,405,1.923,407,1.923,408,1.545,409,1.923,415,3.248,416,2.72,420,1.574,421,0.606,422,3.65,423,3.387,424,3.869,425,2.138,426,1.966,427,0.902,428,3.142,429,3.387,430,2.357,431,2.139,432,1.909,433,1.395,434,2.393,438,2.2,440,0.823,441,3.142,442,1.815,443,2.77,449,2.393,450,0.823,451,2.138,452,1.815,453,1.395,460,1.923,503,1.395,513,1.395,520,0.823,559,1.529,624,0.567,631,2.21,651,2.19,653,2.401,665,2.19,671,1.966,672,2.19,709,2.504,728,1.698,729,2.138,730,3.049,795,1.698,796,2.344,914,1.923,915,1.923,919,1.923,922,1.923,925,1.923,930,2.602,952,1.135,953,2.266,954,2.266,955,2.266,956,2.266,957,1.337,958,2.266,959,1.337,960,2.266,961,2.266,962,2.266,963,1.337,964,2.266,965,2.266,966,1.337,967,4.734,968,1.337,969,2.266,970,1.337,971,1.337,972,1.337,973,2.266,974,2.266,975,1.337,976,2.266,977,1.337,978,3.473,979,3.473,980,2.266,981,1.337,982,2.266,983,1.337,984,2.266,985,4.501,986,1.337,987,2.266,988,2.266,989,1.337,990,2.266,991,1.337,992,1.337,993,1.337,994,2.266,995,3.473,996,2.266,997,2.266,998,1.337,999,1.337,1000,1.337,1001,1.337,1002,3.473,1003,1.337,1004,1.337,1005,1.337,1006,1.337,1007,1.337,1008,2.266,1009,1.337,1010,1.337,1011,2.266,1012,2.266,1013,2.266,1014,1.337,1015,1.337,1016,1.337,1017,2.266,1018,2.949,1019,1.337,1020,1.337,1021,2.266,1022,1.337,1023,1.337,1024,1.337,1025,1.337,1026,1.337,1027,1.337,1028,2.266,1029,2.266,1030,1.337]],["title/coverage.html",[1031,4.005]],["body/coverage.html",[6,2.269,12,2.087,13,1.931,14,0.025,15,2.087,16,2.087,17,2.087,23,0.204,29,2.488,30,2.488,31,2.488,32,2.488,33,2.488,40,2.488,44,2.269,48,0.946,50,2.087,54,1.07,58,1.931,71,0.248,72,0.017,73,0.017,74,2.223,75,2.488,76,3.13,100,2.087,126,2.763,136,2.089,138,3.13,148,1.908,150,3.13,161,0.331,224,3.13,244,2.488,260,2.488,262,1.211,284,2.488,286,3.13,317,1.931,332,3.13,348,2.269,385,2.269,397,1.373,461,3.13,501,3.13,505,2.087,522,2.087,547,3.13,589,2.763,592,3.693,593,2.14,600,3.693,620,2.087,621,3.693,636,2.087,638,2.087,639,3.693,649,2.087,651,1.794,652,3.355,665,1.794,670,2.087,672,1.794,674,2.488,676,3.13,683,3.13,717,3.13,740,3.13,776,3.13,794,3.13,827,3.13,844,3.13,863,3.13,872,3.13,913,3.13,952,3.13,1031,3.13,1032,3.688,1033,3.688,1034,7.235,1035,5.553,1036,5.553,1037,5.928,1038,5.553,1039,3.13,1040,3.13,1041,5.553,1042,3.13,1043,6.748,1044,6.357,1045,5.928,1046,4.93,1047,3.688,1048,3.688,1049,4.184,1050,3.13,1051,3.688,1052,3.688,1053,3.688]],["title/dependencies.html",[3,2.559,1054,2.449]],["body/dependencies.html",[3,2.873,14,0.025,35,1.355,37,2.271,39,3.15,71,0.205,72,0.019,73,0.019,103,0.7,130,3.962,135,2.444,214,1.854,216,1.854,249,2.642,312,4.867,400,3.497,1055,6.207,1056,4.667,1057,4.667,1058,4.667,1059,4.667,1060,5.734,1061,4.667,1062,4.667,1063,4.667,1064,4.667,1065,4.667,1066,4.667,1067,4.667,1068,4.667,1069,4.667,1070,4.667,1071,4.667,1072,4.667,1073,4.667,1074,4.667,1075,4.667,1076,4.667,1077,4.667,1078,4.667,1079,3.962,1080,4.667,1081,4.667,1082,4.667,1083,6.474,1084,4.667,1085,4.667,1086,4.667,1087,4.667,1088,4.667,1089,4.667,1090,4.667,1091,4.667,1092,4.667,1093,4.667,1094,4.667,1095,4.667,1096,4.667,1097,4.667,1098,4.667,1099,4.667,1100,4.667,1101,4.667,1102,4.667,1103,4.667]],["title/miscellaneous/functions.html",[1104,1.947,1105,3.529]],["body/miscellaneous/functions.html",[6,4.095,14,0.021,72,0.021,73,0.021,82,0.35,109,1.807,111,0.493,141,4.67,1050,4.67,1104,3.713,1105,4.67,1106,5.501,1107,5.501]],["title/index.html",[82,0.183,1108,2.886,1109,2.886]],["body/index.html",[14,0.024,72,0.02,73,0.02,92,3.678,109,1.55,111,0.559,139,1.874,143,3.535,152,1.874,248,3.535,302,4.005,307,2.296,309,4.005,335,4.005,364,2.83,520,2.904,606,3.535,614,2.904,616,3.184,730,3.267,846,4.005,930,3.535,1079,5.294,1110,5.294,1111,4.718,1112,4.718,1113,4.718,1114,4.718,1115,4.718,1116,4.718,1117,4.718,1118,4.718,1119,4.718,1120,4.718,1121,4.718,1122,4.718,1123,4.718,1124,4.718,1125,5.772,1126,4.718,1127,4.718,1128,4.718,1129,4.718,1130,4.718,1131,4.718,1132,4.718,1133,4.718,1134,5.772,1135,4.718,1136,4.718,1137,6.237,1138,5.772,1139,4.718,1140,4.718,1141,4.718,1142,4.718,1143,4.718,1144,4.718,1145,4.718,1146,4.718,1147,4.718,1148,4.718,1149,4.005,1150,4.718,1151,4.005,1152,4.718]],["title/modules.html",[2,2.904]],["body/modules.html",[1,3.393,2,3.393,14,0.021,72,0.021,73,0.021,118,3.72,1153,6.331,1154,6.331,1155,6.331,1156,6.331]],["title/overview.html",[1157,4.005]],["body/overview.html",[0,2.925,1,4.409,2,2.925,3,2.925,4,3.56,5,3.56,6,2.925,7,3.56,8,3.56,9,4.034,10,4.034,11,4.034,12,3.893,13,3.602,14,0.024,15,3.541,16,3.541,17,3.541,18,4.344,19,3.56,20,3.56,28,2.156,72,0.02,73,0.02,100,3.541,118,4.585,119,4.034,120,4.034,137,2.489,149,2.489,284,3.207,591,1.467,659,3.568,661,2.489,674,3.207,1157,4.034,1158,5.798,1159,4.752,1160,4.752]],["title/properties.html",[153,0.881,1054,2.449]],["body/properties.html",[14,0.024,25,0.302,72,0.021,73,0.021,92,3.088,111,0.489,153,1.156,1110,4.631,1149,4.631,1151,4.631,1161,5.456,1162,5.456,1163,5.456,1164,5.456,1165,5.456]],["title/miscellaneous/variables.html",[1104,1.947,1166,3.529]],["body/miscellaneous/variables.html",[14,0.024,40,3.87,48,1.197,65,3.497,72,0.019,73,0.019,82,0.297,111,0.557,116,1.533,126,4.296,134,2.127,139,1.854,145,2.118,149,2.444,157,2.444,161,0.557,166,3.513,231,2.444,232,0.926,236,3.962,237,3.962,249,2.642,277,3.962,323,3.962,346,2.271,367,3.962,383,3.497,431,2.465,653,2.271,1039,3.962,1040,4.867,1042,4.867,1049,3.962,1104,3.15,1166,3.962,1167,4.667,1168,5.734,1169,6.207,1170,4.667,1171,4.667,1172,5.734,1173,4.667,1174,4.667,1175,4.667,1176,4.667,1177,4.667,1178,4.667,1179,4.667,1180,4.667,1181,4.667,1182,4.667,1183,4.667,1184,4.667,1185,4.667,1186,4.667,1187,4.667,1188,4.667,1189,4.667,1190,4.667,1191,4.667,1192,4.667]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IResponse.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":438,"title":{},"body":{"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["0.1.13",{"_index":1093,"title":{},"body":{"dependencies.html":{}}}],["0.11.0",{"_index":1072,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":1071,"title":{},"body":{"dependencies.html":{}}}],["0.3.17",{"_index":1103,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":1084,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":659,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"overview.html":{}}}],["1.0",{"_index":1162,"title":{},"body":{"properties.html":{}}}],["1.0.0",{"_index":1090,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":1069,"title":{},"body":{"dependencies.html":{}}}],["1.6.6",{"_index":1099,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1043,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":709,"title":{},"body":{"entities/Lancamento.html":{},"injectables/UserService.html":{}}}],["10.0.0",{"_index":1060,"title":{},"body":{"dependencies.html":{}}}],["10.1.0",{"_index":1058,"title":{},"body":{"dependencies.html":{}}}],["10.1.2",{"_index":1055,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1034,"title":{},"body":{"coverage.html":{}}}],["11/11",{"_index":1047,"title":{},"body":{"coverage.html":{}}}],["128",{"_index":888,"title":{},"body":{"entities/User.html":{}}}],["14",{"_index":1160,"title":{},"body":{"overview.html":{}}}],["14/14",{"_index":1048,"title":{},"body":{"coverage.html":{}}}],["16.10.16",{"_index":1082,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":661,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/Lancamento.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"overview.html":{}}}],["2.0.0",{"_index":1087,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1044,"title":{},"body":{"coverage.html":{}}}],["256",{"_index":899,"title":{},"body":{"entities/User.html":{}}}],["256})@minlength(4",{"_index":885,"title":{},"body":{"entities/User.html":{}}}],["3",{"_index":1152,"title":{},"body":{"index.html":{}}}],["3.0.0",{"_index":1095,"title":{},"body":{"dependencies.html":{}}}],["3.2.3",{"_index":1056,"title":{},"body":{"dependencies.html":{}}}],["3.5.1",{"_index":1078,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1045,"title":{},"body":{"coverage.html":{}}}],["3600s",{"_index":69,"title":{},"body":{"modules/AplicativoModule.html":{}}}],["4.0.0",{"_index":1088,"title":{},"body":{"dependencies.html":{}}}],["4.1.2",{"_index":1102,"title":{},"body":{"dependencies.html":{}}}],["4.17.15",{"_index":1076,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1035,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":1159,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":1064,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1065,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1046,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1158,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":1036,"title":{},"body":{"coverage.html":{}}}],["64",{"_index":633,"title":{},"body":{"classes/CreateLancamentoDto.html":{},"classes/UpdateLancamentoDto.html":{}}}],["7.1.2",{"_index":1062,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1097,"title":{},"body":{"dependencies.html":{}}}],["8.2.0",{"_index":1074,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":1037,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":1038,"title":{},"body":{"coverage.html":{}}}],["__dirname",{"_index":1184,"title":{},"body":{"miscellaneous/variables.html":{}}}],["access",{"_index":325,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["access_token",{"_index":410,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["account",{"_index":502,"title":{},"body":{"controllers/ContaController.html":{}}}],["aceder",{"_index":299,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["acesso",{"_index":367,"title":{},"body":{"injectables/AuthenticationService.html":{},"miscellaneous/variables.html":{}}}],["action",{"_index":193,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["action'})@joincolumn({name",{"_index":194,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{}}}],["active",{"_index":421,"title":{},"body":{"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"injectables/ContaService.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["activo",{"_index":669,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{}}}],["activos",{"_index":973,"title":{},"body":{"injectables/UserService.html":{}}}],["actual",{"_index":617,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/UpdateContaDto.html":{}}}],["actualiza",{"_index":978,"title":{},"body":{"injectables/UserService.html":{}}}],["actualizado",{"_index":979,"title":{},"body":{"injectables/UserService.html":{}}}],["actualizar",{"_index":387,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{}}}],["actualização",{"_index":388,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"injectables/UserService.html":{}}}],["admin",{"_index":660,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{}}}],["alternativo",{"_index":744,"title":{},"body":{"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{}}}],["andre",{"_index":1164,"title":{},"body":{"properties.html":{}}}],["another",{"_index":203,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["ao",{"_index":1114,"title":{},"body":{"index.html":{}}}],["api",{"_index":92,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"interfaces/IResponse.html":{},"classes/ResponseDto.html":{},"index.html":{},"properties.html":{}}}],["apibearerauth",{"_index":254,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["apibearerauth()@delete",{"_index":799,"title":{},"body":{"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["apibearerauth()@delete(':uuid",{"_index":510,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{}}}],["apibearerauth()@get",{"_index":805,"title":{},"body":{"controllers/NotificationController.html":{}}}],["apibearerauth()@get('getall",{"_index":928,"title":{},"body":{"controllers/UserController.html":{}}}],["apibearerauth()@get('getallbyuserid/:id",{"_index":517,"title":{},"body":{"controllers/ContaController.html":{}}}],["apibearerauth()@get('getbyaccount/:id",{"_index":725,"title":{},"body":{"controllers/LancamentoController.html":{}}}],["apibearerauth()@get('getbyguid/:uuid",{"_index":803,"title":{},"body":{"controllers/NotificationController.html":{}}}],["apibearerauth()@get('getbyid/:id",{"_index":514,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["apibearerauth()@get('getnotificationstouser",{"_index":809,"title":{},"body":{"controllers/NotificationController.html":{}}}],["apibearerauth()@get('getuserphoto/:id",{"_index":926,"title":{},"body":{"controllers/UserController.html":{}}}],["apibearerauth()@get('me",{"_index":241,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apibearerauth()@post()@usepipes(new",{"_index":506,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{}}}],["apibearerauth()@put",{"_index":523,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["apibearerauth()@put('updateuserphoto",{"_index":933,"title":{},"body":{"controllers/UserController.html":{}}}],["apibearerauth()@useguards(authenticationguard)@get('profile",{"_index":229,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apiextramodels",{"_index":526,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["apiextramodels(conta",{"_index":531,"title":{},"body":{"controllers/ContaController.html":{}}}],["apiextramodels(lancamento",{"_index":735,"title":{},"body":{"controllers/LancamentoController.html":{}}}],["apiextramodels(notification",{"_index":814,"title":{},"body":{"controllers/NotificationController.html":{}}}],["apiextramodels(responsedto",{"_index":530,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["apiextramodels(user",{"_index":936,"title":{},"body":{"controllers/UserController.html":{}}}],["apiproperty",{"_index":218,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"entities/Lancamento.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{}}}],["apiproperty()@column('decimal",{"_index":706,"title":{},"body":{"entities/Lancamento.html":{}}}],["apiproperty()@column({name",{"_index":181,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["apiproperty()@isnotempty",{"_index":773,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["apiproperty()@isnotempty()@isemail",{"_index":654,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["apiproperty()@isnotempty()@isstring",{"_index":641,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["apiproperty()@isnotempty()@isstring()@minlength(4",{"_index":655,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@primarygeneratedcolumn({name",{"_index":173,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["apitags",{"_index":102,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["apitags('account",{"_index":529,"title":{},"body":{"controllers/ContaController.html":{}}}],["apitags('accounting",{"_index":734,"title":{},"body":{"controllers/LancamentoController.html":{}}}],["apitags('authentication",{"_index":264,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apitags('health",{"_index":106,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('notification",{"_index":815,"title":{},"body":{"controllers/NotificationController.html":{}}}],["apitags('user",{"_index":935,"title":{},"body":{"controllers/UserController.html":{}}}],["aplicativo",{"_index":27,"title":{},"body":{"modules/AplicativoModule.html":{},"classes/ResponseDto.html":{}}}],["aplicativo/aplicativo.module",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["aplicativomodule",{"_index":1,"title":{"modules/AplicativoModule.html":{}},"body":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["app.controller",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":101,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":75,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":118,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":100,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":678,"title":{},"body":{"interfaces/IResponse.html":{},"classes/ResponseDto.html":{}}}],["asc",{"_index":994,"title":{},"body":{"injectables/UserService.html":{}}}],["assigning",{"_index":322,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["async",{"_index":84,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["ativos",{"_index":974,"title":{},"body":{"injectables/UserService.html":{}}}],["atributos",{"_index":856,"title":{},"body":{"classes/ResponseDto.html":{}}}],["autenticado",{"_index":362,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["autenticar",{"_index":382,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["autenticação",{"_index":152,"title":{},"body":{"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"index.html":{}}}],["auth",{"_index":225,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authentication",{"_index":44,"title":{"entities/Authentication.html":{}},"body":{"modules/AplicativoModule.html":{},"entities/Authentication.html":{},"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["authenticationcontroller",{"_index":29,"title":{"controllers/AuthenticationController.html":{}},"body":{"modules/AplicativoModule.html":{},"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["authenticationguard",{"_index":260,"title":{"guards/AuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["authenticationservice",{"_index":12,"title":{"injectables/AuthenticationService.html":{}},"body":{"modules/AplicativoModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["author",{"_index":1163,"title":{},"body":{"properties.html":{}}}],["automático",{"_index":239,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["await",{"_index":282,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["b64_image",{"_index":697,"title":{},"body":{"entities/Lancamento.html":{},"entities/User.html":{}}}],["banco",{"_index":1192,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base",{"_index":632,"title":{},"body":{"classes/CreateLancamentoDto.html":{},"classes/UpdateLancamentoDto.html":{}}}],["base64",{"_index":673,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{}}}],["bcrypt",{"_index":400,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["bcrypt.hash(updateuserdto.password",{"_index":1009,"title":{},"body":{"injectables/UserService.html":{}}}],["bearer",{"_index":331,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["before",{"_index":904,"title":{},"body":{"entities/User.html":{}}}],["beforeinsert",{"_index":895,"title":{},"body":{"entities/User.html":{}}}],["biblioteca",{"_index":1128,"title":{},"body":{"index.html":{}}}],["body",{"_index":257,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":147,"title":{},"body":{"injectables/AppService.html":{},"guards/AuthenticationGuard.html":{},"entities/Conta.html":{},"classes/CreateUserDto.html":{},"interfaces/IResponse.html":{},"classes/LoginUserDto.html":{},"classes/ResponseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["broadcast",{"_index":789,"title":{},"body":{"entities/Notification.html":{}}}],["browse",{"_index":1156,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1153,"title":{},"body":{"modules.html":{}}}],["básico",{"_index":80,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["cache",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["canactivate",{"_index":287,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["canactivate(context",{"_index":294,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["cant",{"_index":443,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["carga",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["cascade",{"_index":480,"title":{},"body":{"entities/Conta.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["caso",{"_index":645,"title":{},"body":{"classes/CreateNotificationDto.html":{},"interfaces/IResponse.html":{},"classes/ResponseDto.html":{},"classes/UpdateNotificationDto.html":{}}}],["catch",{"_index":329,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["categorias",{"_index":622,"title":{},"body":{"classes/CreateLancamentoDto.html":{},"entities/Lancamento.html":{},"injectables/LancamentoService.html":{},"classes/UpdateLancamentoDto.html":{}}}],["cd",{"_index":1140,"title":{},"body":{"index.html":{}}}],["central",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["check",{"_index":1080,"title":{},"body":{"dependencies.html":{}}}],["checked",{"_index":1001,"title":{},"body":{"injectables/UserService.html":{}}}],["class",{"_index":71,"title":{"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{}},"body":{"modules/AplicativoModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":591,"title":{},"body":{"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"overview.html":{}}}],["cluster_aplicativomodule",{"_index":9,"title":{},"body":{"modules/AplicativoModule.html":{},"overview.html":{}}}],["cluster_aplicativomodule_exports",{"_index":10,"title":{},"body":{"modules/AplicativoModule.html":{},"overview.html":{}}}],["cluster_aplicativomodule_providers",{"_index":11,"title":{},"body":{"modules/AplicativoModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["cluster_appmodule_providers",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cod_account_id",{"_index":475,"title":{},"body":{"entities/Conta.html":{},"entities/Lancamento.html":{}}}],["cod_accounting_entry_id",{"_index":695,"title":{},"body":{"entities/Lancamento.html":{}}}],["cod_authentication_id",{"_index":174,"title":{},"body":{"entities/Authentication.html":{}}}],["cod_entry_type",{"_index":699,"title":{},"body":{"entities/Lancamento.html":{}}}],["cod_notification_id",{"_index":779,"title":{},"body":{"entities/Notification.html":{}}}],["cod_user_id",{"_index":195,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["column",{"_index":207,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["column('decimal",{"_index":714,"title":{},"body":{"entities/Lancamento.html":{}}}],["column({name",{"_index":163,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["columns",{"_index":898,"title":{},"body":{"entities/User.html":{}}}],["com",{"_index":248,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["comment",{"_index":176,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["compara",{"_index":987,"title":{},"body":{"injectables/UserService.html":{}}}],["compare",{"_index":399,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UserService.html":{}}}],["compare(pass",{"_index":404,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["compare(plain",{"_index":998,"title":{},"body":{"injectables/UserService.html":{}}}],["compodoc",{"_index":1129,"title":{},"body":{"index.html":{}}}],["compodocconfiguração",{"_index":1139,"title":{},"body":{"index.html":{}}}],["concebido",{"_index":1118,"title":{},"body":{"index.html":{}}}],["config/typeorm.config",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["configuração",{"_index":1191,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(hashedpassword",{"_index":1000,"title":{},"body":{"injectables/UserService.html":{}}}],["consolidado",{"_index":606,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/UpdateContaDto.html":{},"index.html":{}}}],["const",{"_index":280,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constante",{"_index":1172,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constructor",{"_index":108,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(jwtservice",{"_index":290,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["constructor(private",{"_index":114,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{}}}],["constructor(repository",{"_index":341,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["conta",{"_index":54,"title":{"entities/Conta.html":{}},"body":{"modules/AplicativoModule.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["conta.entity",{"_index":712,"title":{},"body":{"entities/Lancamento.html":{},"entities/User.html":{}}}],["conta.id",{"_index":716,"title":{},"body":{"entities/Lancamento.html":{}}}],["conta.id)@joincolumn({name",{"_index":686,"title":{},"body":{"entities/Lancamento.html":{}}}],["conta.user",{"_index":874,"title":{},"body":{"entities/User.html":{}}}],["contacontroller",{"_index":32,"title":{"controllers/ContaController.html":{}},"body":{"modules/AplicativoModule.html":{},"controllers/ContaController.html":{},"coverage.html":{}}}],["contaid",{"_index":623,"title":{},"body":{"classes/CreateLancamentoDto.html":{},"entities/Lancamento.html":{},"injectables/LancamentoService.html":{},"classes/UpdateLancamentoDto.html":{}}}],["contas",{"_index":520,"title":{},"body":{"controllers/ContaController.html":{},"injectables/ContaService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"index.html":{}}}],["contaservice",{"_index":15,"title":{"injectables/ContaService.html":{}},"body":{"modules/AplicativoModule.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"coverage.html":{},"overview.html":{}}}],["context",{"_index":300,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":314,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["contexto",{"_index":301,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["controlador",{"_index":79,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["controle",{"_index":1110,"title":{},"body":{"index.html":{},"properties.html":{}}}],["controller",{"_index":74,"title":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('account",{"_index":532,"title":{},"body":{"controllers/ContaController.html":{}}}],["controller('auth",{"_index":265,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["controller('entry",{"_index":736,"title":{},"body":{"controllers/LancamentoController.html":{}}}],["controller('health",{"_index":107,"title":{},"body":{"controllers/AppController.html":{}}}],["controller('notification",{"_index":816,"title":{},"body":{"controllers/NotificationController.html":{}}}],["controller('user",{"_index":937,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":28,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{},"overview.html":{}}}],["controllers/authentication.controller",{"_index":42,"title":{},"body":{"modules/AplicativoModule.html":{}}}],["controllers/conta.controller",{"_index":56,"title":{},"body":{"modules/AplicativoModule.html":{}}}],["controllers/lancamento.controller",{"_index":60,"title":{},"body":{"modules/AplicativoModule.html":{}}}],["controllers/notification.controller",{"_index":52,"title":{},"body":{"modules/AplicativoModule.html":{}}}],["controllers/user.controller",{"_index":46,"title":{},"body":{"modules/AplicativoModule.html":{}}}],["copy",{"_index":1142,"title":{},"body":{"index.html":{}}}],["correctamente",{"_index":99,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["coverage",{"_index":1031,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":333,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{}}}],["create(@body",{"_index":542,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["create(dto",{"_index":347,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{}}}],["createauthenticationdto",{"_index":348,"title":{"classes/CreateAuthenticationDto.html":{}},"body":{"injectables/AuthenticationService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/UpdateAuthenticationDto.html":{},"coverage.html":{}}}],["createcontadto",{"_index":505,"title":{"classes/CreateContaDto.html":{}},"body":{"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateContaDto.html":{},"classes/UpdateContaDto.html":{},"coverage.html":{}}}],["created",{"_index":442,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["createdat",{"_index":154,"title":{},"body":{"entities/Authentication.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"injectables/ContaService.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"injectables/NotificationService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["createforeignkeyconstraints",{"_index":481,"title":{},"body":{"entities/Conta.html":{},"entities/User.html":{}}}],["createlancamentodto",{"_index":620,"title":{"classes/CreateLancamentoDto.html":{}},"body":{"classes/CreateLancamentoDto.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/UpdateLancamentoDto.html":{},"coverage.html":{}}}],["createnotificationdto",{"_index":638,"title":{"classes/CreateNotificationDto.html":{}},"body":{"classes/CreateNotificationDto.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["createparamdecorator((data",{"_index":1170,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createuser",{"_index":953,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(createuserdto",{"_index":958,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto",{"_index":651,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":1024,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.name",{"_index":1023,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.role",{"_index":1025,"title":{},"body":{"injectables/UserService.html":{}}}],["credentials",{"_index":457,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["cria",{"_index":960,"title":{},"body":{"injectables/UserService.html":{}}}],["criar",{"_index":350,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{}}}],["criação",{"_index":351,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"injectables/UserService.html":{}}}],["criptografada",{"_index":392,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["crédito",{"_index":607,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/UpdateContaDto.html":{}}}],["créditos",{"_index":611,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/UpdateContaDto.html":{}}}],["current_timestamp(6",{"_index":188,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["código",{"_index":730,"title":{},"body":{"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["da",{"_index":139,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"classes/CreateContaDto.html":{},"interfaces/IResponse.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/UpdateContaDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["dados",{"_index":346,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"interfaces/IResponse.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["dat_created",{"_index":164,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["dat_date",{"_index":691,"title":{},"body":{"entities/Lancamento.html":{}}}],["dat_deleted",{"_index":170,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["dat_updated",{"_index":186,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["data",{"_index":420,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"interfaces/IResponse.html":{},"entities/Lancamento.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["database",{"_index":1182,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasource",{"_index":549,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{}}}],["date",{"_index":162,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"classes/CreateLancamentoDto.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"classes/UpdateLancamentoDto.html":{},"entities/User.html":{}}}],["date(dto.data",{"_index":756,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["de",{"_index":111,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IResponse.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["debug",{"_index":1187,"title":{},"body":{"miscellaneous/variables.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{},"overview.html":{}}}],["decorators",{"_index":86,"title":{},"body":{"controllers/AppController.html":{},"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":166,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":787,"title":{},"body":{"entities/Notification.html":{}}}],["defined",{"_index":87,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["definição",{"_index":1111,"title":{},"body":{"index.html":{}}}],["delete",{"_index":334,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete(':uuid",{"_index":544,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{}}}],["delete(@param('email",{"_index":950,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(@param('uuid",{"_index":545,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{}}}],["delete(email",{"_index":919,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete(uuid",{"_index":353,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["deleted",{"_index":452,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["deletedat",{"_index":155,"title":{},"body":{"entities/Authentication.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"injectables/ContaService.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["deletedatecolumn",{"_index":211,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["deletedatecolumn({name",{"_index":169,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["dependencia",{"_index":266,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependência",{"_index":112,"title":{},"body":{"controllers/AppController.html":{},"guards/AuthenticationGuard.html":{}}}],["desc",{"_index":560,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{}}}],["descricao",{"_index":462,"title":{},"body":{"entities/Conta.html":{},"injectables/ContaService.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"entities/Lancamento.html":{},"injectables/LancamentoService.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{}}}],["description",{"_index":25,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IResponse.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"properties.html":{}}}],["descrição",{"_index":602,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{}}}],["destinado",{"_index":1113,"title":{},"body":{"index.html":{}}}],["deve",{"_index":1130,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1032,"title":{},"body":{"coverage.html":{}}}],["documentação",{"_index":1125,"title":{},"body":{"index.html":{}}}],["dotenv",{"_index":1073,"title":{},"body":{"dependencies.html":{}}}],["dto",{"_index":247,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto.categorias",{"_index":760,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["dto.contaid",{"_index":764,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["dto.descricao",{"_index":564,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{}}}],["dto.image",{"_index":762,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["dto.message",{"_index":840,"title":{},"body":{"injectables/NotificationService.html":{}}}],["dto.message.length",{"_index":842,"title":{},"body":{"injectables/NotificationService.html":{}}}],["dto.nome",{"_index":562,"title":{},"body":{"injectables/ContaService.html":{}}}],["dto.password",{"_index":273,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["dto.saldoconsolidado",{"_index":572,"title":{},"body":{"injectables/ContaService.html":{}}}],["dto.saldocredito",{"_index":566,"title":{},"body":{"injectables/ContaService.html":{}}}],["dto.saldodebito",{"_index":568,"title":{},"body":{"injectables/ContaService.html":{}}}],["dto.saldofuturo",{"_index":570,"title":{},"body":{"injectables/ContaService.html":{}}}],["dto.tipolancamento",{"_index":752,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["dto.titulo",{"_index":754,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["dto.token",{"_index":412,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["dto.token.length",{"_index":447,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["dto.ts",{"_index":593,"title":{},"body":{"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"coverage.html":{}}}],["dto.ts:12",{"_index":603,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{}}}],["dto.ts:13",{"_index":596,"title":{},"body":{"classes/CreateAuthenticationDto.html":{}}}],["dto.ts:15",{"_index":642,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/SignInDto.html":{}}}],["dto.ts:16",{"_index":656,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ResponseDto.html":{}}}],["dto.ts:18",{"_index":601,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{}}}],["dto.ts:19",{"_index":594,"title":{},"body":{"classes/CreateAuthenticationDto.html":{}}}],["dto.ts:21",{"_index":644,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["dto.ts:22",{"_index":858,"title":{},"body":{"classes/ResponseDto.html":{}}}],["dto.ts:23",{"_index":865,"title":{},"body":{"classes/SignInDto.html":{}}}],["dto.ts:24",{"_index":610,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateUserDto.html":{}}}],["dto.ts:25",{"_index":595,"title":{},"body":{"classes/CreateAuthenticationDto.html":{}}}],["dto.ts:28",{"_index":857,"title":{},"body":{"classes/ResponseDto.html":{}}}],["dto.ts:30",{"_index":612,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{}}}],["dto.ts:32",{"_index":657,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["dto.ts:33",{"_index":868,"title":{},"body":{"classes/UpdateNotificationDto.html":{}}}],["dto.ts:34",{"_index":854,"title":{},"body":{"classes/ResponseDto.html":{}}}],["dto.ts:36",{"_index":613,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{}}}],["dto.ts:38",{"_index":658,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["dto.ts:42",{"_index":604,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{}}}],["dto.ts:48",{"_index":618,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{}}}],["dto.ts:50",{"_index":869,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["dto.ts:54",{"_index":630,"title":{},"body":{"classes/CreateLancamentoDto.html":{}}}],["dto.ts:61",{"_index":866,"title":{},"body":{"classes/UpdateContaDto.html":{}}}],["dto.ts:64",{"_index":774,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["dto.ts:66",{"_index":867,"title":{},"body":{"classes/UpdateLancamentoDto.html":{}}}],["dto.ts:71",{"_index":775,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["dto.ts:83",{"_index":870,"title":{},"body":{"classes/UpdateUserPhotoDto.html":{}}}],["dto.ts:89",{"_index":871,"title":{},"body":{"classes/UpdateUserPhotoDto.html":{}}}],["dto.user",{"_index":413,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["dto.user.id",{"_index":437,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["dto.userid",{"_index":573,"title":{},"body":{"injectables/ContaService.html":{},"injectables/NotificationService.html":{}}}],["dto.uuid",{"_index":584,"title":{},"body":{"injectables/ContaService.html":{}}}],["dto.valor",{"_index":758,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["dto/authentication",{"_index":396,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["dto/conta",{"_index":528,"title":{},"body":{"controllers/ContaController.html":{},"injectables/ContaService.html":{}}}],["dto/lancamento",{"_index":733,"title":{},"body":{"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{}}}],["dto/notification",{"_index":813,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["dto/response",{"_index":398,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/sign",{"_index":255,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["dto/user",{"_index":991,"title":{},"body":{"injectables/UserService.html":{}}}],["dto?.uuid?.length",{"_index":585,"title":{},"body":{"injectables/ContaService.html":{}}}],["débitos",{"_index":608,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/UpdateContaDto.html":{}}}],["e",{"_index":364,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/SignInDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["em",{"_index":1119,"title":{},"body":{"index.html":{}}}],["email",{"_index":363,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["emailtolowercase",{"_index":907,"title":{},"body":{"entities/User.html":{}}}],["emitidos",{"_index":850,"title":{},"body":{"classes/ResponseDto.html":{}}}],["entidade",{"_index":151,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["entities",{"_index":149,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/authentication.entity",{"_index":45,"title":{},"body":{"modules/AplicativoModule.html":{},"injectables/AuthenticationService.html":{}}}],["entities/conta.entity",{"_index":55,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{}}}],["entities/lancamento.entity",{"_index":59,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{}}}],["entities/notification.entity",{"_index":51,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["entities/user.entity",{"_index":49,"title":{},"body":{"modules/AplicativoModule.html":{},"classes/CreateAuthenticationDto.html":{},"classes/UpdateAuthenticationDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":148,"title":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}},"body":{"entities/Authentication.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"injectables/ContaService.html":{},"entities/Lancamento.html":{},"injectables/LancamentoService.html":{},"entities/Notification.html":{},"injectables/NotificationService.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity('tb_account",{"_index":500,"title":{},"body":{"entities/Conta.html":{}}}],["entity('tb_accounting_entry",{"_index":713,"title":{},"body":{"entities/Lancamento.html":{}}}],["entity('tb_authentication",{"_index":219,"title":{},"body":{"entities/Authentication.html":{}}}],["entity('tb_notification",{"_index":792,"title":{},"body":{"entities/Notification.html":{}}}],["entity('tb_user",{"_index":896,"title":{},"body":{"entities/User.html":{}}}],["entity.categorias",{"_index":759,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["entity.contaid",{"_index":763,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["entity.data",{"_index":755,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["entity.descricao",{"_index":563,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{}}}],["entity.image",{"_index":761,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["entity.message",{"_index":839,"title":{},"body":{"injectables/NotificationService.html":{}}}],["entity.nome",{"_index":561,"title":{},"body":{"injectables/ContaService.html":{}}}],["entity.saldoconsolidado",{"_index":571,"title":{},"body":{"injectables/ContaService.html":{}}}],["entity.saldocredito",{"_index":565,"title":{},"body":{"injectables/ContaService.html":{}}}],["entity.saldodebito",{"_index":567,"title":{},"body":{"injectables/ContaService.html":{}}}],["entity.saldofuturo",{"_index":569,"title":{},"body":{"injectables/ContaService.html":{}}}],["entity.tipolancamento",{"_index":751,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["entity.titulo",{"_index":753,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["entity.token",{"_index":435,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["entity.userid",{"_index":436,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/NotificationService.html":{}}}],["entity.valor",{"_index":757,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["entity.{js,ts",{"_index":1185,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entitytoupdate",{"_index":444,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{}}}],["entitytoupdate.categorias",{"_index":770,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["entitytoupdate.contaid",{"_index":772,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["entitytoupdate.data",{"_index":768,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["entitytoupdate.descricao",{"_index":587,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{}}}],["entitytoupdate.image",{"_index":771,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["entitytoupdate.message",{"_index":841,"title":{},"body":{"injectables/NotificationService.html":{}}}],["entitytoupdate.nome",{"_index":586,"title":{},"body":{"injectables/ContaService.html":{}}}],["entitytoupdate.tipolancamento",{"_index":766,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["entitytoupdate.titulo",{"_index":767,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["entitytoupdate.token",{"_index":446,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["entitytoupdate.userid",{"_index":843,"title":{},"body":{"injectables/NotificationService.html":{}}}],["entitytoupdate.valor",{"_index":769,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["entrada",{"_index":864,"title":{},"body":{"classes/SignInDto.html":{}}}],["entry",{"_index":718,"title":{},"body":{"controllers/LancamentoController.html":{}}}],["env",{"_index":1144,"title":{},"body":{"index.html":{}}}],["env.sample",{"_index":1143,"title":{},"body":{"index.html":{}}}],["erro",{"_index":681,"title":{},"body":{"interfaces/IResponse.html":{},"classes/ResponseDto.html":{}}}],["error",{"_index":415,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"interfaces/IResponse.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"injectables/UserService.html":{}}}],["erros",{"_index":848,"title":{},"body":{"classes/ResponseDto.html":{}}}],["escalar",{"_index":1124,"title":{},"body":{"index.html":{}}}],["est",{"_index":668,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{}}}],["este",{"_index":1146,"title":{},"body":{"index.html":{}}}],["estiver",{"_index":93,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["evita",{"_index":847,"title":{},"body":{"classes/ResponseDto.html":{}}}],["example",{"_index":1137,"title":{},"body":{"index.html":{}}}],["exclui",{"_index":964,"title":{},"body":{"injectables/UserService.html":{}}}],["excluir",{"_index":355,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{}}}],["excluído",{"_index":965,"title":{},"body":{"injectables/UserService.html":{}}}],["executada",{"_index":1132,"title":{},"body":{"index.html":{}}}],["executar",{"_index":1135,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":295,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["execução",{"_index":302,"title":{},"body":{"guards/AuthenticationGuard.html":{},"index.html":{}}}],["exista",{"_index":646,"title":{},"body":{"classes/CreateNotificationDto.html":{},"interfaces/IResponse.html":{},"classes/ResponseDto.html":{},"classes/UpdateNotificationDto.html":{}}}],["expiresin",{"_index":68,"title":{},"body":{"modules/AplicativoModule.html":{}}}],["export",{"_index":70,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IResponse.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{},"overview.html":{}}}],["express",{"_index":312,"title":{},"body":{"guards/AuthenticationGuard.html":{},"dependencies.html":{}}}],["extends",{"_index":598,"title":{},"body":{"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{}}}],["extracttokenfromheader",{"_index":289,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["extracttokenfromheader(request",{"_index":304,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["extrai",{"_index":306,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["false",{"_index":431,"title":{},"body":{"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"injectables/ContaService.html":{},"entities/Lancamento.html":{},"injectables/LancamentoService.html":{},"entities/Notification.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["false})@minlength(8",{"_index":889,"title":{},"body":{"entities/User.html":{}}}],["file",{"_index":23,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IResponse.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["finally",{"_index":582,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{}}}],["findbyid",{"_index":503,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findbyid(@param('id",{"_index":537,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["findbyid(id",{"_index":513,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone",{"_index":795,"title":{},"body":{"controllers/NotificationController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone(@param('email",{"_index":938,"title":{},"body":{"controllers/UserController.html":{}}}],["findone(@param('uuid",{"_index":820,"title":{},"body":{"controllers/NotificationController.html":{}}}],["findone(email",{"_index":922,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone(uuid",{"_index":802,"title":{},"body":{"controllers/NotificationController.html":{}}}],["findsignin",{"_index":954,"title":{},"body":{"injectables/UserService.html":{}}}],["findsignin(email",{"_index":969,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserphoto",{"_index":914,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["finduserphoto(@param('id",{"_index":943,"title":{},"body":{"controllers/UserController.html":{}}}],["finduserphoto(id",{"_index":925,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["fk_account_user",{"_index":494,"title":{},"body":{"entities/Conta.html":{}}}],["fk_accounting_entry_account",{"_index":687,"title":{},"body":{"entities/Lancamento.html":{}}}],["fk_authentication_user",{"_index":197,"title":{},"body":{"entities/Authentication.html":{}}}],["fk_notification_user",{"_index":785,"title":{},"body":{"entities/Notification.html":{}}}],["flg_active",{"_index":469,"title":{},"body":{"entities/Conta.html":{},"entities/User.html":{}}}],["foi",{"_index":1117,"title":{},"body":{"index.html":{}}}],["fora",{"_index":851,"title":{},"body":{"classes/ResponseDto.html":{}}}],["foreignkeyconstraintname",{"_index":196,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{}}}],["forma",{"_index":1122,"title":{},"body":{"index.html":{}}}],["foto",{"_index":671,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["funcionamento",{"_index":146,"title":{},"body":{"injectables/AppService.html":{}}}],["funcionar",{"_index":98,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["function",{"_index":1051,"title":{},"body":{"coverage.html":{}}}],["function(err",{"_index":1028,"title":{},"body":{"injectables/UserService.html":{}}}],["functions",{"_index":1105,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["função",{"_index":141,"title":{},"body":{"injectables/AppService.html":{},"miscellaneous/functions.html":{}}}],["futuro",{"_index":609,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/UpdateContaDto.html":{}}}],["general",{"_index":1150,"title":{},"body":{"index.html":{}}}],["generated",{"_index":209,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["generated(\"uuid",{"_index":222,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["generatepassword(pwd",{"_index":1026,"title":{},"body":{"injectables/UserService.html":{}}}],["gensalt",{"_index":992,"title":{},"body":{"injectables/UserService.html":{}}}],["gensalt(10",{"_index":1027,"title":{},"body":{"injectables/UserService.html":{}}}],["gerada",{"_index":1126,"title":{},"body":{"index.html":{}}}],["get('getall",{"_index":940,"title":{},"body":{"controllers/UserController.html":{}}}],["get('getallbyuserid/:id",{"_index":533,"title":{},"body":{"controllers/ContaController.html":{}}}],["get('getbyaccount/:id",{"_index":737,"title":{},"body":{"controllers/LancamentoController.html":{}}}],["get('getbyemail",{"_index":923,"title":{},"body":{"controllers/UserController.html":{}}}],["get('getbyguid/:uuid",{"_index":819,"title":{},"body":{"controllers/NotificationController.html":{}}}],["get('getbyid/:id",{"_index":536,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["get('getnotificationstouser",{"_index":822,"title":{},"body":{"controllers/NotificationController.html":{}}}],["get('getuserphoto/:id",{"_index":942,"title":{},"body":{"controllers/UserController.html":{}}}],["get('me",{"_index":278,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["get('profile",{"_index":275,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["getall",{"_index":796,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getallbyuserid",{"_index":548,"title":{},"body":{"injectables/ContaService.html":{}}}],["getallbyuserid(id",{"_index":553,"title":{},"body":{"injectables/ContaService.html":{}}}],["getauthenticateduser",{"_index":336,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getauthenticateduser(email",{"_index":358,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getbyaccount",{"_index":719,"title":{},"body":{"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{}}}],["getbyaccount(@param('id",{"_index":738,"title":{},"body":{"controllers/LancamentoController.html":{}}}],["getbyaccount(contaid",{"_index":745,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["getbyaccount(id",{"_index":724,"title":{},"body":{"controllers/LancamentoController.html":{}}}],["getbyguid",{"_index":337,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{}}}],["getbyguid(uuid",{"_index":369,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{}}}],["getbyid",{"_index":338,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["getbyid(id",{"_index":372,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["getbyuserid",{"_index":504,"title":{},"body":{"controllers/ContaController.html":{}}}],["getbyuserid(@param('id",{"_index":534,"title":{},"body":{"controllers/ContaController.html":{}}}],["getbyuserid(id",{"_index":516,"title":{},"body":{"controllers/ContaController.html":{}}}],["gethealth",{"_index":85,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getnotificationstouser",{"_index":797,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["getnotificationstouser(@param('iduser",{"_index":823,"title":{},"body":{"controllers/NotificationController.html":{}}}],["getnotificationstouser(iduser",{"_index":808,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["getprofile",{"_index":226,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["getprofile(@request",{"_index":276,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["getprofile(req",{"_index":228,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["gets",{"_index":419,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getting",{"_index":1108,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":1042,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["gnu",{"_index":1149,"title":{},"body":{"index.html":{},"properties.html":{}}}],["google",{"_index":1085,"title":{},"body":{"dependencies.html":{}}}],["gratuito",{"_index":1147,"title":{},"body":{"index.html":{}}}],["guard",{"_index":284,"title":{"guards/AuthenticationGuard.html":{}},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":285,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["guards/authentication.guard",{"_index":261,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["guid",{"_index":221,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"injectables/ContaService.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["guid'})@generated('uuid",{"_index":205,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["handlers",{"_index":327,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["hash",{"_index":985,"title":{},"body":{"injectables/UserService.html":{}}}],["hash(createuserdto.password",{"_index":1022,"title":{},"body":{"injectables/UserService.html":{}}}],["hash(password",{"_index":999,"title":{},"body":{"injectables/UserService.html":{}}}],["hash(pwd",{"_index":1030,"title":{},"body":{"injectables/UserService.html":{}}}],["hashed",{"_index":988,"title":{},"body":{"injectables/UserService.html":{}}}],["hashedpassword",{"_index":390,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UserService.html":{}}}],["havendo",{"_index":845,"title":{},"body":{"classes/ResponseDto.html":{}}}],["header",{"_index":308,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["health",{"_index":78,"title":{},"body":{"controllers/AppController.html":{}}}],["here",{"_index":324,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["host",{"_index":1176,"title":{},"body":{"miscellaneous/variables.html":{}}}],["houver",{"_index":309,"title":{},"body":{"guards/AuthenticationGuard.html":{},"index.html":{}}}],["httpcode",{"_index":250,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(httpstatus.ok",{"_index":269,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(httpstatus.ok)@post('login",{"_index":245,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpexception",{"_index":393,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpexception('wrong",{"_index":456,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus",{"_index":251,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["httpstatus.bad_request",{"_index":459,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["id",{"_index":156,"title":{},"body":{"entities/Authentication.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateUserDto.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["identificador",{"_index":356,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"controllers/LancamentoController.html":{},"classes/LoginUserDto.html":{},"controllers/NotificationController.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["identificação",{"_index":731,"title":{},"body":{"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{}}}],["identifier",{"_index":589,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"coverage.html":{}}}],["iduser",{"_index":811,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["image",{"_index":624,"title":{},"body":{"classes/CreateLancamentoDto.html":{},"classes/CreateUserDto.html":{},"entities/Lancamento.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["imagem",{"_index":631,"title":{},"body":{"classes/CreateLancamentoDto.html":{},"classes/UpdateLancamentoDto.html":{},"injectables/UserService.html":{}}}],["implements",{"_index":313,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/ResponseDto.html":{}}}],["import",{"_index":34,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":62,"title":{},"body":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{}}}],["inactivate",{"_index":910,"title":{},"body":{"entities/User.html":{}}}],["incluído",{"_index":962,"title":{},"body":{"injectables/UserService.html":{}}}],["index",{"_index":82,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IResponse.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indica",{"_index":667,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{}}}],["info",{"_index":21,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IResponse.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["informação",{"_index":1115,"title":{},"body":{"index.html":{}}}],["inicializa",{"_index":855,"title":{},"body":{"classes/ResponseDto.html":{}}}],["injectable",{"_index":136,"title":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":137,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":395,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["injectrepository(authentication",{"_index":401,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["injectrepository(conta",{"_index":558,"title":{},"body":{"injectables/ContaService.html":{}}}],["injectrepository(lancamento",{"_index":750,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["injectrepository(notification",{"_index":837,"title":{},"body":{"injectables/NotificationService.html":{}}}],["injectrepository(user",{"_index":993,"title":{},"body":{"injectables/UserService.html":{}}}],["injeção",{"_index":110,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["insecureauth",{"_index":1189,"title":{},"body":{"miscellaneous/variables.html":{}}}],["insert",{"_index":905,"title":{},"body":{"entities/User.html":{}}}],["install",{"_index":1141,"title":{},"body":{"index.html":{}}}],["interface",{"_index":674,"title":{"interfaces/IResponse.html":{}},"body":{"interfaces/IResponse.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":675,"title":{},"body":{"interfaces/IResponse.html":{}}}],["interfaces/iresponse.interface",{"_index":263,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["interno",{"_index":967,"title":{},"body":{"injectables/UserService.html":{}}}],["invalid",{"_index":1008,"title":{},"body":{"injectables/UserService.html":{}}}],["início",{"_index":1107,"title":{},"body":{"miscellaneous/functions.html":{}}}],["iresponse",{"_index":262,"title":{"interfaces/IResponse.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"interfaces/IResponse.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["isboolean",{"_index":647,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/UpdateNotificationDto.html":{}}}],["isemail",{"_index":662,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/SignInDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{}}}],["isglobal",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":215,"title":{},"body":{"entities/Authentication.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"classes/SignInDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{}}}],["ispasswordmatching",{"_index":460,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UserService.html":{}}}],["isstring",{"_index":648,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/SignInDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{}}}],["joincolumn",{"_index":212,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["jwt",{"_index":249,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateAuthenticationDto.html":{},"classes/UpdateAuthenticationDto.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants",{"_index":40,"title":{},"body":{"modules/AplicativoModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":66,"title":{},"body":{"modules/AplicativoModule.html":{},"guards/AuthenticationGuard.html":{}}}],["jwtmodule",{"_index":38,"title":{},"body":{"modules/AplicativoModule.html":{}}}],["jwtmodule.register",{"_index":64,"title":{},"body":{"modules/AplicativoModule.html":{}}}],["jwtservice",{"_index":291,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{}}}],["key",{"_index":178,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["keys",{"_index":897,"title":{},"body":{"entities/User.html":{}}}],["lancamento",{"_index":58,"title":{"entities/Lancamento.html":{}},"body":{"modules/AplicativoModule.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"coverage.html":{}}}],["lancamento.conta",{"_index":478,"title":{},"body":{"entities/Conta.html":{}}}],["lancamento.entity",{"_index":499,"title":{},"body":{"entities/Conta.html":{}}}],["lancamentocontroller",{"_index":33,"title":{"controllers/LancamentoController.html":{}},"body":{"modules/AplicativoModule.html":{},"controllers/LancamentoController.html":{},"coverage.html":{}}}],["lancamentos",{"_index":463,"title":{},"body":{"entities/Conta.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{}}}],["lancamentoservice",{"_index":16,"title":{"injectables/LancamentoService.html":{}},"body":{"modules/AplicativoModule.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"coverage.html":{},"overview.html":{}}}],["lannçamento",{"_index":723,"title":{},"body":{"controllers/LancamentoController.html":{}}}],["lançamento",{"_index":512,"title":{},"body":{"controllers/ContaController.html":{},"classes/CreateLancamentoDto.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/UpdateLancamentoDto.html":{}}}],["lançamentos",{"_index":614,"title":{},"body":{"classes/CreateContaDto.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/UpdateContaDto.html":{},"index.html":{}}}],["lazy",{"_index":479,"title":{},"body":{"entities/Conta.html":{},"entities/User.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{},"overview.html":{}}}],["length",{"_index":884,"title":{},"body":{"entities/User.html":{}}}],["license",{"_index":1151,"title":{},"body":{"index.html":{},"properties.html":{}}}],["livre",{"_index":1148,"title":{},"body":{"index.html":{}}}],["local",{"_index":1089,"title":{},"body":{"dependencies.html":{}}}],["lodash",{"_index":1075,"title":{},"body":{"dependencies.html":{}}}],["log",{"_index":902,"title":{},"body":{"entities/User.html":{}}}],["logado",{"_index":233,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["loginuserdto",{"_index":670,"title":{"classes/LoginUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"coverage.html":{}}}],["longtext",{"_index":882,"title":{},"body":{"entities/User.html":{}}}],["lookupall",{"_index":418,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["mail",{"_index":365,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/SignInDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["maior",{"_index":615,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/UpdateContaDto.html":{}}}],["manager",{"_index":1066,"title":{},"body":{"dependencies.html":{}}}],["manytoone",{"_index":213,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["manytoone(undefined",{"_index":190,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{}}}],["mapping.decorator",{"_index":105,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["matching",{"_index":73,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IResponse.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["maximizando",{"_index":852,"title":{},"body":{"classes/ResponseDto.html":{}}}],["me(@request",{"_index":279,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["me(req",{"_index":240,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["me(user",{"_index":376,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["mensagem",{"_index":643,"title":{},"body":{"classes/CreateNotificationDto.html":{},"interfaces/IResponse.html":{},"classes/ResponseDto.html":{},"classes/UpdateNotificationDto.html":{}}}],["mesquita",{"_index":1165,"title":{},"body":{"properties.html":{}}}],["message",{"_index":432,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"classes/CreateNotificationDto.html":{},"interfaces/IResponse.html":{},"injectables/LancamentoService.html":{},"entities/Notification.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/UpdateNotificationDto.html":{},"injectables/UserService.html":{}}}],["metadata",{"_index":1092,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":83,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["minlength",{"_index":663,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{}}}],["minlength(4",{"_index":664,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{}}}],["minlength(8",{"_index":900,"title":{},"body":{"entities/User.html":{}}}],["miscellaneous",{"_index":1104,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":588,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{}}}],["module",{"_index":0,"title":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{}},"body":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["mudanças",{"_index":1133,"title":{},"body":{"index.html":{}}}],["mysql",{"_index":1175,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysql2",{"_index":1077,"title":{},"body":{"dependencies.html":{}}}],["módulo",{"_index":26,"title":{},"body":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{}}}],["name",{"_index":220,"title":{},"body":{"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateUserDto.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["nestjs",{"_index":1121,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":35,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/common/decorators/http/request",{"_index":104,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["nestjs/common/decorators/http/route",{"_index":258,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["nestjs/config",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1057,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":39,"title":{},"body":{"modules/AplicativoModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":1059,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":1061,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":103,"title":{},"body":{"controllers/AppController.html":{},"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":37,"title":{},"body":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{},"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":317,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["nico",{"_index":835,"title":{},"body":{"injectables/NotificationService.html":{}}}],["nome",{"_index":464,"title":{},"body":{"entities/Conta.html":{},"injectables/ContaService.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{}}}],["notificacao",{"_index":818,"title":{},"body":{"controllers/NotificationController.html":{}}}],["notification",{"_index":50,"title":{"entities/Notification.html":{}},"body":{"modules/AplicativoModule.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"coverage.html":{}}}],["notificationcontroller",{"_index":31,"title":{"controllers/NotificationController.html":{}},"body":{"modules/AplicativoModule.html":{},"controllers/NotificationController.html":{},"coverage.html":{}}}],["notificationservice",{"_index":17,"title":{"injectables/NotificationService.html":{}},"body":{"modules/AplicativoModule.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"coverage.html":{},"overview.html":{}}}],["notificatios",{"_index":788,"title":{},"body":{"entities/Notification.html":{}}}],["notificação",{"_index":640,"title":{},"body":{"classes/CreateNotificationDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateNotificationDto.html":{}}}],["notificações",{"_index":807,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["novo",{"_index":961,"title":{},"body":{"injectables/UserService.html":{}}}],["now",{"_index":167,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["npm",{"_index":1079,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["null",{"_index":416,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"classes/CreateNotificationDto.html":{},"injectables/LancamentoService.html":{},"entities/Notification.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/UpdateNotificationDto.html":{},"injectables/UserService.html":{}}}],["nullable",{"_index":199,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["num_balance_consolidated",{"_index":485,"title":{},"body":{"entities/Conta.html":{}}}],["num_balance_credit",{"_index":487,"title":{},"body":{"entities/Conta.html":{}}}],["num_balance_debit",{"_index":489,"title":{},"body":{"entities/Conta.html":{}}}],["num_balance_future",{"_index":491,"title":{},"body":{"entities/Conta.html":{}}}],["num_value",{"_index":707,"title":{},"body":{"entities/Lancamento.html":{}}}],["number",{"_index":172,"title":{},"body":{"entities/Authentication.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["o",{"_index":145,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"classes/ResponseDto.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["oauth20",{"_index":1086,"title":{},"body":{"dependencies.html":{}}}],["object",{"_index":323,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["objeto",{"_index":680,"title":{},"body":{"interfaces/IResponse.html":{},"classes/ResponseDto.html":{}}}],["obtem",{"_index":727,"title":{},"body":{"controllers/LancamentoController.html":{}}}],["obter",{"_index":361,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["obtém",{"_index":231,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["occurred",{"_index":433,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["ondelete",{"_index":192,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["onetomany",{"_index":498,"title":{},"body":{"entities/Conta.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":477,"title":{},"body":{"entities/Conta.html":{},"entities/User.html":{}}}],["onupdate",{"_index":187,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["optional",{"_index":235,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateNotificationDto.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["order",{"_index":559,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["os",{"_index":729,"title":{},"body":{"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/ResponseDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["ou",{"_index":679,"title":{},"body":{"interfaces/IResponse.html":{},"classes/ResponseDto.html":{}}}],["out",{"_index":20,"title":{},"body":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{},"overview.html":{}}}],["overview",{"_index":1157,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1054,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["para",{"_index":143,"title":{},"body":{"injectables/AppService.html":{},"classes/ResponseDto.html":{},"index.html":{}}}],["param",{"_index":113,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["parameters",{"_index":234,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["params.decorator",{"_index":259,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["parseint(process.env.mysql_port,3306",{"_index":1179,"title":{},"body":{"miscellaneous/variables.html":{}}}],["partialtype",{"_index":597,"title":{},"body":{"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{}}}],["partialtype(createauthenticationdto",{"_index":599,"title":{},"body":{"classes/CreateAuthenticationDto.html":{},"classes/UpdateAuthenticationDto.html":{}}}],["partialtype(createcontadto",{"_index":619,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/UpdateContaDto.html":{}}}],["partialtype(createlancamentodto",{"_index":637,"title":{},"body":{"classes/CreateLancamentoDto.html":{},"classes/UpdateLancamentoDto.html":{}}}],["partialtype(createnotificationdto",{"_index":650,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/UpdateNotificationDto.html":{}}}],["partialtype(createuserdto",{"_index":666,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{}}}],["parâmetro",{"_index":238,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["pass",{"_index":380,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["passport",{"_index":1083,"title":{},"body":{"dependencies.html":{}}}],["password",{"_index":653,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/SignInDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["payload",{"_index":319,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{}}}],["pela",{"_index":1127,"title":{},"body":{"index.html":{}}}],["pelo",{"_index":267,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["permissão",{"_index":303,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["permitir",{"_index":1123,"title":{},"body":{"index.html":{}}}],["photo",{"_index":1007,"title":{},"body":{"injectables/UserService.html":{}}}],["pk",{"_index":204,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["plain",{"_index":989,"title":{},"body":{"injectables/UserService.html":{}}}],["plaintextpassword",{"_index":359,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["pode",{"_index":298,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["por",{"_index":371,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateLancamentoDto.html":{},"injectables/NotificationService.html":{},"classes/UpdateLancamentoDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["port",{"_index":1178,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":256,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["post('login",{"_index":270,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post()@usepipes(new",{"_index":916,"title":{},"body":{"controllers/UserController.html":{}}}],["precision",{"_index":708,"title":{},"body":{"entities/Lancamento.html":{}}}],["prefix",{"_index":77,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["primary",{"_index":177,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn",{"_index":208,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["primário",{"_index":374,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"classes/CreateContaDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["principal",{"_index":375,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["private",{"_index":288,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["process.env.debug",{"_index":1188,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.insecure_auth",{"_index":1190,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.jwt_secret",{"_index":1171,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mysql_database",{"_index":1183,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mysql_host",{"_index":1177,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mysql_password",{"_index":1181,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mysql_username",{"_index":1180,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise",{"_index":96,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":153,"title":{"properties.html":{}},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IResponse.html":{},"entities/Lancamento.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"properties.html":{}}}],["provided",{"_index":458,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{},"overview.html":{}}}],["public",{"_index":335,"title":{},"body":{"injectables/AuthenticationService.html":{},"index.html":{}}}],["purposes",{"_index":903,"title":{},"body":{"entities/User.html":{}}}],["put",{"_index":527,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["put('updateuserphoto",{"_index":946,"title":{},"body":{"controllers/UserController.html":{}}}],["que",{"_index":616,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/ResponseDto.html":{},"classes/UpdateContaDto.html":{},"index.html":{}}}],["queryrunner",{"_index":574,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{}}}],["queryrunner.committransaction",{"_index":580,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{}}}],["queryrunner.connect",{"_index":576,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{}}}],["queryrunner.manager.save(conta",{"_index":578,"title":{},"body":{"injectables/ContaService.html":{}}}],["queryrunner.manager.save(lancamento",{"_index":765,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["queryrunner.release",{"_index":583,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{}}}],["queryrunner.rollbacktransaction",{"_index":581,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{}}}],["queryrunner.starttransaction",{"_index":577,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{}}}],["readonly",{"_index":115,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateUserDto.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["record",{"_index":441,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["redis",{"_index":1067,"title":{},"body":{"dependencies.html":{}}}],["reflect",{"_index":1091,"title":{},"body":{"dependencies.html":{}}}],["registo",{"_index":352,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["relations",{"_index":427,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/UserService.html":{}}}],["repository",{"_index":342,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["repositório",{"_index":345,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["req",{"_index":236,"title":{},"body":{"controllers/AuthenticationController.html":{},"miscellaneous/variables.html":{}}}],["req.user",{"_index":277,"title":{},"body":{"controllers/AuthenticationController.html":{},"miscellaneous/variables.html":{}}}],["request",{"_index":253,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{}}}],["request.headers.authorization?.split",{"_index":330,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["request['user",{"_index":328,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["requisição",{"_index":237,"title":{},"body":{"controllers/AuthenticationController.html":{},"miscellaneous/variables.html":{}}}],["reset",{"_index":19,"title":{},"body":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{},"overview.html":{}}}],["response",{"_index":422,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["response.data",{"_index":424,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["response.error",{"_index":428,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["response.message",{"_index":429,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["response.success",{"_index":423,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["responsedto",{"_index":397,"title":{"classes/ResponseDto.html":{}},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["responsável",{"_index":293,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["resposta",{"_index":677,"title":{},"body":{"interfaces/IResponse.html":{},"classes/ResponseDto.html":{}}}],["rest",{"_index":1112,"title":{},"body":{"index.html":{}}}],["result",{"_index":281,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["result.affected",{"_index":451,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["result.id",{"_index":440,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["result.raw",{"_index":453,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["results",{"_index":72,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IResponse.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retorna",{"_index":378,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["return",{"_index":116,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returna",{"_index":89,"title":{},"body":{"controllers/AppController.html":{}}}],["returns",{"_index":95,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["rimraf",{"_index":1094,"title":{},"body":{"dependencies.html":{}}}],["rodar",{"_index":94,"title":{},"body":{"controllers/AppController.html":{}}}],["role",{"_index":408,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["route",{"_index":326,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["rules",{"_index":906,"title":{},"body":{"entities/User.html":{}}}],["run",{"_index":1138,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1096,"title":{},"body":{"dependencies.html":{}}}],["saldo",{"_index":605,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/UpdateContaDto.html":{}}}],["saldoconsolidado",{"_index":465,"title":{},"body":{"entities/Conta.html":{},"injectables/ContaService.html":{},"classes/CreateContaDto.html":{},"classes/UpdateContaDto.html":{}}}],["saldocredito",{"_index":466,"title":{},"body":{"entities/Conta.html":{},"injectables/ContaService.html":{},"classes/CreateContaDto.html":{},"classes/UpdateContaDto.html":{}}}],["saldodebito",{"_index":467,"title":{},"body":{"entities/Conta.html":{},"injectables/ContaService.html":{},"classes/CreateContaDto.html":{},"classes/UpdateContaDto.html":{}}}],["saldofuturo",{"_index":468,"title":{},"body":{"entities/Conta.html":{},"injectables/ContaService.html":{},"classes/CreateContaDto.html":{},"classes/UpdateContaDto.html":{}}}],["salt",{"_index":1029,"title":{},"body":{"injectables/UserService.html":{}}}],["scale",{"_index":710,"title":{},"body":{"entities/Lancamento.html":{}}}],["se",{"_index":91,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{}}}],["secret",{"_index":65,"title":{},"body":{"modules/AplicativoModule.html":{},"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["secundário",{"_index":357,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{}}}],["segurança",{"_index":1173,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sejam",{"_index":849,"title":{},"body":{"classes/ResponseDto.html":{}}}],["select",{"_index":426,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["sempre",{"_index":846,"title":{},"body":{"classes/ResponseDto.html":{},"index.html":{}}}],["senha",{"_index":366,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/SignInDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"injectables/UserService.html":{}}}],["separado",{"_index":628,"title":{},"body":{"classes/CreateLancamentoDto.html":{},"classes/UpdateLancamentoDto.html":{}}}],["ser",{"_index":1131,"title":{},"body":{"index.html":{}}}],["service",{"_index":268,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{}}}],["services/authentication.service",{"_index":43,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/AuthenticationController.html":{}}}],["services/conta.service",{"_index":57,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/ContaController.html":{}}}],["services/lancamento.service",{"_index":61,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/LancamentoController.html":{}}}],["services/notification.service",{"_index":53,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/NotificationController.html":{}}}],["services/user.service",{"_index":47,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/UserController.html":{}}}],["serviço",{"_index":109,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["signin",{"_index":227,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["signin(@body",{"_index":271,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["signin(dto",{"_index":243,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["signin(username",{"_index":379,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["signindto",{"_index":244,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"classes/SignInDto.html":{},"coverage.html":{}}}],["signoptions",{"_index":67,"title":{},"body":{"modules/AplicativoModule.html":{}}}],["simples",{"_index":142,"title":{},"body":{"injectables/AppService.html":{}}}],["sistema",{"_index":81,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/SignInDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{}}}],["slugify",{"_index":1098,"title":{},"body":{"dependencies.html":{}}}],["software",{"_index":1134,"title":{},"body":{"index.html":{}}}],["source",{"_index":22,"title":{},"body":{"modules/AplicativoModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IResponse.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["src/.../get",{"_index":1167,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1106,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../typeorm.config.ts",{"_index":1168,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/aplicativo/aplicativo.module.ts",{"_index":24,"title":{},"body":{"modules/AplicativoModule.html":{}}}],["src/aplicativo/controllers/authentication.controller.ts",{"_index":224,"title":{},"body":{"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["src/aplicativo/controllers/authentication.controller.ts:32",{"_index":246,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/aplicativo/controllers/authentication.controller.ts:45",{"_index":230,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/aplicativo/controllers/authentication.controller.ts:57",{"_index":242,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/aplicativo/controllers/conta.controller.ts",{"_index":501,"title":{},"body":{"controllers/ContaController.html":{},"coverage.html":{}}}],["src/aplicativo/controllers/conta.controller.ts:37",{"_index":518,"title":{},"body":{"controllers/ContaController.html":{}}}],["src/aplicativo/controllers/conta.controller.ts:50",{"_index":515,"title":{},"body":{"controllers/ContaController.html":{}}}],["src/aplicativo/controllers/conta.controller.ts:63",{"_index":524,"title":{},"body":{"controllers/ContaController.html":{}}}],["src/aplicativo/controllers/conta.controller.ts:76",{"_index":508,"title":{},"body":{"controllers/ContaController.html":{}}}],["src/aplicativo/controllers/conta.controller.ts:88",{"_index":511,"title":{},"body":{"controllers/ContaController.html":{}}}],["src/aplicativo/controllers/lancamento.controller.ts",{"_index":717,"title":{},"body":{"controllers/LancamentoController.html":{},"coverage.html":{}}}],["src/aplicativo/controllers/lancamento.controller.ts:37",{"_index":726,"title":{},"body":{"controllers/LancamentoController.html":{}}}],["src/aplicativo/controllers/lancamento.controller.ts:50",{"_index":722,"title":{},"body":{"controllers/LancamentoController.html":{}}}],["src/aplicativo/controllers/lancamento.controller.ts:63",{"_index":732,"title":{},"body":{"controllers/LancamentoController.html":{}}}],["src/aplicativo/controllers/lancamento.controller.ts:76",{"_index":720,"title":{},"body":{"controllers/LancamentoController.html":{}}}],["src/aplicativo/controllers/lancamento.controller.ts:88",{"_index":721,"title":{},"body":{"controllers/LancamentoController.html":{}}}],["src/aplicativo/controllers/notification.controller.ts",{"_index":794,"title":{},"body":{"controllers/NotificationController.html":{},"coverage.html":{}}}],["src/aplicativo/controllers/notification.controller.ts:111",{"_index":800,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/aplicativo/controllers/notification.controller.ts:36",{"_index":806,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/aplicativo/controllers/notification.controller.ts:49",{"_index":804,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/aplicativo/controllers/notification.controller.ts:61",{"_index":801,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/aplicativo/controllers/notification.controller.ts:73",{"_index":810,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/aplicativo/controllers/notification.controller.ts:86",{"_index":812,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/aplicativo/controllers/notification.controller.ts:99",{"_index":798,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/aplicativo/controllers/user.controller.ts",{"_index":913,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/aplicativo/controllers/user.controller.ts:110",{"_index":917,"title":{},"body":{"controllers/UserController.html":{}}}],["src/aplicativo/controllers/user.controller.ts:122",{"_index":920,"title":{},"body":{"controllers/UserController.html":{}}}],["src/aplicativo/controllers/user.controller.ts:35",{"_index":924,"title":{},"body":{"controllers/UserController.html":{}}}],["src/aplicativo/controllers/user.controller.ts:47",{"_index":929,"title":{},"body":{"controllers/UserController.html":{}}}],["src/aplicativo/controllers/user.controller.ts:60",{"_index":921,"title":{},"body":{"controllers/UserController.html":{}}}],["src/aplicativo/controllers/user.controller.ts:73",{"_index":927,"title":{},"body":{"controllers/UserController.html":{}}}],["src/aplicativo/controllers/user.controller.ts:86",{"_index":931,"title":{},"body":{"controllers/UserController.html":{}}}],["src/aplicativo/controllers/user.controller.ts:98",{"_index":934,"title":{},"body":{"controllers/UserController.html":{}}}],["src/aplicativo/decorators/get",{"_index":1039,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/aplicativo/dto/authentication",{"_index":592,"title":{},"body":{"classes/CreateAuthenticationDto.html":{},"classes/UpdateAuthenticationDto.html":{},"coverage.html":{}}}],["src/aplicativo/dto/conta",{"_index":600,"title":{},"body":{"classes/CreateContaDto.html":{},"classes/UpdateContaDto.html":{},"coverage.html":{}}}],["src/aplicativo/dto/lancamento",{"_index":621,"title":{},"body":{"classes/CreateLancamentoDto.html":{},"classes/UpdateLancamentoDto.html":{},"coverage.html":{}}}],["src/aplicativo/dto/notification",{"_index":639,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["src/aplicativo/dto/response",{"_index":844,"title":{},"body":{"classes/ResponseDto.html":{},"coverage.html":{}}}],["src/aplicativo/dto/sign",{"_index":863,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/aplicativo/dto/user",{"_index":652,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/aplicativo/entities/authentication.entity.ts",{"_index":150,"title":{},"body":{"entities/Authentication.html":{},"coverage.html":{}}}],["src/aplicativo/entities/authentication.entity.ts:13",{"_index":179,"title":{},"body":{"entities/Authentication.html":{}}}],["src/aplicativo/entities/authentication.entity.ts:18",{"_index":206,"title":{},"body":{"entities/Authentication.html":{}}}],["src/aplicativo/entities/authentication.entity.ts:23",{"_index":184,"title":{},"body":{"entities/Authentication.html":{}}}],["src/aplicativo/entities/authentication.entity.ts:27",{"_index":200,"title":{},"body":{"entities/Authentication.html":{}}}],["src/aplicativo/entities/authentication.entity.ts:31",{"_index":198,"title":{},"body":{"entities/Authentication.html":{}}}],["src/aplicativo/entities/authentication.entity.ts:34",{"_index":168,"title":{},"body":{"entities/Authentication.html":{}}}],["src/aplicativo/entities/authentication.entity.ts:37",{"_index":189,"title":{},"body":{"entities/Authentication.html":{}}}],["src/aplicativo/entities/authentication.entity.ts:40",{"_index":171,"title":{},"body":{"entities/Authentication.html":{}}}],["src/aplicativo/entities/conta.entity.ts",{"_index":461,"title":{},"body":{"entities/Conta.html":{},"coverage.html":{}}}],["src/aplicativo/entities/conta.entity.ts:13",{"_index":476,"title":{},"body":{"entities/Conta.html":{}}}],["src/aplicativo/entities/conta.entity.ts:18",{"_index":497,"title":{},"body":{"entities/Conta.html":{}}}],["src/aplicativo/entities/conta.entity.ts:22",{"_index":484,"title":{},"body":{"entities/Conta.html":{}}}],["src/aplicativo/entities/conta.entity.ts:26",{"_index":474,"title":{},"body":{"entities/Conta.html":{}}}],["src/aplicativo/entities/conta.entity.ts:30",{"_index":488,"title":{},"body":{"entities/Conta.html":{}}}],["src/aplicativo/entities/conta.entity.ts:34",{"_index":490,"title":{},"body":{"entities/Conta.html":{}}}],["src/aplicativo/entities/conta.entity.ts:38",{"_index":492,"title":{},"body":{"entities/Conta.html":{}}}],["src/aplicativo/entities/conta.entity.ts:42",{"_index":486,"title":{},"body":{"entities/Conta.html":{}}}],["src/aplicativo/entities/conta.entity.ts:46",{"_index":496,"title":{},"body":{"entities/Conta.html":{}}}],["src/aplicativo/entities/conta.entity.ts:50",{"_index":495,"title":{},"body":{"entities/Conta.html":{}}}],["src/aplicativo/entities/conta.entity.ts:54",{"_index":470,"title":{},"body":{"entities/Conta.html":{}}}],["src/aplicativo/entities/conta.entity.ts:57",{"_index":471,"title":{},"body":{"entities/Conta.html":{}}}],["src/aplicativo/entities/conta.entity.ts:60",{"_index":493,"title":{},"body":{"entities/Conta.html":{}}}],["src/aplicativo/entities/conta.entity.ts:63",{"_index":472,"title":{},"body":{"entities/Conta.html":{}}}],["src/aplicativo/entities/conta.entity.ts:69",{"_index":482,"title":{},"body":{"entities/Conta.html":{}}}],["src/aplicativo/entities/lancamento.entity.ts",{"_index":683,"title":{},"body":{"entities/Lancamento.html":{},"coverage.html":{}}}],["src/aplicativo/entities/lancamento.entity.ts:12",{"_index":696,"title":{},"body":{"entities/Lancamento.html":{}}}],["src/aplicativo/entities/lancamento.entity.ts:17",{"_index":705,"title":{},"body":{"entities/Lancamento.html":{}}}],["src/aplicativo/entities/lancamento.entity.ts:21",{"_index":700,"title":{},"body":{"entities/Lancamento.html":{}}}],["src/aplicativo/entities/lancamento.entity.ts:25",{"_index":702,"title":{},"body":{"entities/Lancamento.html":{}}}],["src/aplicativo/entities/lancamento.entity.ts:29",{"_index":694,"title":{},"body":{"entities/Lancamento.html":{}}}],["src/aplicativo/entities/lancamento.entity.ts:33",{"_index":692,"title":{},"body":{"entities/Lancamento.html":{}}}],["src/aplicativo/entities/lancamento.entity.ts:37",{"_index":711,"title":{},"body":{"entities/Lancamento.html":{}}}],["src/aplicativo/entities/lancamento.entity.ts:41",{"_index":685,"title":{},"body":{"entities/Lancamento.html":{}}}],["src/aplicativo/entities/lancamento.entity.ts:45",{"_index":698,"title":{},"body":{"entities/Lancamento.html":{}}}],["src/aplicativo/entities/lancamento.entity.ts:49",{"_index":688,"title":{},"body":{"entities/Lancamento.html":{}}}],["src/aplicativo/entities/lancamento.entity.ts:53",{"_index":689,"title":{},"body":{"entities/Lancamento.html":{}}}],["src/aplicativo/entities/lancamento.entity.ts:56",{"_index":690,"title":{},"body":{"entities/Lancamento.html":{}}}],["src/aplicativo/entities/lancamento.entity.ts:59",{"_index":703,"title":{},"body":{"entities/Lancamento.html":{}}}],["src/aplicativo/entities/lancamento.entity.ts:62",{"_index":693,"title":{},"body":{"entities/Lancamento.html":{}}}],["src/aplicativo/entities/notification.entity.ts",{"_index":776,"title":{},"body":{"entities/Notification.html":{},"coverage.html":{}}}],["src/aplicativo/entities/notification.entity.ts:13",{"_index":780,"title":{},"body":{"entities/Notification.html":{}}}],["src/aplicativo/entities/notification.entity.ts:18",{"_index":791,"title":{},"body":{"entities/Notification.html":{}}}],["src/aplicativo/entities/notification.entity.ts:23",{"_index":782,"title":{},"body":{"entities/Notification.html":{}}}],["src/aplicativo/entities/notification.entity.ts:27",{"_index":790,"title":{},"body":{"entities/Notification.html":{}}}],["src/aplicativo/entities/notification.entity.ts:31",{"_index":786,"title":{},"body":{"entities/Notification.html":{}}}],["src/aplicativo/entities/notification.entity.ts:34",{"_index":777,"title":{},"body":{"entities/Notification.html":{}}}],["src/aplicativo/entities/notification.entity.ts:37",{"_index":783,"title":{},"body":{"entities/Notification.html":{}}}],["src/aplicativo/entities/notification.entity.ts:40",{"_index":778,"title":{},"body":{"entities/Notification.html":{}}}],["src/aplicativo/entities/user.entity.ts",{"_index":872,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/aplicativo/entities/user.entity.ts:17",{"_index":881,"title":{},"body":{"entities/User.html":{}}}],["src/aplicativo/entities/user.entity.ts:23",{"_index":894,"title":{},"body":{"entities/User.html":{}}}],["src/aplicativo/entities/user.entity.ts:30",{"_index":886,"title":{},"body":{"entities/User.html":{}}}],["src/aplicativo/entities/user.entity.ts:35",{"_index":880,"title":{},"body":{"entities/User.html":{}}}],["src/aplicativo/entities/user.entity.ts:40",{"_index":890,"title":{},"body":{"entities/User.html":{}}}],["src/aplicativo/entities/user.entity.ts:44",{"_index":892,"title":{},"body":{"entities/User.html":{}}}],["src/aplicativo/entities/user.entity.ts:48",{"_index":873,"title":{},"body":{"entities/User.html":{}}}],["src/aplicativo/entities/user.entity.ts:52",{"_index":883,"title":{},"body":{"entities/User.html":{}}}],["src/aplicativo/entities/user.entity.ts:57",{"_index":876,"title":{},"body":{"entities/User.html":{}}}],["src/aplicativo/entities/user.entity.ts:60",{"_index":893,"title":{},"body":{"entities/User.html":{}}}],["src/aplicativo/entities/user.entity.ts:63",{"_index":877,"title":{},"body":{"entities/User.html":{}}}],["src/aplicativo/entities/user.entity.ts:69",{"_index":875,"title":{},"body":{"entities/User.html":{}}}],["src/aplicativo/guards/authentication.guard.ts",{"_index":286,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/aplicativo/guards/authentication.guard.ts:15",{"_index":292,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/aplicativo/guards/authentication.guard.ts:30",{"_index":296,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/aplicativo/guards/authentication.guard.ts:58",{"_index":305,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/aplicativo/interfaces/iresponse.interface.ts",{"_index":676,"title":{},"body":{"interfaces/IResponse.html":{},"coverage.html":{}}}],["src/aplicativo/services/authentication.service.ts",{"_index":332,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["src/aplicativo/services/authentication.service.ts:112",{"_index":373,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/aplicativo/services/authentication.service.ts:124",{"_index":370,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/aplicativo/services/authentication.service.ts:136",{"_index":349,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/aplicativo/services/authentication.service.ts:16",{"_index":344,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/aplicativo/services/authentication.service.ts:169",{"_index":386,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/aplicativo/services/authentication.service.ts:194",{"_index":354,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/aplicativo/services/authentication.service.ts:222",{"_index":360,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/aplicativo/services/authentication.service.ts:239",{"_index":391,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/aplicativo/services/authentication.service.ts:39",{"_index":381,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/aplicativo/services/authentication.service.ts:76",{"_index":377,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/aplicativo/services/conta.service.ts",{"_index":547,"title":{},"body":{"injectables/ContaService.html":{},"coverage.html":{}}}],["src/aplicativo/services/conta.service.ts:103",{"_index":555,"title":{},"body":{"injectables/ContaService.html":{}}}],["src/aplicativo/services/conta.service.ts:124",{"_index":551,"title":{},"body":{"injectables/ContaService.html":{}}}],["src/aplicativo/services/conta.service.ts:13",{"_index":550,"title":{},"body":{"injectables/ContaService.html":{}}}],["src/aplicativo/services/conta.service.ts:181",{"_index":557,"title":{},"body":{"injectables/ContaService.html":{}}}],["src/aplicativo/services/conta.service.ts:216",{"_index":552,"title":{},"body":{"injectables/ContaService.html":{}}}],["src/aplicativo/services/conta.service.ts:33",{"_index":554,"title":{},"body":{"injectables/ContaService.html":{}}}],["src/aplicativo/services/conta.service.ts:82",{"_index":556,"title":{},"body":{"injectables/ContaService.html":{}}}],["src/aplicativo/services/lancamento.service.ts",{"_index":740,"title":{},"body":{"injectables/LancamentoService.html":{},"coverage.html":{}}}],["src/aplicativo/services/lancamento.service.ts:117",{"_index":742,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["src/aplicativo/services/lancamento.service.ts:13",{"_index":741,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["src/aplicativo/services/lancamento.service.ts:175",{"_index":749,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["src/aplicativo/services/lancamento.service.ts:214",{"_index":743,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["src/aplicativo/services/lancamento.service.ts:33",{"_index":746,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["src/aplicativo/services/lancamento.service.ts:75",{"_index":748,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["src/aplicativo/services/lancamento.service.ts:96",{"_index":747,"title":{},"body":{"injectables/LancamentoService.html":{}}}],["src/aplicativo/services/notification.service.ts",{"_index":827,"title":{},"body":{"injectables/NotificationService.html":{},"coverage.html":{}}}],["src/aplicativo/services/notification.service.ts:102",{"_index":834,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/aplicativo/services/notification.service.ts:121",{"_index":829,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/aplicativo/services/notification.service.ts:13",{"_index":828,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/aplicativo/services/notification.service.ts:154",{"_index":836,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/aplicativo/services/notification.service.ts:180",{"_index":830,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/aplicativo/services/notification.service.ts:31",{"_index":831,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/aplicativo/services/notification.service.ts:61",{"_index":833,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/aplicativo/services/notification.service.ts:81",{"_index":832,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/aplicativo/services/user.service.ts",{"_index":952,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/aplicativo/services/user.service.ts:108",{"_index":968,"title":{},"body":{"injectables/UserService.html":{}}}],["src/aplicativo/services/user.service.ts:118",{"_index":971,"title":{},"body":{"injectables/UserService.html":{}}}],["src/aplicativo/services/user.service.ts:134",{"_index":970,"title":{},"body":{"injectables/UserService.html":{}}}],["src/aplicativo/services/user.service.ts:14",{"_index":957,"title":{},"body":{"injectables/UserService.html":{}}}],["src/aplicativo/services/user.service.ts:150",{"_index":966,"title":{},"body":{"injectables/UserService.html":{}}}],["src/aplicativo/services/user.service.ts:159",{"_index":986,"title":{},"body":{"injectables/UserService.html":{}}}],["src/aplicativo/services/user.service.ts:175",{"_index":983,"title":{},"body":{"injectables/UserService.html":{}}}],["src/aplicativo/services/user.service.ts:204",{"_index":981,"title":{},"body":{"injectables/UserService.html":{}}}],["src/aplicativo/services/user.service.ts:235",{"_index":977,"title":{},"body":{"injectables/UserService.html":{}}}],["src/aplicativo/services/user.service.ts:273",{"_index":959,"title":{},"body":{"injectables/UserService.html":{}}}],["src/aplicativo/services/user.service.ts:309",{"_index":963,"title":{},"body":{"injectables/UserService.html":{}}}],["src/aplicativo/services/user.service.ts:33",{"_index":972,"title":{},"body":{"injectables/UserService.html":{}}}],["src/aplicativo/services/user.service.ts:69",{"_index":975,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app.controller.ts",{"_index":76,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:26",{"_index":88,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":138,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:14",{"_index":140,"title":{},"body":{"injectables/AppService.html":{}}}],["src/config/typeorm.config",{"_index":41,"title":{},"body":{"modules/AplicativoModule.html":{},"guards/AuthenticationGuard.html":{}}}],["src/config/typeorm.config.ts",{"_index":1049,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":1050,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start:devlicença",{"_index":1145,"title":{},"body":{"index.html":{}}}],["started",{"_index":1109,"title":{"index.html":{}},"body":{}}],["statements",{"_index":1033,"title":{},"body":{"coverage.html":{}}}],["store",{"_index":1068,"title":{},"body":{"dependencies.html":{}}}],["string",{"_index":180,"title":{},"body":{"entities/Authentication.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IResponse.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["sub",{"_index":406,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["success",{"_index":430,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"interfaces/IResponse.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"injectables/UserService.html":{}}}],["sucesso/falha",{"_index":682,"title":{},"body":{"interfaces/IResponse.html":{},"classes/ResponseDto.html":{}}}],["support",{"_index":1154,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1155,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1100,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":1186,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":1053,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1052,"title":{},"body":{"coverage.html":{}}}],["tecnologia",{"_index":1116,"title":{},"body":{"index.html":{}}}],["tempo",{"_index":853,"title":{},"body":{"classes/ResponseDto.html":{}}}],["text",{"_index":223,"title":{},"body":{"entities/Authentication.html":{},"entities/Lancamento.html":{}}}],["text'})@isnotempty",{"_index":183,"title":{},"body":{"entities/Authentication.html":{}}}],["this.active",{"_index":912,"title":{},"body":{"entities/User.html":{}}}],["this.appservice.gethealth",{"_index":117,"title":{},"body":{"controllers/AppController.html":{}}}],["this.create(dto",{"_index":414,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.data",{"_index":861,"title":{},"body":{"classes/ResponseDto.html":{}}}],["this.datasource.createqueryrunner",{"_index":575,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{}}}],["this.deletedat",{"_index":911,"title":{},"body":{"entities/User.html":{}}}],["this.email",{"_index":908,"title":{},"body":{"entities/User.html":{}}}],["this.email.tolowercase",{"_index":909,"title":{},"body":{"entities/User.html":{}}}],["this.error",{"_index":862,"title":{},"body":{"classes/ResponseDto.html":{}}}],["this.extracttokenfromheader(request",{"_index":315,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.jwtservice.sign(payload",{"_index":411,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.jwtservice.verifyasync",{"_index":320,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.message",{"_index":860,"title":{},"body":{"classes/ResponseDto.html":{}}}],["this.repository.delete",{"_index":450,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["this.repository.find",{"_index":425,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["this.repository.findby",{"_index":838,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.repository.findoneby",{"_index":434,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["this.repository.findoneby({uuid",{"_index":445,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{}}}],["this.repository.save(entity",{"_index":439,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/NotificationService.html":{}}}],["this.repository.save(entitytoupdate",{"_index":448,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{}}}],["this.repository.save(user",{"_index":1021,"title":{},"body":{"injectables/UserService.html":{}}}],["this.repository.save(usertoupdate",{"_index":1006,"title":{},"body":{"injectables/UserService.html":{}}}],["this.service.create(dto",{"_index":543,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{}}}],["this.service.createuser(dto",{"_index":949,"title":{},"body":{"controllers/UserController.html":{}}}],["this.service.delete(email",{"_index":951,"title":{},"body":{"controllers/UserController.html":{}}}],["this.service.delete(uuid",{"_index":546,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{}}}],["this.service.findbyid(id",{"_index":941,"title":{},"body":{"controllers/UserController.html":{}}}],["this.service.findone(email",{"_index":939,"title":{},"body":{"controllers/UserController.html":{}}}],["this.service.finduserphoto(id",{"_index":944,"title":{},"body":{"controllers/UserController.html":{}}}],["this.service.getall",{"_index":817,"title":{},"body":{"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["this.service.getallbyuserid(id",{"_index":535,"title":{},"body":{"controllers/ContaController.html":{}}}],["this.service.getbyaccount(id",{"_index":739,"title":{},"body":{"controllers/LancamentoController.html":{}}}],["this.service.getbyguid(uuid",{"_index":821,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.service.getbyid(id",{"_index":538,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{}}}],["this.service.getnotificationstouser(iduser",{"_index":824,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.service.me(req.user",{"_index":283,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.service.signin(dto.username",{"_index":272,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.service.update(dto.uuid",{"_index":540,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{}}}],["this.service.update(uuid",{"_index":826,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.service.updateuser(dto",{"_index":945,"title":{},"body":{"controllers/UserController.html":{}}}],["this.service.updateuserphoto(dto",{"_index":948,"title":{},"body":{"controllers/UserController.html":{}}}],["this.success",{"_index":859,"title":{},"body":{"classes/ResponseDto.html":{}}}],["this.usersservice.findsignin(email",{"_index":454,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.usersservice.findsignin(username",{"_index":402,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.verifypassword(plaintextpassword",{"_index":455,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["throw",{"_index":316,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{}}}],["timestamp",{"_index":165,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["tip_role",{"_index":891,"title":{},"body":{"entities/User.html":{}}}],["tipo",{"_index":634,"title":{},"body":{"classes/CreateLancamentoDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{}}}],["tipolancamento",{"_index":625,"title":{},"body":{"classes/CreateLancamentoDto.html":{},"entities/Lancamento.html":{},"injectables/LancamentoService.html":{},"classes/UpdateLancamentoDto.html":{}}}],["titulo",{"_index":626,"title":{},"body":{"classes/CreateLancamentoDto.html":{},"entities/Lancamento.html":{},"injectables/LancamentoService.html":{},"classes/UpdateLancamentoDto.html":{}}}],["todas",{"_index":519,"title":{},"body":{"controllers/ContaController.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["todos",{"_index":728,"title":{},"body":{"controllers/LancamentoController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["token",{"_index":157,"title":{},"body":{"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/UpdateAuthenticationDto.html":{},"miscellaneous/variables.html":{}}}],["transaction",{"_index":579,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{}}}],["transformer",{"_index":1070,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Authentication.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"injectables/ContaService.html":{},"entities/Lancamento.html":{},"injectables/LancamentoService.html":{},"entities/Notification.html":{},"injectables/NotificationService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["true/false",{"_index":990,"title":{},"body":{"injectables/UserService.html":{}}}],["true})@generated('uuid",{"_index":704,"title":{},"body":{"entities/Lancamento.html":{}}}],["true})@isemail",{"_index":879,"title":{},"body":{"entities/User.html":{}}}],["true})@joincolumn({name",{"_index":784,"title":{},"body":{"entities/Notification.html":{}}}],["try",{"_index":318,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["txt_categories",{"_index":684,"title":{},"body":{"entities/Lancamento.html":{}}}],["txt_description",{"_index":473,"title":{},"body":{"entities/Conta.html":{},"entities/Lancamento.html":{}}}],["txt_email",{"_index":878,"title":{},"body":{"entities/User.html":{}}}],["txt_message",{"_index":793,"title":{},"body":{"entities/Notification.html":{}}}],["txt_message'})@isnotempty",{"_index":781,"title":{},"body":{"entities/Notification.html":{}}}],["txt_name",{"_index":483,"title":{},"body":{"entities/Conta.html":{},"entities/User.html":{}}}],["txt_password",{"_index":887,"title":{},"body":{"entities/User.html":{}}}],["txt_title",{"_index":701,"title":{},"body":{"entities/Lancamento.html":{}}}],["txt_token",{"_index":182,"title":{},"body":{"entities/Authentication.html":{}}}],["txt_uuid",{"_index":201,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["type",{"_index":161,"title":{},"body":{"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IResponse.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/ResponseDto.html":{},"classes/SignInDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type:'text",{"_index":715,"title":{},"body":{"entities/Lancamento.html":{}}}],["typeorm",{"_index":214,"title":{},"body":{"entities/Authentication.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"injectables/ContaService.html":{},"entities/Lancamento.html":{},"injectables/LancamentoService.html":{},"entities/Notification.html":{},"injectables/NotificationService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormconfig",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeormmodule",{"_index":36,"title":{},"body":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{}}}],["typeormmodule.forfeature",{"_index":63,"title":{},"body":{"modules/AplicativoModule.html":{}}}],["typeormmodule.forroot(typeormconfig",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":1174,"title":{},"body":{"miscellaneous/variables.html":{}}}],["types/bcrypt",{"_index":1063,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":1120,"title":{},"body":{"index.html":{}}}],["título",{"_index":635,"title":{},"body":{"classes/CreateLancamentoDto.html":{},"classes/UpdateLancamentoDto.html":{}}}],["ui",{"_index":1101,"title":{},"body":{"dependencies.html":{}}}],["um",{"_index":307,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["uma",{"_index":509,"title":{},"body":{"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["unauthorizedexception",{"_index":311,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{}}}],["unauthorizedexception(error",{"_index":417,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["undefined",{"_index":310,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"entities/Notification.html":{}}}],["unique",{"_index":202,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["unknown",{"_index":368,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["unsigned",{"_index":175,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["update",{"_index":339,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{}}}],["update(@body",{"_index":539,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/UserController.html":{}}}],["update(@param('uuid",{"_index":825,"title":{},"body":{"controllers/NotificationController.html":{}}}],["update(dto",{"_index":521,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/UserController.html":{}}}],["update(uuid",{"_index":384,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["updateauthenticationdto",{"_index":385,"title":{"classes/UpdateAuthenticationDto.html":{}},"body":{"injectables/AuthenticationService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/UpdateAuthenticationDto.html":{},"coverage.html":{}}}],["updatecontadto",{"_index":522,"title":{"classes/UpdateContaDto.html":{}},"body":{"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateContaDto.html":{},"classes/UpdateContaDto.html":{},"coverage.html":{}}}],["updated",{"_index":449,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ContaService.html":{},"injectables/LancamentoService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["updatedat",{"_index":158,"title":{},"body":{"entities/Authentication.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"injectables/ContaService.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"injectables/NotificationService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["updatedatecolumn",{"_index":210,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["updatedatecolumn({name",{"_index":185,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Lancamento.html":{},"entities/Notification.html":{},"entities/User.html":{}}}],["updatelancamentodto",{"_index":636,"title":{"classes/UpdateLancamentoDto.html":{}},"body":{"classes/CreateLancamentoDto.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"classes/UpdateLancamentoDto.html":{},"coverage.html":{}}}],["updatenotificationdto",{"_index":649,"title":{"classes/UpdateNotificationDto.html":{}},"body":{"classes/CreateNotificationDto.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["updates",{"_index":1081,"title":{},"body":{"dependencies.html":{}}}],["updateuser",{"_index":955,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuser(updateuserdto",{"_index":976,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto",{"_index":665,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserdto.active",{"_index":1020,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto.email",{"_index":1010,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto.name",{"_index":1013,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto.name.length",{"_index":1014,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto.role",{"_index":1018,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserphoto",{"_index":915,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuserphoto(@body",{"_index":947,"title":{},"body":{"controllers/UserController.html":{}}}],["updateuserphoto(dto",{"_index":932,"title":{},"body":{"controllers/UserController.html":{}}}],["updateuserphoto(updateuserphotodto",{"_index":980,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserphotodto",{"_index":672,"title":{"classes/UpdateUserPhotoDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserphotodto.id",{"_index":1003,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserphotodto.image",{"_index":1005,"title":{},"body":{"injectables/UserService.html":{}}}],["usar",{"_index":1136,"title":{},"body":{"index.html":{}}}],["useguards",{"_index":252,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(authenticationguard",{"_index":274,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["usepipes",{"_index":525,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["usepipes(new",{"_index":541,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["user",{"_index":48,"title":{"entities/User.html":{}},"body":{"modules/AplicativoModule.html":{},"entities/Authentication.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.active",{"_index":1019,"title":{},"body":{"injectables/UserService.html":{}}}],["user.decorator.ts",{"_index":1040,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.email",{"_index":407,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UserService.html":{}}}],["user.entity",{"_index":217,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Notification.html":{}}}],["user.id",{"_index":191,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"entities/Notification.html":{}}}],["user.name",{"_index":1011,"title":{},"body":{"injectables/UserService.html":{}}}],["user.password",{"_index":405,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UserService.html":{}}}],["user.role",{"_index":409,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UserService.html":{}}}],["user.service",{"_index":394,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["usercontroller",{"_index":30,"title":{"controllers/UserController.html":{}},"body":{"modules/AplicativoModule.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["userid",{"_index":159,"title":{},"body":{"entities/Authentication.html":{},"entities/Conta.html":{},"injectables/ContaService.html":{},"classes/CreateContaDto.html":{},"classes/CreateNotificationDto.html":{},"entities/Notification.html":{},"injectables/NotificationService.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateNotificationDto.html":{}}}],["username",{"_index":383,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/SignInDto.html":{},"miscellaneous/variables.html":{}}}],["userrole",{"_index":901,"title":{},"body":{"entities/User.html":{}}}],["users",{"_index":995,"title":{},"body":{"injectables/UserService.html":{}}}],["users.length",{"_index":996,"title":{},"body":{"injectables/UserService.html":{}}}],["users[0",{"_index":997,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":13,"title":{"injectables/UserService.html":{}},"body":{"modules/AplicativoModule.html":{},"injectables/AuthenticationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usersservice",{"_index":343,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["usertoupdate",{"_index":1002,"title":{},"body":{"injectables/UserService.html":{}}}],["usertoupdate.email",{"_index":1015,"title":{},"body":{"injectables/UserService.html":{}}}],["usertoupdate.image",{"_index":1004,"title":{},"body":{"injectables/UserService.html":{}}}],["usertoupdate.name",{"_index":1012,"title":{},"body":{"injectables/UserService.html":{}}}],["usertoupdate.password",{"_index":1016,"title":{},"body":{"injectables/UserService.html":{}}}],["usertoupdate.role",{"_index":1017,"title":{},"body":{"injectables/UserService.html":{}}}],["utilidador",{"_index":918,"title":{},"body":{"controllers/UserController.html":{}}}],["utilizador",{"_index":232,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/SignInDto.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["utilizadores",{"_index":930,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["uuid",{"_index":160,"title":{},"body":{"entities/Authentication.html":{},"injectables/AuthenticationService.html":{},"entities/Conta.html":{},"controllers/ContaController.html":{},"injectables/ContaService.html":{},"classes/CreateAuthenticationDto.html":{},"classes/CreateContaDto.html":{},"classes/CreateLancamentoDto.html":{},"classes/CreateNotificationDto.html":{},"entities/Lancamento.html":{},"controllers/LancamentoController.html":{},"injectables/LancamentoService.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateAuthenticationDto.html":{},"classes/UpdateContaDto.html":{},"classes/UpdateLancamentoDto.html":{},"classes/UpdateNotificationDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["uuid.length",{"_index":590,"title":{},"body":{"injectables/ContaService.html":{},"injectables/LancamentoService.html":{}}}],["valida",{"_index":297,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/UserService.html":{}}}],["validar",{"_index":144,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{}}}],["validate",{"_index":403,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UserService.html":{}}}],["validate(id",{"_index":982,"title":{},"body":{"injectables/UserService.html":{}}}],["validatepassword",{"_index":956,"title":{},"body":{"injectables/UserService.html":{}}}],["validatepassword(plain",{"_index":984,"title":{},"body":{"injectables/UserService.html":{}}}],["validationpipe",{"_index":507,"title":{},"body":{"controllers/ContaController.html":{},"controllers/LancamentoController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["validator",{"_index":216,"title":{},"body":{"entities/Authentication.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"entities/Notification.html":{},"classes/SignInDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPhotoDto.html":{},"entities/User.html":{},"dependencies.html":{}}}],["valor",{"_index":627,"title":{},"body":{"classes/CreateLancamentoDto.html":{},"entities/Lancamento.html":{},"injectables/LancamentoService.html":{},"classes/UpdateLancamentoDto.html":{}}}],["value",{"_index":1169,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":1041,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1166,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verdade",{"_index":90,"title":{},"body":{"controllers/AppController.html":{}}}],["verdadeiro",{"_index":97,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["verifypassword",{"_index":340,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["verifypassword(plaintextpassword",{"_index":389,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["version",{"_index":1161,"title":{},"body":{"properties.html":{}}}],["vírgula",{"_index":629,"title":{},"body":{"classes/CreateLancamentoDto.html":{},"classes/UpdateLancamentoDto.html":{}}}],["we're",{"_index":321,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["zoom",{"_index":18,"title":{},"body":{"modules/AplicativoModule.html":{},"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AplicativoModule.html":{"url":"modules/AplicativoModule.html","title":"module - AplicativoModule","body":"\n                   \n\n\n\n\n    Modules\n    AplicativoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AplicativoModule\n\n\n\ncluster_AplicativoModule_exports\n\n\n\ncluster_AplicativoModule_providers\n\n\n\n\nAuthenticationService \n\nAuthenticationService \n\n\n\nUserService \n\nUserService \n\n\n\nAplicativoModule\n\nAplicativoModule\n\nAuthenticationService  -->\n\nAplicativoModule->AuthenticationService \n\n\n\nUserService  -->\n\nAplicativoModule->UserService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAplicativoModule -->\n\nAuthenticationService->AplicativoModule\n\n\n\n\n\nContaService\n\nContaService\n\nAplicativoModule -->\n\nContaService->AplicativoModule\n\n\n\n\n\nLancamentoService\n\nLancamentoService\n\nAplicativoModule -->\n\nLancamentoService->AplicativoModule\n\n\n\n\n\nNotificationService\n\nNotificationService\n\nAplicativoModule -->\n\nNotificationService->AplicativoModule\n\n\n\n\n\nUserService\n\nUserService\n\nAplicativoModule -->\n\nUserService->AplicativoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/aplicativo/aplicativo.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Módulo do aplicativo\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationService\n                        \n                        \n                            ContaService\n                        \n                        \n                            LancamentoService\n                        \n                        \n                            NotificationService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthenticationController\n                        \n                        \n                            UserController\n                        \n                        \n                            NotificationController\n                        \n                        \n                            ContaController\n                        \n                        \n                            LancamentoController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthenticationService\n                        \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from 'src/config/typeorm.config';\n\nimport { AuthenticationController } from './controllers/authentication.controller';\nimport { AuthenticationService } from './services/authentication.service';\nimport { Authentication } from './entities/authentication.entity';\n\nimport { UserController } from './controllers/user.controller';\nimport { UserService } from './services/user.service';\nimport { User } from './entities/user.entity';\n\nimport { Notification } from './entities/notification.entity';\nimport { NotificationController } from './controllers/notification.controller';\nimport { NotificationService } from './services/notification.service';\n\n\nimport { Conta } from './entities/conta.entity';\nimport { ContaController } from './controllers/conta.controller';\nimport { ContaService } from './services/conta.service';\n\nimport { Lancamento } from './entities/lancamento.entity';\nimport { LancamentoController } from './controllers/lancamento.controller';\nimport { LancamentoService } from './services/lancamento.service';\n\n/**\n * Módulo do aplicativo\n */\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      User,      \n      Authentication,\n      Notification,\n      Lancamento,\n      Conta\n    ]),\n    JwtModule.register({      \n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '3600s' },\n    })    \n  ],\n  controllers: [\n    AuthenticationController,\n    UserController,\n    NotificationController,\n    ContaController,    \n    LancamentoController\n  ],\n  providers: [\n    AuthenticationService,\n    UserService,\n    NotificationService,\n    ContaService,    \n    LancamentoService\n  ],\n  exports: [ \n    AuthenticationService,\n    UserService,\n  ],\n})\nexport class AplicativoModule  {\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n            \n                Description\n            \n            \n                Controlador básico do sistema\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getHealth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getHealth\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHealth()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:26\n                        \n                    \n\n\n            \n                \n                        Returna VERDADE se a API estiver a rodar\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Verdadeiro, se estiver a funcionar correctamente\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { ApiTags } from '@nestjs/swagger';\nimport { Get } from '@nestjs/common/decorators/http/request-mapping.decorator';\n\n/**\n * Controlador básico do sistema\n */\n@ApiTags('Health')\n@Controller('health')\nexport class AppController {\n  \n  /**\n   * Constructor do Serviço / Injeção de Dependência\n   * \n   * @param {AppService} appService serviço básico do sistema\n   */\n  constructor(private readonly appService: AppService) {}\n\n  /**\n   * Returna VERDADE se a API estiver a rodar\n   *\n   * @returns Verdadeiro, se estiver a funcionar correctamente\n   */\n  @Get()\n  async getHealth(): Promise {\n    return this.appService.getHealth();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAplicativoModule\n\nAplicativoModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAplicativoModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Módulo central de carga do sistema\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AplicativoModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { typeOrmConfig } from './config/typeorm.config';\nimport { AplicativoModule } from './aplicativo/aplicativo.module';\nimport { ConfigModule } from '@nestjs/config';\n\n/**\n * Módulo central de carga do sistema\n */\n@Module({\n  imports: [\n    TypeOrmModule.forRoot(typeOrmConfig), \n    AplicativoModule,\n    ConfigModule.forRoot({ isGlobal: true, cache: true })\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule{\n \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Serviço básico da API\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getHealth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getHealth\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHealth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:14\n                        \n                    \n\n\n            \n                \n                        Função simples para validar o funcionamento da API\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Verdadeiro, se estiver a funcionar correctamente\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * Serviço básico da API\n */\n@Injectable()\nexport class AppService {\n\n  /**\n   * Função simples para validar o funcionamento da API\n   * \n   * @returns {boolean} Verdadeiro, se estiver a funcionar correctamente\n   */\n  async getHealth(): Promise {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Authentication.html":{"url":"entities/Authentication.html","title":"entity - Authentication","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Authentication\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/entities/authentication.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entidade Autenticação\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                token\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                    \n                                userId\n                            \n                            \n                                    \n                                    \n                                    \n                                uuid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'DAT_CREATED', type: 'timestamp', default: () => NOW()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/authentication.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({name: 'DAT_DELETED', type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/authentication.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@PrimaryGeneratedColumn({name: 'COD_AUTHENTICATION_ID', unsigned: true, comment: 'Primary Key'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/authentication.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'TXT_TOKEN', type: 'text'})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/authentication.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'DAT_UPDATED', type: 'timestamp', onUpdate: 'CURRENT_TIMESTAMP(6)'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/authentication.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.id, {onDelete: 'NO ACTION', onUpdate: 'NO ACTION'})@JoinColumn({name: 'COD_USER_ID', foreignKeyConstraintName: 'FK_AUTHENTICATION_USER'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/authentication.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'COD_USER_ID', unsigned: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/authentication.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'TXT_UUID', unique: true, comment: 'Another PK as GUID'})@Generated('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/authentication.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, Generated, UpdateDateColumn, DeleteDateColumn, JoinColumn, ManyToOne } from 'typeorm';\nimport { IsNotEmpty } from 'class-validator';\nimport { User } from './user.entity';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * Entidade Autenticação\n */\n@Entity('TB_AUTHENTICATION')\nexport class Authentication {\n  @ApiProperty()\n  @PrimaryGeneratedColumn({ name: 'COD_AUTHENTICATION_ID', unsigned: true, comment: 'Primary Key' })\n  id: number;\n\n  @ApiProperty()\n  @Column({ name: 'TXT_UUID', unique: true, comment: 'Another PK as GUID' })\n  @Generated(\"uuid\")\n  uuid: string;\n\n  @ApiProperty()\n  @Column({ name: 'TXT_TOKEN', type: 'text' })\n  @IsNotEmpty()\n  token: string;\n\n  @ApiProperty()\n  @Column({ name: 'COD_USER_ID', unsigned: true, nullable: true })\n  userId: number;\n\n  @ManyToOne(() => User, user => user.id, { onDelete: 'NO ACTION', onUpdate: 'NO ACTION' })\n  @JoinColumn({ name: \"COD_USER_ID\", foreignKeyConstraintName: 'FK_AUTHENTICATION_USER' })\n  user: User;\n\n  @Column({ name: 'DAT_CREATED', type: 'timestamp', default: () => 'NOW()' })\n  createdAt: Date;\n  \n  @UpdateDateColumn({ name: 'DAT_UPDATED', type: 'timestamp', onUpdate: 'CURRENT_TIMESTAMP(6)' })\n  updatedAt: Date;\n  \n  @DeleteDateColumn({ name: 'DAT_DELETED', type: 'timestamp' })\n  deletedAt: Date;  \n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthenticationController.html":{"url":"controllers/AuthenticationController.html","title":"controller - AuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/controllers/authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                Controlador de Autenticação\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    Async\n                                me\n                            \n                            \n                                    \n                                    \n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(AuthenticationGuard)@Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/authentication.controller.ts:45\n                        \n                    \n\n\n            \n                \n                        Obtém o Utilizador logado\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Requisição (Parâmetro automático)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Utilizador\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        me\n                        \n                    \n                \n            \n            \n                \n                        \n                    me(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Get('me')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/authentication.controller.ts:57\n                        \n                    \n\n\n            \n                \n                        Obtém o Utilizador logado\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Requisição (Parâmetro automático)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Utilizador\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(dto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/authentication.controller.ts:32\n                        \n                    \n\n\n            \n                \n                        Autenticação do Utilizador\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO de Autenticação\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Utilizador com token JWT\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, HttpCode, HttpStatus, UseGuards, Request } from '@nestjs/common';\nimport { AuthenticationService } from '../services/authentication.service';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { SignInDto } from '../dto/sign-in-dto';\nimport { Get, Post } from '@nestjs/common/decorators/http/request-mapping.decorator';\nimport { Body } from '@nestjs/common/decorators/http/route-params.decorator';\nimport { AuthenticationGuard } from '../guards/authentication.guard';\nimport { IResponse } from '../interfaces/iresponse.interface';\n\n/**\n * Controlador de Autenticação\n */\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthenticationController {\n\n  /**\n   * Injeção de Dependencia pelo constructor\n   * \n   * @param {AuthenticationService} Serviço de Autenticação\n   */\n  constructor(private service: AuthenticationService) {}\n\n  /**\n   * Autenticação do Utilizador\n   * \n   * @param {SignInDto} dto DTO de Autenticação\n   * @returns {User} Utilizador com token JWT\n   */\n  @HttpCode(HttpStatus.OK)\n  @Post('login')\n  signIn(@Body() dto: SignInDto) {\n    return this.service.signIn(dto.username, dto.password);\n  }\n\n  /**\n   * Obtém o Utilizador logado\n   * \n   * @param req Requisição (Parâmetro automático)\n   * @returns {User} Utilizador\n   */\n  @ApiBearerAuth()\n  @UseGuards(AuthenticationGuard)\n  @Get('profile')\n  getProfile(@Request() req) {\n    return req.user;\n  }\n  \n  /**\n   * Obtém o Utilizador logado\n   * \n   * @param req Requisição (Parâmetro automático)\n   * @returns {User} Utilizador\n   */  \n  @ApiBearerAuth()\n  @Get('me')\n  async me(@Request() req): Promise {\n    const result = await this.service.me(req.user);\n    return result;\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/aplicativo/guards/authentication.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Guard de Autenticação\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractTokenFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/aplicativo/guards/authentication.guard.ts:15\n                            \n                        \n\n                \n                    \n                            Injeção de Dependência\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Serviço responsável pelo JWT\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/guards/authentication.guard.ts:30\n                        \n                    \n\n\n            \n                \n                        Valida se o utilizador pode aceder\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Contexto de Execução\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Permissão de execução\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractTokenFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractTokenFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/guards/authentication.guard.ts:58\n                        \n                    \n\n\n            \n                \n                        Extrai o token de um header, se houver\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { Request } from 'express';\nimport { jwtConstants } from 'src/config/typeorm.config';\n\n/**\n * Guard de Autenticação\n */\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n\n  /**\n   * Injeção de Dependência\n   * \n   * @param jwtService Serviço responsável pelo JWT\n   */\n  constructor(private jwtService: JwtService) {}\n\n  /**\n   * Valida se o utilizador pode aceder\n   * \n   * @param context Contexto de Execução\n   * @returns {boolean} Permissão de execução\n   */  \n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n    const token = this.extractTokenFromHeader(request);\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n    try {\n      const payload = await this.jwtService.verifyAsync(\n        token,\n        {\n          secret: jwtConstants.secret\n        }\n      );\n      // 💡 We're assigning the payload to the request object here\n      // so that we can access it in our route handlers\n      request['user'] = payload;\n    } catch {\n      throw new UnauthorizedException();\n    }\n    return true;\n  }\n\n  /**\n   * Extrai o token de um header, se houver\n   * \n   * @param request {Request}\n   * @returns {string}\n   */\n  private extractTokenFromHeader(request: Request): string | undefined {\n    const [type, token] = request.headers.authorization?.split(' ') ?? [];\n    return type === 'Bearer' ? token : undefined;\n  }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/services/authentication.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Serviço de Autenticação\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                getAuthenticatedUser\n                            \n                            \n                                    Async\n                                getByGuid\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                me\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Private\n                                    Async\n                                verifyPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository, usersService: UserService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/aplicativo/services/authentication.service.ts:16\n                            \n                        \n\n                \n                    \n                            Injeção de Dependencia pelo constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Repositório de Dados de Autenticação\n\n                                                        \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateAuthenticationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/authentication.service.ts:136\n                        \n                    \n\n\n            \n                \n                        Criar autenticação\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateAuthenticationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO de criação de registo da autenticação\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Autenticação\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(uuid: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/authentication.service.ts:194\n                        \n                    \n\n\n            \n                \n                        Excluir autenticação\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    identificador secundário do utilizador\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Autenticação\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getAuthenticatedUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAuthenticatedUser(email: string, plainTextPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/authentication.service.ts:222\n                        \n                    \n\n\n            \n                \n                        Obter Utilizador autenticado\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    conta de e-mail do utilizador\n\n                                            \n                                        \n                                        \n                                                plainTextPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    senha de acesso do utilizador\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Utilizador\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getByGuid\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByGuid(uuid: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/authentication.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Obter Autenticação por uuid\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    identificador secundário do utilizador\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Autenticação\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/authentication.service.ts:112\n                        \n                    \n\n\n            \n                \n                        Obter autenticação por identificador primário\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    identificador principal da autenticação\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Autenticação\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        me\n                        \n                    \n                \n            \n            \n                \n                        \n                    me(user: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/authentication.service.ts:76\n                        \n                    \n\n\n            \n                \n                        Retorna o utilizador autenticado\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(username, pass)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/authentication.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Autenticar Utilizador\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                username\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    conta de e-email do utilizador\n\n                                            \n                                        \n                                        \n                                                pass\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    senha de acesso do utilizador\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                DTO de Autenticação\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(uuid: string, dto: UpdateAuthenticationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/authentication.service.ts:169\n                        \n                    \n\n\n            \n                \n                        Actualizar autenticação\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    identificador secundário do utilizador\n\n                                            \n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdateAuthenticationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO de actualização de registo da autenticação\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Autenticação\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        verifyPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyPassword(plainTextPassword: string, hashedPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/authentication.service.ts:239\n                        \n                    \n\n\n            \n                \n                        Validar senha\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                plainTextPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    senha de acesso do utilizador\n\n                                            \n                                        \n                                        \n                                                hashedPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    senha criptografada\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { Authentication } from '../entities/authentication.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateAuthenticationDto, UpdateAuthenticationDto } from '../dto/authentication-dto';\nimport { ResponseDto } from '../dto/response-dto';\nimport { IResponse } from '../interfaces/iresponse.interface';\nimport { compare } from 'bcrypt';\n\n/**\n * Serviço de Autenticação\n **/\n@Injectable()\nexport class AuthenticationService {\n\n   /**\n    * Injeção de Dependencia pelo constructor\n    * \n    * @param {Repository} repository Repositório de Dados de Autenticação\n    */\n    constructor(\n        @InjectRepository(Authentication)\n          private readonly repository: Repository,      \n        private usersService: UserService,\n        private jwtService: JwtService,\n      ) {\n\n    }\n    \n  /**\n   * Autenticar Utilizador\n   * \n   * @param {string} username conta de e-email do utilizador\n   * @param {string} pass senha de acesso do utilizador\n   * @returns {CreateAuthenticationDto} DTO de Autenticação\n   */\n    async signIn(username, pass) {        \n        try {                    \n          const user = await this.usersService.findSignIn(username);          \n          if (user) {\n            const validate = await compare(pass, user.password);\n            if (!validate) {\n              throw new UnauthorizedException();\n            }\n            const payload = { sub: user, username: user.email, role: user.role };\n                \n            try {\n              const access_token = this.jwtService.sign(payload);              \n              const dto = new CreateAuthenticationDto();\n              dto.token = access_token;\n              dto.user = user;\n              await this.create(dto);\n              return dto;\n            } catch (error) {\n              const dto = new CreateAuthenticationDto();\n              dto.token = error;\n              dto.user = null;\n              return dto;  \n            }\n            \n          } else {\n            throw new UnauthorizedException();\n          }            \n        } catch (error) {\n          throw new UnauthorizedException(error);\n        }\n    }\n\n  /**   \n   * Retorna o utilizador autenticado\n   * \n   * @param {any} me\n   */    \n    async me(user: any): Promise {\n      /* lookupAll() gets all data only active is true */\n      try {\n        const response = new ResponseDto();\n        response.success = true;      \n        response.data = await this.repository.find({\n          select: {\n             id: true,\n             uuid: true,\n             token: true,\n             createdAt: true,\n             updatedAt: true,\n             deletedAt: true,             \n          },\n          relations: {\n            user: true\n          },\n          where: {\n            user: user\n          },\n          cache: true\n        });\n        response.error = null;\n        response.message = '';\n        return response;\n      } catch (error) {\n        return { success: false, data: null, message: 'Error occurred.', error: error };      \n      }\n    }\n\n  /**\n   * Obter autenticação por identificador primário\n   * \n   * @param {number} id identificador principal da autenticação\n   * @returns {Authentication} Autenticação\n   */    \n    async getById(id: number): Promise {\n      return await this.repository.findOneBy({\n        id: id,\n      });\n    }\n  \n  /**\n   * Obter Autenticação por uuid\n   * \n   * @param {string} uuid identificador secundário do utilizador\n   * @returns {Authentication} Autenticação\n   */    \n    async getByGuid(uuid: string): Promise {\n      return await this.repository.findOneBy({\n        uuid: uuid,\n      });\n    }\n  \n  /**\n   * Criar autenticação\n   * \n   * @param {CreateAuthenticationDto} dto DTO de criação de registo da autenticação\n   * @returns {Authentication} Autenticação\n   */    \n    async create(dto: CreateAuthenticationDto): Promise {  \n      try {\n        const response = new ResponseDto();\n\n        const entity = new Authentication();\n        entity.token = dto ? dto.token : '';\n        entity.userId = dto ? dto.user.id : 0;\n  \n        const result = await this.repository.save(entity);\n        if (result.id) {\n          response.success = true;\n          response.message = 'record has been created';\n          response.data = result;\n          response.error = null;\n        } else {\n          response.success = false;\n          response.message = 'record cant be created';\n          response.data = result;\n          response.error = null;          \n        }\n        return response;      \n    } catch (error) {\n        return { success: false, message: 'record cant be created', data: null, error: error };  \n    }\n    }\n    \n  /**\n   * Actualizar autenticação\n   * \n   * @param {string} uuid identificador secundário do utilizador\n   * @param {UpdateAuthenticationDto} dto DTO de actualização de registo da autenticação\n   * @returns {Authentication} Autenticação\n   */    \n    async update(uuid: string, dto: UpdateAuthenticationDto): Promise {  \n      try {\n        const response = new ResponseDto();\n\n        const entityToUpdate = await this.repository.findOneBy({uuid: uuid});\n      \n        entityToUpdate.token = (entityToUpdate.token !== dto.token) && dto.token.length > 0 ? dto.token : entityToUpdate.token;\n  \n        const result = this.repository.save(entityToUpdate);\n        response.success = true;\n        response.data = result;\n        response.message = 'record has been updated';\n        response.error = null;        \n        return response;\n      } catch (error) {\n        return {success: false, message: 'record cant be updated', data: null, error: error };  \n      }\n    }\n  \n  /**\n   * Excluir autenticação\n   * \n   * @param {string} uuid identificador secundário do utilizador\n   * @returns {Authentication} Autenticação\n   */   \n    async delete(uuid: string): Promise {\n      try {\n        const response = new ResponseDto();\n        const result = await this.repository.delete( { uuid: uuid } );\n        if (result.affected && result.affected > 0) {\n          response.success = true;\n          response.data = result.affected;\n          response.message = 'record has been deleted';\n          response.error = result.raw;\n        } else {\n          response.success = false;\n          response.data = result.affected;\n          response.message = 'record cant be deleted';\n          response.error = result.raw;          \n        }\n        return response;\n      } catch (error) {\n        return {success: false, message: 'record cant be deleted', data: null, error: error };\n      }\n    }\n\n  /**\n   * Obter Utilizador autenticado\n   *\n   * @param {string} email conta de e-mail do utilizador\n   * @param {string} plainTextPassword senha de acesso do utilizador\n   * @returns {User} Utilizador\n   */    \n    public async getAuthenticatedUser(email: string, plainTextPassword: string) {\n      try {\n        const user = await this.usersService.findSignIn(email);\n        await this.verifyPassword(plainTextPassword, user.password);\n        user.password = undefined;\n        return user;\n      } catch (error) {\n        throw new HttpException('Wrong credentials provided', HttpStatus.BAD_REQUEST);\n      }\n    }\n\n    /**\n     * Validar senha\n     *\n     * @param {string} plainTextPassword senha de acesso do utilizador\n     * @param {string} hashedPassword senha criptografada\n     */    \n    private async verifyPassword(plainTextPassword: string, hashedPassword: string) {\n      const isPasswordMatching = await compare(\n        plainTextPassword,\n        hashedPassword\n      );\n      if (!isPasswordMatching) {\n        throw new HttpException('Wrong credentials provided', HttpStatus.BAD_REQUEST);\n      }\n    }    \n  }\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Conta.html":{"url":"entities/Conta.html","title":"entity - Conta","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Conta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/entities/conta.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entidade Conta\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                active\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                    \n                                descricao\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                lancamentos\n                            \n                            \n                                    \n                                    \n                                nome\n                            \n                            \n                                    \n                                    \n                                saldoConsolidado\n                            \n                            \n                                    \n                                    \n                                saldoCredito\n                            \n                            \n                                    \n                                    \n                                saldoDebito\n                            \n                            \n                                    \n                                    \n                                saldoFuturo\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                    \n                                userId\n                            \n                            \n                                    \n                                    \n                                    \n                                uuid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'FLG_ACTIVE', default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/conta.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'DAT_CREATED', type: 'timestamp', default: () => NOW()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/conta.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({name: 'DAT_DELETED', type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/conta.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        descricao\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'TXT_DESCRIPTION'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/conta.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@PrimaryGeneratedColumn({name: 'COD_ACCOUNT_ID', unsigned: true, comment: 'Primary Key'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/conta.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        lancamentos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Lancamento[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, lancamento => lancamento.conta, {lazy: true, nullable: true, cascade: false, onDelete: 'NO ACTION', onUpdate: 'NO ACTION', createForeignKeyConstraints: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/conta.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        nome\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'TXT_NAME'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/conta.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        saldoConsolidado\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'NUM_BALANCE_CONSOLIDATED', unsigned: false, default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/conta.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        saldoCredito\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'NUM_BALANCE_CREDIT', unsigned: false, default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/conta.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        saldoDebito\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'NUM_BALANCE_DEBIT', unsigned: false, default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/conta.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        saldoFuturo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'NUM_BALANCE_FUTURE', unsigned: false, default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/conta.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'DAT_UPDATED', type: 'timestamp', onUpdate: 'CURRENT_TIMESTAMP(6)'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/conta.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.id, {onDelete: 'NO ACTION', onUpdate: 'NO ACTION'})@JoinColumn({name: 'COD_USER_ID', foreignKeyConstraintName: 'FK_ACCOUNT_USER'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/conta.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'COD_USER_ID', unsigned: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/conta.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'TXT_UUID', unique: true, comment: 'Another PK as GUID'})@Generated('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/conta.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, DeleteDateColumn, Entity, Generated, JoinColumn, ManyToOne, OneToMany, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\nimport { ApiProperty } from \"@nestjs/swagger\";\nimport { User } from \"./user.entity\";\nimport { Lancamento } from \"./lancamento.entity\";\n\n/**\n * Entidade Conta\n */\n@Entity('TB_ACCOUNT')\nexport class Conta {\n    @ApiProperty()\n    @PrimaryGeneratedColumn({ name: 'COD_ACCOUNT_ID', unsigned: true, comment: 'Primary Key' })\n    id: number;\n  \n    @ApiProperty()\n    @Column({ name: 'TXT_UUID', unique: true, comment: 'Another PK as GUID' })\n    @Generated(\"uuid\")\n    uuid: string;  \n\n    @ApiProperty()\n    @Column({ name: 'TXT_NAME' }) \n    nome: string;\n\n    @ApiProperty()\n    @Column({ name: 'TXT_DESCRIPTION' }) \n    descricao: string;\n\n    @ApiProperty()\n    @Column({ name: 'NUM_BALANCE_CREDIT', unsigned: false, default: 0 })\n    saldoCredito: number;\n\n    @ApiProperty()\n    @Column({ name: 'NUM_BALANCE_DEBIT', unsigned: false, default: 0 })    \n    saldoDebito: number;\n\n    @ApiProperty()\n    @Column({ name: 'NUM_BALANCE_FUTURE', unsigned: false, default: 0 })    \n    saldoFuturo: number;\n\n    @ApiProperty()\n    @Column({ name: 'NUM_BALANCE_CONSOLIDATED', unsigned: false, default: 0 })    \n    saldoConsolidado: number;\n\n    @ApiProperty()\n    @Column({ name: 'COD_USER_ID', unsigned: true, nullable: true })\n    userId: number;\n  \n    @ManyToOne(() => User, user => user.id, { onDelete: 'NO ACTION', onUpdate: 'NO ACTION' })\n    @JoinColumn({ name: \"COD_USER_ID\", foreignKeyConstraintName: 'FK_ACCOUNT_USER' })\n    user: User;\n  \n    @ApiProperty()\n    @Column({ name: 'FLG_ACTIVE', default: true })\n    active: boolean;\n  \n    @Column({ name: 'DAT_CREATED', type: 'timestamp', default: () => 'NOW()' })\n    createdAt: Date;\n    \n    @UpdateDateColumn({ name: 'DAT_UPDATED', type: 'timestamp', onUpdate: 'CURRENT_TIMESTAMP(6)' })\n    updatedAt: Date;\n    \n    @DeleteDateColumn({ name: 'DAT_DELETED', type: 'timestamp' })\n    deletedAt: Date;  \n\n    @OneToMany(() => Lancamento, (lancamento) => lancamento.conta, \n                { lazy: true, nullable: true, cascade: false, \n                  onDelete: 'NO ACTION', onUpdate: 'NO ACTION',\n                  createForeignKeyConstraints: true })    \n    lancamentos?: Lancamento[]\n  \n  }\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ContaController.html":{"url":"controllers/ContaController.html","title":"controller - ContaController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ContaController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/controllers/conta.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                account\n            \n\n\n            \n                Description\n            \n            \n                Controlador de Conta\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findById\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getByUserId\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateContaDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Post()@UsePipes(new ValidationPipe())\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/conta.controller.ts:76\n                        \n                    \n\n\n            \n                \n                        Criar uma Conta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateContaDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO de criação de Conta\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Conta\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(uuid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Delete(':uuid')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/conta.controller.ts:88\n                        \n                    \n\n\n            \n                \n                        Excluir o Lançamento\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Identificador secundário\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Conta\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Get('getById/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/conta.controller.ts:50\n                        \n                    \n\n\n            \n                \n                        Obter Conta pelo identificador primário\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    identificador primário de Conta\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Conta\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByUserId(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Get('getAllByUserId/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/conta.controller.ts:37\n                        \n                    \n\n\n            \n                \n                        Obter todas as contas por Utilizador\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    identificador primário de Utilizador\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Contas\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(dto: UpdateContaDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Put()\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/conta.controller.ts:63\n                        \n                    \n\n\n            \n                \n                        Actualizar a Conta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            UpdateContaDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO de actualização de Conta\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Conta\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, UsePipes, ValidationPipe } from '@nestjs/common';\nimport { ApiBearerAuth, ApiExtraModels, ApiTags } from '@nestjs/swagger';\nimport { Get, Put, Post, Delete } from '@nestjs/common/decorators/http/request-mapping.decorator';\nimport { Param, Body } from '@nestjs/common/decorators/http/route-params.decorator';\nimport { IResponse } from '../interfaces/iresponse.interface';\nimport { ResponseDto } from '../dto/response-dto';\nimport { Conta } from '../entities/conta.entity';\nimport { ContaService } from '../services/conta.service';\nimport { CreateContaDto, UpdateContaDto } from '../dto/conta-dto';\n\n/**\n * Controlador de Conta\n */\n@ApiTags('Account')\n@ApiExtraModels(ResponseDto)\n@ApiExtraModels(Conta)\n@Controller('account')\nexport class ContaController {\n\n  /**\n   * Injeção de Dependencia pelo constructor\n   * \n   * @param {ContaService} Serviço de Contas\n   */\n  constructor(\n    private readonly service: ContaService\n  ) { }\n \n  /**\n   * Obter todas as contas por Utilizador\n   * \n   * @param {number} id identificador primário de Utilizador\n   * @returns {Conta[]} Contas\n   */  \n  @ApiBearerAuth()\n  @Get('getAllByUserId/:id')\n  async getByUserId(@Param('id') id: number): Promise {\n    const result = await this.service.getAllByUserId(id);\n    return result;\n  }\n\n  /**\n   * Obter Conta pelo identificador primário\n   * \n   * @param {number} id identificador primário de Conta\n   * @returns {Conta} Conta\n   */  \n  @ApiBearerAuth()\n  @Get('getById/:id')\n  async findById(@Param('id') id: number): Promise {\n    const result = await this.service.getById(id);\n    return result;\n  }\n\n  /**\n   * Actualizar a Conta\n   * \n   * @param {UpdateContaDto} dto DTO de actualização de Conta\n   * @returns {Conta} Conta\n   */  \n  @ApiBearerAuth()\n  @Put()\n  async update(@Body() dto: UpdateContaDto): Promise {\n    return await this.service.update(dto.uuid, dto);\n  }\n\n  /**\n   * Criar uma Conta\n   * \n   * @param {CreateContaDto} dto DTO de criação de Conta\n   * @returns {Conta} Conta\n   */\n  @ApiBearerAuth()\n  @Post()\n  @UsePipes(new ValidationPipe())\n  async create(@Body() dto: CreateContaDto): Promise {\n    return await this.service.create(dto);\n  }\n\n  /**\n   * Excluir o Lançamento\n   * \n   * @param {string} uuid Identificador secundário\n   * @returns {Conta} Conta\n   */  \n  @ApiBearerAuth()\n  @Delete(':uuid')\n  async delete(@Param('uuid') uuid: string): Promise {\n    return await this.service.delete(uuid);\n  }\n\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContaService.html":{"url":"injectables/ContaService.html","title":"injectable - ContaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/services/conta.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Serviço de Contas\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getAllByUserId\n                            \n                            \n                                    Async\n                                getByGuid\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository, dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/aplicativo/services/conta.service.ts:13\n                            \n                        \n\n                \n                    \n                            Injeção de Dependencia pelo constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Repositório de Dados de Conta\n\n                                                        \n                                                \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateContaDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/conta.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Criar uma conta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateContaDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO de criação de conta\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Conta\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(uuid: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/conta.service.ts:216\n                        \n                    \n\n\n            \n                \n                        Excluir uma conta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    identificador secundário do utilizador\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Conta\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllByUserId(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/conta.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Obter todas as contas do utilizador\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    identificador do utilizador\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Contas\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getByGuid\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByGuid(uuid: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/conta.service.ts:103\n                        \n                    \n\n\n            \n                \n                        Obter uma conta por guid\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    identificador secundário da conta\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Conta\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/conta.service.ts:82\n                        \n                    \n\n\n            \n                \n                        Obter uma conta por id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    identificador da conta\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Conta\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(uuid: string, dto: UpdateContaDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/conta.service.ts:181\n                        \n                    \n\n\n            \n                \n                        Actualizar uma conta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    identificador secundário do utilizador\n\n                                            \n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdateContaDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO de criação de conta\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Conta\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { DataSource, Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ResponseDto } from '../dto/response-dto';\nimport { IResponse } from '../interfaces/iresponse.interface';\nimport { Conta } from '../entities/conta.entity';\nimport { CreateContaDto, UpdateContaDto } from '../dto/conta-dto';\n\n/**\n * Serviço de Contas\n **/\n@Injectable()\nexport class ContaService {\n\n   /**\n    * Injeção de Dependencia pelo constructor\n    * \n    * @param {Repository} repository Repositório de Dados de Conta\n    */  \n  constructor(\n    @InjectRepository(Conta)\n    private readonly repository: Repository,\n    private dataSource: DataSource\n    ) {\n  }\n\n  /**\n   * Obter todas as contas do utilizador\n   * \n   * @param {number} id identificador do utilizador\n   * @returns {Conta[]} Contas\n   */    \n  async getAllByUserId(id: number): Promise {\n    try {\n      const response = new ResponseDto();\n      response.success = true;      \n      response.data = await this.repository.find({\n        select: {\n           id: true,\n           uuid: true,  \n           nome: true,\n           descricao: true,\n           \n           userId: true,\n\n           active: true,\n\n           saldoConsolidado: true,\n           saldoCredito: true,\n           saldoDebito: true,\n           saldoFuturo: true,\n\n           createdAt: true,\n           updatedAt: true,\n           deletedAt: true,\n\n        },\n        where: {\n          userId: id\n        },\n        relations: {\n          lancamentos: true\n        },\n        order: {\n          nome: 'DESC'\n        },\n        cache: false\n      });\n      response.error = null;\n      response.message = '';\n      return response;\n    } catch (error) {\n      return { success: false, data: null, message: 'Error occurred.', error: error };      \n    }  }\n\n  /**\n   * Obter uma conta por id\n   * \n   * @param {number} id identificador da conta\n   * @returns {Conta} Conta\n   */        \n  async getById(id: number): Promise {\n    try {\n      const response = new ResponseDto();\n      response.success = true;      \n      response.data = await this.repository.findOneBy({\n        id: id,\n      });  \n      response.error = null;\n      response.message = '';\n      return response;\n    } catch (error) {\n      return { success: false, data: null, message: 'Error occurred.', error: error };      \n    }\n  }\n\n  /**\n   * Obter uma conta por guid\n   * \n   * @param {string} uuid identificador secundário da conta\n   * @returns {Conta} Conta\n   */        \n  async getByGuid(uuid: string): Promise {\n    try {\n      const response = new ResponseDto();\n      response.success = true;      \n      response.data = await this.repository.findOneBy({\n        uuid: uuid,\n      });\n      response.error = null;\n      response.message = '';\n      return response;\n    } catch (error) {\n      return { success: false, data: null, message: 'Error occurred.', error: error };      \n    }\n  }\n\n  /**\n   * Criar uma conta\n   * \n   * @param {CreateContaDto} dto DTO de criação de conta\n   * @returns {Conta} Conta\n   */        \n  async create(dto: CreateContaDto): Promise {\n    try {\n      const response = new ResponseDto();\n\n      const entity = new Conta();\n\n      entity.nome = dto.nome;\n      entity.descricao = dto.descricao;\n      entity.saldoCredito = dto.saldoCredito;\n      entity.saldoDebito = dto.saldoDebito;\n      entity.saldoFuturo = dto.saldoFuturo;\n      entity.saldoConsolidado = dto.saldoConsolidado;\n      entity.userId = dto.userId;\n  \n      const queryRunner = this.dataSource.createQueryRunner();\n      await queryRunner.connect();\n      await queryRunner.startTransaction();\n      try {\n        const result = await queryRunner.manager.save(Conta, entity, { transaction: true });\n        await queryRunner.commitTransaction();\n        if (result.id) {\n          response.success = true;\n          response.message = 'record has been created';\n          response.data = result;\n          response.error = null;\n        } else {\n          response.success = false;\n          response.message = 'record cant be created';\n          response.data = result;\n          response.error = null;          \n        }        \n      } catch (error) {\n        await queryRunner.rollbackTransaction();\n\n        response.success = false;\n        response.message = 'record cant be created';\n        response.data = null;\n        response.error = error;\n\n        return response;\n      }\n      finally {\n        await queryRunner.release();\n      }\n      return response;\n  } catch (error) {\n      return { success: false, message: 'record cant be created', data: null, error: error };  \n  }\n}\n\n  /**\n   * Actualizar uma conta      \n   * \n   * @param {string} uuid identificador secundário do utilizador\n   * @param {UpdateContaDto} dto DTO de criação de conta\n   * @returns {Conta} Conta\n   */        \n   async update(uuid: string, dto: UpdateContaDto): Promise {\n    try {\n      const response = new ResponseDto();\n\n      if (dto.uuid && dto?.uuid?.length > 0) {        \n\n        const entityToUpdate = await this.repository.findOneBy({uuid: uuid});\n    \n        entityToUpdate.nome = dto.nome;\n        entityToUpdate.descricao = dto.descricao;        \n    \n        const result = this.repository.save(entityToUpdate);\n        response.success = true;\n        response.data = result;\n        response.message = 'record has been updated';\n        response.error = null;        \n        return response;  \n      } else {\n        response.success = false;\n        response.data = null;\n        response.message = 'missing identifier';\n        response.error = null;        \n      }\n      return response;\n    } catch (error) {\n      return {success: false, message: 'record cant be updated', data: null, error: error };  \n    }\n  }\n\n  /**\n   * Excluir uma conta\n   * \n   * @param {string} uuid identificador secundário do utilizador\n   * @returns {Conta} Conta\n   */        \n  async delete(uuid: string): Promise {\n    try {\n      const response = new ResponseDto();\n      if (uuid && uuid.length > 0) {\n        const result = await this.repository.delete( { uuid: uuid } );\n        if (result.affected && result.affected > 0) {\n          response.success = true;\n          response.data = result.affected;\n          response.message = 'record has been deleted';\n          response.error = result.raw;\n        } else {\n          response.success = false;\n          response.data = result.affected;\n          response.message = 'record cant be deleted';\n          response.error = result.raw;          \n        }          \n      } else {\n        response.success = false;\n        response.data = null;\n        response.message = 'missing identifier';\n        response.error = null\n      }\n      return response;\n    } catch (error) {\n      return {success: false, message: 'record cant be deleted', data: null, error: error };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAuthenticationDto.html":{"url":"classes/CreateAuthenticationDto.html","title":"class - CreateAuthenticationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAuthenticationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/dto/authentication-dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO de criação de Autenticação\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                token\n                            \n                            \n                                    \n                                user\n                            \n                            \n                                    \n                                uuid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/authentication-dto.ts:19\n                        \n                    \n\n            \n                \n                    Token JWT\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/authentication-dto.ts:25\n                        \n                    \n\n            \n                \n                    Utilizador\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/authentication-dto.ts:13\n                        \n                    \n\n            \n                \n                    Identificador secundário de autenticação\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\nimport { User } from \"../entities/user.entity\";\n\n/**\n * DTO de criação de Autenticação\n */\nexport class CreateAuthenticationDto {\n\n    /**\n     * Identificador secundário de autenticação\n     */\n    @ApiProperty()\n    uuid: string;\n    \n    /**\n     * Token JWT\n     */\n    @ApiProperty()\n    token: string;\n\n    /**\n     * Utilizador\n     */\n    @ApiProperty()\n    user: User;\n}\n\n/**\n * DTO de actualização de Autenticação\n */\nexport class UpdateAuthenticationDto extends PartialType(CreateAuthenticationDto) {\n    \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateContaDto.html":{"url":"classes/CreateContaDto.html","title":"class - CreateContaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateContaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/dto/conta-dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO de criação de Conta\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                descricao\n                            \n                            \n                                    \n                                nome\n                            \n                            \n                                    \n                                saldoConsolidado\n                            \n                            \n                                    \n                                saldoCredito\n                            \n                            \n                                    \n                                saldoDebito\n                            \n                            \n                                    \n                                saldoFuturo\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        descricao\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/conta-dto.ts:18\n                        \n                    \n\n            \n                \n                    Descrição\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        nome\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/conta-dto.ts:12\n                        \n                    \n\n            \n                \n                    Nome da Conta\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        saldoConsolidado\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/conta-dto.ts:42\n                        \n                    \n\n            \n                \n                    Saldo consolidado de Crédito - Débitos +- Futuro\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        saldoCredito\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/conta-dto.ts:24\n                        \n                    \n\n            \n                \n                    Saldo de Créditos da Conta\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        saldoDebito\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/conta-dto.ts:30\n                        \n                    \n\n            \n                \n                    Saldo de Débitos da Conta\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        saldoFuturo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/conta-dto.ts:36\n                        \n                    \n\n            \n                \n                    Saldo de Lançamentos maior que data actual\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/conta-dto.ts:48\n                        \n                    \n\n            \n                \n                    Identificador primário do Utilizador\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\n\n/**\n * DTO de criação de Conta\n */\nexport class CreateContaDto {\n\n    /**\n     * Nome da Conta\n     */\n    @ApiProperty()\n    nome: string;\n\n    /**\n     * Descrição\n     */\n    @ApiProperty()    \n    descricao: string;\n\n    /**\n     * Saldo de Créditos da Conta\n     */\n    @ApiProperty()    \n    saldoCredito: number;\n\n    /**\n     * Saldo de Débitos da Conta\n     */    \n    @ApiProperty()    \n    saldoDebito: number;\n\n    /**\n     * Saldo de Lançamentos maior que data actual\n     */    \n    @ApiProperty()    \n    saldoFuturo: number;\n\n    /**\n     * Saldo consolidado de Crédito - Débitos +- Futuro\n     */\n    @ApiProperty()    \n    saldoConsolidado: number;\n\n    /**\n     * Identificador primário do Utilizador\n     */    \n    @ApiProperty()\n    userId: number\n\n}\n\n/**\n * DTO de actualização de Conta\n */\nexport class UpdateContaDto extends PartialType(CreateContaDto) {\n\n    /**\n     * Identificador secundário de Conta\n     */    \n    @ApiProperty()\n    uuid?: string;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateLancamentoDto.html":{"url":"classes/CreateLancamentoDto.html","title":"class - CreateLancamentoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateLancamentoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/dto/lancamento-dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO de criação de Lançamento\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                categorias\n                            \n                            \n                                    \n                                contaId\n                            \n                            \n                                    \n                                data\n                            \n                            \n                                    \n                                descricao\n                            \n                            \n                                    \n                                image\n                            \n                            \n                                    \n                                tipoLancamento\n                            \n                            \n                                    \n                                titulo\n                            \n                            \n                                    \n                                valor\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        categorias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/lancamento-dto.ts:42\n                        \n                    \n\n            \n                \n                    Categorias (separado por vírgula)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        contaId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/lancamento-dto.ts:54\n                        \n                    \n\n            \n                \n                    Identificador de Conta\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/lancamento-dto.ts:30\n                        \n                    \n\n            \n                \n                    Data\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        descricao\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/lancamento-dto.ts:24\n                        \n                    \n\n            \n                \n                    Descrição\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/lancamento-dto.ts:48\n                        \n                    \n\n            \n                \n                    Imagem (string base 64)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tipoLancamento\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/lancamento-dto.ts:12\n                        \n                    \n\n            \n                \n                    Tipo de Lançamento\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        titulo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/lancamento-dto.ts:18\n                        \n                    \n\n            \n                \n                    Nome do Título\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        valor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/lancamento-dto.ts:36\n                        \n                    \n\n            \n                \n                    Valor\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\n\n/**\n * DTO de criação de Lançamento\n */\nexport class CreateLancamentoDto {\n\n    /**\n     * Tipo de Lançamento\n     */\n    @ApiProperty()    \n    tipoLancamento: string;\n\n    /**\n     * Nome do Título\n     */\n    @ApiProperty()    \n    titulo: string;\n    \n    /**\n     * Descrição\n     */\n    @ApiProperty()    \n    descricao: string;\n\n    /**\n     * Data\n     */\n    @ApiProperty()    \n    data: Date;\n\n    /**\n     * Valor\n     */\n    @ApiProperty()    \n    valor: number;\n\n    /**\n     * Categorias (separado por vírgula)\n     */\n    @ApiProperty()    \n    categorias: string;\n\n    /**\n     * Imagem (string base 64)\n     */\n    @ApiProperty()    \n    image: string;\n\n    /**\n     * Identificador de Conta\n     */    \n    @ApiProperty()\n    contaId: number;\n}\n\n/**\n * DTO de actualização de Lançamento\n */\nexport class UpdateLancamentoDto extends PartialType(CreateLancamentoDto) {\n  \n    /**\n     * Identificador secundário de Lançamento\n     */\n    @ApiProperty()\n    uuid?: string;\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateNotificationDto.html":{"url":"classes/CreateNotificationDto.html","title":"class - CreateNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/dto/notification-dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO de criação de Notificação\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                message\n                            \n                            \n                                    \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/notification-dto.ts:15\n                        \n                    \n\n            \n                \n                    Mensagem\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/notification-dto.ts:21\n                        \n                    \n\n            \n                \n                    Identificador primário de Utilizador, caso exista\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\nimport { IsBoolean, IsNotEmpty, IsString } from \"class-validator\";\n\n/**\n * DTO de criação de Notificação\n */\nexport class CreateNotificationDto {\n\n    /**\n     * Mensagem\n     */\n    @ApiProperty()\n    @IsNotEmpty()\n    @IsString()\n    message: string;\n\n    /**\n     * Identificador primário de Utilizador, caso exista\n     */\n    @ApiProperty()\n    userId?: number | null;\n}\n\n/**\n * DTO de actualização de Notificação\n */\nexport class UpdateNotificationDto extends PartialType(CreateNotificationDto) {\n\n    /**\n     * Identificador secundário de Notificação\n     */    \n    @ApiProperty()\n    uuid?: string;\n    \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/dto/user-dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO de criação de Utilizador\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                    \n                                    Readonly\n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/user-dto.ts:24\n                        \n                    \n\n            \n                \n                    E-mail\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsString()@MinLength(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/user-dto.ts:16\n                        \n                    \n\n            \n                \n                    Nome\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/user-dto.ts:32\n                        \n                    \n\n            \n                \n                    Senha\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/user-dto.ts:38\n                        \n                    \n\n            \n                \n                    Tipo de Utilizador (1 = ADMIN, 2 = USER)\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsNotEmpty, IsString, IsEmail, MinLength } from 'class-validator';\nimport { ApiProperty, PartialType } from '@nestjs/swagger';\n\n/**\n * DTO de criação de Utilizador\n */\nexport class CreateUserDto {\n\n  /**\n   * Nome\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(4)\n  readonly name: string;\n\n  /**\n   * E-mail\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Senha\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  readonly password: string;\n\n  /**\n   * Tipo de Utilizador (1 = ADMIN, 2 = USER)\n   */\n  @ApiProperty()\n  readonly role: number;\n}\n\n/**\n * DTO de actualização de Utilizador\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {\n\n  /**\n   * Indica se utilizador está activo\n   */\n  @ApiProperty()\n  readonly active: boolean;\n\n}\n\n/**\n * DTO de Autenticação no sistema\n */\nexport class LoginUserDto {\n\n  /**\n   * E-Mail do Utilizador\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  readonly email: string;\n\n  /**\n   * Senha do Utilizador\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  readonly password: string;\n}\n\n/**\n * DTO de Actualização de Foto do Utilizador\n */\nexport class UpdateUserPhotoDto {\n\n  /**\n   * Identificador primário do Utilizador\n   */  \n  @ApiProperty()\n  readonly id: number;\n\n  /**\n   * Foto do Utilizador (string de base64)\n   */  \n  @ApiProperty()\n  readonly image: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IResponse.html":{"url":"interfaces/IResponse.html","title":"interface - IResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/interfaces/iresponse.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface de Resposta da API\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     any | any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any | any[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Dados de resposta :: Array ou Objeto\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Objeto de erro\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Mensagem de resposta, caso exista\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Sucesso/Falha\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface IResponse {\n\n    /**\n     * Sucesso/Falha\n     */\n    success: boolean;\n\n    /**\n     * Mensagem de resposta, caso exista\n     */\n    message: string;\n\n    /**\n     * Dados de resposta :: Array ou Objeto\n     */\n    data: any | any[];\n\n    /**\n     * Objeto de erro\n     */\n    error: any;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Lancamento.html":{"url":"entities/Lancamento.html","title":"entity - Lancamento","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Lancamento\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/entities/lancamento.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entidade Lançamento\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                categorias\n                            \n                            \n                                    \n                                    \n                                conta\n                            \n                            \n                                    \n                                    \n                                contaId\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                data\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                    \n                                descricao\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                image\n                            \n                            \n                                    \n                                    \n                                tipoLancamento\n                            \n                            \n                                    \n                                    \n                                titulo\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                    \n                                uuid\n                            \n                            \n                                    \n                                    \n                                valor\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        categorias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'TXT_CATEGORIES', nullable: false, default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/lancamento.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        conta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Conta\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, conta => conta.id)@JoinColumn({name: 'COD_ACCOUNT_ID', foreignKeyConstraintName: 'FK_ACCOUNTING_ENTRY_ACCOUNT'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/lancamento.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        contaId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'COD_ACCOUNT_ID', unsigned: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/lancamento.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'DAT_CREATED', type: 'timestamp', default: () => NOW()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/lancamento.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'DAT_DATE', type: 'date', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/lancamento.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({name: 'DAT_DELETED', type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/lancamento.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        descricao\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'TXT_DESCRIPTION'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/lancamento.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@PrimaryGeneratedColumn({name: 'COD_ACCOUNTING_ENTRY_ID', unsigned: true, comment: 'Primary Key'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/lancamento.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'B64_IMAGE', type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/lancamento.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tipoLancamento\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'COD_ENTRY_TYPE', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/lancamento.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        titulo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'TXT_TITLE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/lancamento.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'DAT_UPDATED', type: 'timestamp', onUpdate: 'CURRENT_TIMESTAMP(6)'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/lancamento.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'TXT_UUID', unique: true, comment: 'Another PK as GUID', nullable: true})@Generated('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/lancamento.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        valor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column('decimal', {name: 'NUM_VALUE', precision: 10, scale: 2, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/lancamento.entity.ts:37\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, DeleteDateColumn, Entity, Generated, JoinColumn, ManyToOne, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\nimport { Conta } from \"./conta.entity\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n\n/**\n * Entidade Lançamento\n */\n@Entity('TB_ACCOUNTING_ENTRY')\nexport class Lancamento {\n    @ApiProperty()\n    @PrimaryGeneratedColumn({ name: 'COD_ACCOUNTING_ENTRY_ID', unsigned: true, comment: 'Primary Key' })\n    id: number;\n  \n    @ApiProperty()\n    @Column({ name: 'TXT_UUID', unique: true, comment: 'Another PK as GUID', nullable: true })\n    @Generated(\"uuid\")\n    uuid: string;\n  \n    @ApiProperty()\n    @Column({ name: 'COD_ENTRY_TYPE', nullable: false })\n    tipoLancamento: string;\n\n    @ApiProperty()\n    @Column({ name: 'TXT_TITLE' })\n    titulo: string;\n    \n    @ApiProperty()\n    @Column({ name: 'TXT_DESCRIPTION' })\n    descricao: string;\n\n    @ApiProperty()\n    @Column({ name: 'DAT_DATE', type: 'date', nullable: false })\n    data: Date;\n\n    @ApiProperty()\n    @Column('decimal', { name: 'NUM_VALUE', precision: 10, scale: 2, nullable: false } )\n    valor: number;\n\n    @ApiProperty()\n    @Column({ name: 'TXT_CATEGORIES', nullable: false, default: '' })\n    categorias: string;\n\n    @ApiProperty()\n    @Column({ name: 'B64_IMAGE', type:'text', nullable: true })\n    image: string;\n \n    @ManyToOne( () => Conta, conta => conta.id)    \n    @JoinColumn({ name: \"COD_ACCOUNT_ID\", foreignKeyConstraintName: 'FK_ACCOUNTING_ENTRY_ACCOUNT' })\n    conta: Conta;\n\n    @ApiProperty()\n    @Column({ name: 'COD_ACCOUNT_ID', unsigned: true, nullable: false })\n    contaId: number;  \n\n    @Column({ name: 'DAT_CREATED', type: 'timestamp', default: () => 'NOW()' })\n    createdAt: Date;\n    \n    @UpdateDateColumn({ name: 'DAT_UPDATED', type: 'timestamp', onUpdate: 'CURRENT_TIMESTAMP(6)' })\n    updatedAt: Date;\n    \n    @DeleteDateColumn({ name: 'DAT_DELETED', type: 'timestamp' })\n    deletedAt: Date;  \n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LancamentoController.html":{"url":"controllers/LancamentoController.html","title":"controller - LancamentoController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LancamentoController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/controllers/lancamento.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                entry\n            \n\n\n            \n                Description\n            \n            \n                Controlador de Lançamento\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findById\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getByAccount\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateLancamentoDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Post()@UsePipes(new ValidationPipe())\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/lancamento.controller.ts:76\n                        \n                    \n\n\n            \n                \n                        Criar o Lançamento\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateLancamentoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO de criação de Lançamento\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Lançamento\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(uuid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Delete(':uuid')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/lancamento.controller.ts:88\n                        \n                    \n\n\n            \n                \n                        Excluir o Lançamento\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Identificador secundário\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Lançamento\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Get('getById/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/lancamento.controller.ts:50\n                        \n                    \n\n\n            \n                \n                        Obtém um Lannçamento\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Identificador primário do Lançamento\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Lançamento\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getByAccount\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByAccount(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Get('getByAccount/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/lancamento.controller.ts:37\n                        \n                    \n\n\n            \n                \n                        Obtem todos os Lançamentos de uma Conta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    código de identificação primário de Conta\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(dto: UpdateLancamentoDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Put()\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/lancamento.controller.ts:63\n                        \n                    \n\n\n            \n                \n                        Actualizar o Lançamento\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            UpdateLancamentoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO de actualização de Lançamento\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Lançamento\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, UsePipes, ValidationPipe } from '@nestjs/common';\nimport { ApiBearerAuth, ApiExtraModels, ApiTags } from '@nestjs/swagger';\nimport { Get, Put, Post, Delete } from '@nestjs/common/decorators/http/request-mapping.decorator';\nimport { Param, Body } from '@nestjs/common/decorators/http/route-params.decorator';\nimport { IResponse } from '../interfaces/iresponse.interface';\nimport { ResponseDto } from '../dto/response-dto';\nimport { Lancamento } from '../entities/lancamento.entity';\nimport { LancamentoService } from '../services/lancamento.service';\nimport { CreateLancamentoDto, UpdateLancamentoDto } from '../dto/lancamento-dto';\n\n/**\n * Controlador de Lançamento\n */\n@ApiTags('Accounting Entry')\n@ApiExtraModels(ResponseDto)\n@ApiExtraModels(Lancamento)\n@Controller('entry')\nexport class LancamentoController {\n\n    /**\n   * Injeção de Dependencia pelo constructor\n   * \n   * @param {LancamentoService} Serviço de Lançamentos\n   */\n  constructor(\n    private readonly service: LancamentoService\n  ) { }\n \n  /**\n   * Obtem todos os Lançamentos de uma Conta\n   * \n   * @param {number} id código de identificação primário de Conta\n   * @returns {Lancamento[]}\n   */\n  @ApiBearerAuth()\n  @Get('getByAccount/:id')\n  async getByAccount(@Param('id') id: number): Promise {\n    const result = await this.service.getByAccount(id);\n    return result;\n  }\n\n  /**\n   * Obtém um Lannçamento\n   * \n   * @param {number} id Identificador primário do Lançamento\n   * @returns {Lancamento} Lançamento\n   */  \n  @ApiBearerAuth()\n  @Get('getById/:id')\n  async findById(@Param('id') id: number): Promise {\n    const result = await this.service.getById(id);\n    return result;\n  }\n\n  /**\n   * Actualizar o Lançamento\n   * \n   * @param {UpdateLancamentoDto} dto DTO de actualização de Lançamento\n   * @returns {Lancamento} Lançamento\n   */  \n  @ApiBearerAuth()\n  @Put()\n  async update(@Body() dto: UpdateLancamentoDto): Promise {\n    return await this.service.update(dto.uuid, dto);\n  }\n\n  /**\n   * Criar o Lançamento\n   * \n   * @param {CreateLancamentoDto} dto DTO de criação de Lançamento\n   * @returns {Lancamento} Lançamento\n   */\n  @ApiBearerAuth()\n  @Post()\n  @UsePipes(new ValidationPipe())\n  async create(@Body() dto: CreateLancamentoDto): Promise {    \n    return await this.service.create(dto);\n  }\n\n  /**\n   * Excluir o Lançamento\n   * \n   * @param {string} uuid Identificador secundário\n   * @returns {Lancamento} Lançamento\n   */  \n  @ApiBearerAuth()\n  @Delete(':uuid')\n  async delete(@Param('uuid') uuid: string): Promise {\n    return await this.service.delete(uuid);\n  }\n\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LancamentoService.html":{"url":"injectables/LancamentoService.html","title":"injectable - LancamentoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LancamentoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/services/lancamento.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Serviço de Lançamentos\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getByAccount\n                            \n                            \n                                    Async\n                                getByGuid\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository, dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/aplicativo/services/lancamento.service.ts:13\n                            \n                        \n\n                \n                    \n                            Injeção de Dependencia pelo constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Repositório de Dados de Lançamento\n\n                                                        \n                                                \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateLancamentoDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/lancamento.service.ts:117\n                        \n                    \n\n\n            \n                \n                        Criar um lançamento\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateLancamentoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO de criação de Lançamento\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Lançamento\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(uuid: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/lancamento.service.ts:214\n                        \n                    \n\n\n            \n                \n                        Excluir um lançamento\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    código primário alternativo de Lançamento\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Lançamento\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getByAccount\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByAccount(contaId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/lancamento.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Obtém todas os lançamentos de uma conta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contaId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    código primário da Conta\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Lancamentos\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getByGuid\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByGuid(uuid: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/lancamento.service.ts:96\n                        \n                    \n\n\n            \n                \n                        Obter um Lançamento\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Lançamento\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/lancamento.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Obter um Lançamento\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    código primário de Lançamento\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Lançamento\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(uuid: string, dto: UpdateLancamentoDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/lancamento.service.ts:175\n                        \n                    \n\n\n            \n                \n                        Actualizar um lançamento\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    código primário alternativo da Lançamento\n\n                                            \n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdateLancamentoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO de actualização de Lançamento\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Lançamento\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { DataSource, Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ResponseDto } from '../dto/response-dto';\nimport { IResponse } from '../interfaces/iresponse.interface';\nimport { Lancamento } from '../entities/lancamento.entity';\nimport { CreateLancamentoDto, UpdateLancamentoDto } from '../dto/lancamento-dto';\n\n/**\n * Serviço de Lançamentos\n **/\n@Injectable()\nexport class LancamentoService {\n\n   /**\n    * Injeção de Dependencia pelo constructor\n    * \n    * @param {Repository} repository Repositório de Dados de Lançamento\n    */\n   constructor(\n    @InjectRepository(Lancamento)\n    private readonly repository: Repository,\n    private dataSource: DataSource\n    ) {\n  }\n\n  /**  \n   * Obtém todas os lançamentos de uma conta\n   * \n   * @param {number} contaId código primário da Conta\n   * @returns {Lancamento[]} Lancamentos\n   */  \n  async getByAccount(contaId: number): Promise {    \n    try {\n      const response = new ResponseDto();\n      response.success = true;      \n      response.data = await this.repository.find({\n        select: {\n           id: true,\n           uuid: true,  \n           tipoLancamento: true,\n           titulo: true,\n           descricao: true,\n           data: true,\n           valor: true,\n           categorias: true,\n           image: true,\n           contaId: true\n        },\n        relations: {\n          conta: true\n        },\n        where: {\n          contaId: contaId\n        },\n        order: {\n          data: 'DESC'\n        },\n        cache: false\n      });\n      response.error = null;\n      response.message = '';\n      return response;\n    } catch (error) {\n      return { success: false, data: null, message: 'Error occurred.', error: error };      \n    }\n  }\n\n  /**  \n   * Obter um Lançamento\n   * \n   * @param {id} id código primário de Lançamento\n   * @returns {Lancamento} Lançamento\n   */    \n  async getById(id: number): Promise {\n    try {\n      const response = new ResponseDto();\n      response.success = true;      \n      response.data = await this.repository.findOneBy({\n        id: id,\n      });  \n      response.error = null;\n      response.message = '';\n      return response;\n    } catch (error) {\n      return { success: false, data: null, message: 'Error occurred.', error: error };      \n    }\n  }\n\n  /**  \n   * Obter um Lançamento\n   * \n   * @param {uuid} id código primário alternativo de Lançamento\n   * @returns {Lancamento} Lançamento\n   */    \n  async getByGuid(uuid: string): Promise {\n    try {\n      const response = new ResponseDto();\n      response.success = true;      \n      response.data = await this.repository.findOneBy({\n        uuid: uuid,\n      });\n      response.error = null;\n      response.message = '';\n      return response;\n    } catch (error) {\n      return { success: false, data: null, message: 'Error occurred.', error: error };      \n    }\n  }\n\n  /**  \n   * Criar um lançamento\n   * \n   * @param {CreateLancamentoDto} dto DTO de criação de Lançamento\n   * @returns {Lancamento} Lançamento\n   */  \n  async create(dto: CreateLancamentoDto): Promise {\n    try {\n      const response = new ResponseDto();\n\n      const entity = new Lancamento();\n\n      entity.tipoLancamento = dto.tipoLancamento;\n      entity.titulo = dto.titulo;\n      entity.descricao = dto.descricao;\n      entity.data = new Date(dto.data);\n      entity.valor = dto.valor\n      entity.categorias = dto.categorias;\n      entity.image = dto.image;\n      entity.contaId = dto.contaId;  \n  \n      const queryRunner = this.dataSource.createQueryRunner();\n      await queryRunner.connect();\n      await queryRunner.startTransaction();\n      try {\n        const result = await queryRunner.manager.save(Lancamento, entity, { transaction: true });\n        await queryRunner.commitTransaction();\n        if (result.id) {\n          response.success = true;\n          response.message = 'record has been created';\n          response.data = result;\n          response.error = null;\n        } else {\n          response.success = false;\n          response.message = 'record cant be created';\n          response.data = result;\n          response.error = null;          \n        }  \n        \n      } catch (error) {\n        await queryRunner.rollbackTransaction();\n\n        response.success = false;\n        response.message = 'record cant be created';\n        response.data = null;\n        response.error = error;\n        return response;\n      }\n      finally {\n        await queryRunner.release();\n      }\n      return response;\n  } catch (error) {\n      return { success: false, message: 'record cant be created', data: null, error: error };  \n  }\n}\n\n  /**  \n   * Actualizar um lançamento\n   * \n   * @param {string} uuid código primário alternativo da Lançamento\n   * @param {UpdateLancamentoDto} dto DTO de actualização de Lançamento\n   * @returns {Lancamento} Lançamento\n   */  \n  async update(uuid: string, dto: UpdateLancamentoDto): Promise {\n    try {\n      const response = new ResponseDto();\n\n      if (uuid) {\n        const entityToUpdate = await this.repository.findOneBy({uuid: uuid});\n\n        entityToUpdate.tipoLancamento = dto.tipoLancamento;\n        entityToUpdate.titulo = dto.titulo;\n        entityToUpdate.descricao = dto.descricao;\n        entityToUpdate.data = new Date(dto.data);\n        entityToUpdate.valor = dto.valor\n        entityToUpdate.categorias = dto.categorias;\n        entityToUpdate.image = dto.image;\n        entityToUpdate.contaId = dto.contaId;\n    \n        const result = this.repository.save(entityToUpdate);\n        response.success = true;\n        response.data = result;\n        response.message = 'record has been updated';\n        response.error = null;                \n      } else {\n        response.success = false;\n        response.data = null;\n        response.message = 'missing identifier';\n        response.error = null;\n      }\n      return response;\n    } catch (error) {\n      return {success: false, message: 'record cant be updated', data: null, error: error };  \n    }\n  }\n\n  /**  \n   * Excluir um lançamento\n   * \n   * @param {string} uuid código primário alternativo de Lançamento\n   * @returns {Lancamento} Lançamento\n   */      \n  async delete(uuid: string): Promise {\n    try {\n      const response = new ResponseDto();\n\n      if (uuid && uuid.length > 0) {\n        const result = await this.repository.delete( { uuid: uuid } );\n        if (result.affected && result.affected > 0) {\n          response.success = true;\n          response.data = result.affected;\n          response.message = 'record has been deleted';\n          response.error = result.raw;\n        } else {\n          response.success = false;\n          response.data = result.affected;\n          response.message = 'record cant be deleted';\n          response.error = result.raw;          \n        }        \n      } else {\n        response.success = false;\n        response.data = null;\n        response.message = 'missing identifier';\n        response.error = null;\n      }\n      return response;\n    } catch (error) {\n      return {success: false, message: 'record cant be deleted', data: null, error: error };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/dto/user-dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO de Autenticação no sistema\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/user-dto.ts:64\n                        \n                    \n\n            \n                \n                    E-Mail do Utilizador\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/user-dto.ts:71\n                        \n                    \n\n            \n                \n                    Senha do Utilizador\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsNotEmpty, IsString, IsEmail, MinLength } from 'class-validator';\nimport { ApiProperty, PartialType } from '@nestjs/swagger';\n\n/**\n * DTO de criação de Utilizador\n */\nexport class CreateUserDto {\n\n  /**\n   * Nome\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(4)\n  readonly name: string;\n\n  /**\n   * E-mail\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Senha\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  readonly password: string;\n\n  /**\n   * Tipo de Utilizador (1 = ADMIN, 2 = USER)\n   */\n  @ApiProperty()\n  readonly role: number;\n}\n\n/**\n * DTO de actualização de Utilizador\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {\n\n  /**\n   * Indica se utilizador está activo\n   */\n  @ApiProperty()\n  readonly active: boolean;\n\n}\n\n/**\n * DTO de Autenticação no sistema\n */\nexport class LoginUserDto {\n\n  /**\n   * E-Mail do Utilizador\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  readonly email: string;\n\n  /**\n   * Senha do Utilizador\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  readonly password: string;\n}\n\n/**\n * DTO de Actualização de Foto do Utilizador\n */\nexport class UpdateUserPhotoDto {\n\n  /**\n   * Identificador primário do Utilizador\n   */  \n  @ApiProperty()\n  readonly id: number;\n\n  /**\n   * Foto do Utilizador (string de base64)\n   */  \n  @ApiProperty()\n  readonly image: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Notification.html":{"url":"entities/Notification.html","title":"entity - Notification","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Notification\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/entities/notification.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entidade Notificação\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                message\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                user\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                userId\n                            \n                            \n                                    \n                                    \n                                    \n                                uuid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'DAT_CREATED', type: 'timestamp', default: () => NOW()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/notification.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({name: 'DAT_DELETED', type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/notification.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@PrimaryGeneratedColumn({name: 'COD_NOTIFICATION_ID', unsigned: true, comment: 'Primary Key'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/notification.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'TXT_MESSAGE'})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/notification.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'DAT_UPDATED', type: 'timestamp', onUpdate: 'CURRENT_TIMESTAMP(6)'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/notification.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.id, {onDelete: 'NO ACTION', onUpdate: 'NO ACTION', cascade: false, nullable: true})@JoinColumn({name: 'COD_USER_ID', foreignKeyConstraintName: 'FK_NOTIFICATION_USER'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/notification.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'COD_USER_ID', unsigned: true, default: undefined, nullable: true, comment: 'Define IF this notificatios is to an user or a broadcast message'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/notification.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'TXT_UUID', unique: true, comment: 'Another PK as GUID'})@Generated('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/notification.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, Generated, UpdateDateColumn, DeleteDateColumn, Index, ManyToOne, JoinColumn } from 'typeorm';\nimport { IsNotEmpty } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { User } from './user.entity';\n\n/**\n * Entidade Notificação\n */\n@Entity('TB_NOTIFICATION')\nexport class Notification {\n  @ApiProperty()\n  @PrimaryGeneratedColumn({ name: 'COD_NOTIFICATION_ID', unsigned: true, comment: 'Primary Key' })\n  id: number;\n\n  @ApiProperty()\n  @Column({ name: 'TXT_UUID', unique: true, comment: 'Another PK as GUID' })\n  @Generated(\"uuid\")\n  uuid: string;\n\n  @ApiProperty()\n  @Column({ name: 'TXT_MESSAGE' })\n  @IsNotEmpty()\n  message: string;\n\n  @ApiProperty()\n  @Column({ name: 'COD_USER_ID', unsigned: true, default: null, nullable: true, comment: 'Define IF this notificatios is to an user or a broadcast message'})\n  userId?: number;\n\n  @ManyToOne(() => User, user => user.id, { onDelete: 'NO ACTION', onUpdate: 'NO ACTION', cascade: false, nullable: true })\n  @JoinColumn({ name: \"COD_USER_ID\", foreignKeyConstraintName: 'FK_NOTIFICATION_USER' })\n  user?: User;  \n\n  @Column({ name: 'DAT_CREATED', type: 'timestamp', default: () => 'NOW()' })\n  createdAt: Date;\n  \n  @UpdateDateColumn({ name: 'DAT_UPDATED', type: 'timestamp', onUpdate: 'CURRENT_TIMESTAMP(6)' })\n  updatedAt: Date;\n  \n  @DeleteDateColumn({ name: 'DAT_DELETED', type: 'timestamp' })\n  deletedAt: Date;  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/NotificationController.html":{"url":"controllers/NotificationController.html","title":"controller - NotificationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  NotificationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/controllers/notification.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                notification\n            \n\n\n            \n                Description\n            \n            \n                Controlador de Notificação\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findById\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getNotificationsToUser\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateNotificationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Post()@UsePipes(new ValidationPipe())\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/notification.controller.ts:99\n                        \n                    \n\n\n            \n                \n                        Criar Notificação\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateNotificationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO de criação de Notificação\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Notificação\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(uuid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/notification.controller.ts:111\n                        \n                    \n\n\n            \n                \n                        Excluir uma notificação\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    código de identificação secundário\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Notificação\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Get('getById/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/notification.controller.ts:61\n                        \n                    \n\n\n            \n                \n                        Obter Notificação pelo identificador primário\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    código identificador primário\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(uuid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Get('getByGuid/:uuid')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/notification.controller.ts:49\n                        \n                    \n\n\n            \n                \n                        Obter Notificação pelo identificador secundário\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    código de identificação secundário\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Get()\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/notification.controller.ts:36\n                        \n                    \n\n\n            \n                \n                        Obter todas as notificações\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Notificações\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getNotificationsToUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNotificationsToUser(idUser: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Get('getNotificationsToUser')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/notification.controller.ts:73\n                        \n                    \n\n\n            \n                \n                        Obter Notificações de um utilizador\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                idUser\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    código de identificação primário do Utilizador\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Notificações\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(uuid: string, dto: UpdateNotificationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Put()\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/notification.controller.ts:86\n                        \n                    \n\n\n            \n                \n                        Actualizar Notificação\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    código de identificação secundário\n\n                                            \n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdateNotificationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO de actualização de Notificação\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, UsePipes, ValidationPipe } from '@nestjs/common';\nimport { ApiBearerAuth, ApiExtraModels, ApiTags } from '@nestjs/swagger';\nimport { Get, Put, Post, Delete } from '@nestjs/common/decorators/http/request-mapping.decorator';\nimport { Param, Body } from '@nestjs/common/decorators/http/route-params.decorator';\nimport { NotificationService } from '../services/notification.service';\nimport { Notification } from '../entities/notification.entity';\nimport { CreateNotificationDto, UpdateNotificationDto } from '../dto/notification-dto';\nimport { IResponse } from '../interfaces/iresponse.interface';\nimport { ResponseDto } from '../dto/response-dto';\n\n/**\n * Controlador de Notificação\n */\n@ApiExtraModels(ResponseDto)\n@ApiExtraModels(Notification)\n@ApiTags('Notification')\n@Controller('notification')\nexport class NotificationController {\n\n  /**\n   * Injeção de Dependencia pelo constructor\n   * \n   * @param {NotificationService} Serviço de Notificação\n   */\n  constructor(\n    private readonly service: NotificationService\n  ) { }\n\n  /**\n   * Obter todas as notificações\n   * \n   * @returns {Notification[]} Notificações\n   */\n  @ApiBearerAuth()\n  @Get()\n  async getAll(): Promise {\n    const result = await this.service.getAll();\n    return result;\n  }\n\n  /**\n   * Obter Notificação pelo identificador secundário\n   * \n   * @param   {string}      uuid código de identificação secundário\n   * @returns {Notificacao}\n   */\n  @ApiBearerAuth()\n  @Get('getByGuid/:uuid')\n  async findOne(@Param('uuid') uuid: string): Promise {\n    return await this.service.getByGuid(uuid);\n  }\n  \n  /**\n   * Obter Notificação pelo identificador primário\n   * \n   * @param {number} id código identificador primário\n   * @returns {Notification}\n   */\n  @ApiBearerAuth()\n  @Get('getById/:id')\n  async findById(@Param('id') id: number): Promise {\n    return await this.service.getById(id);\n  }\n\n  /**\n   * Obter Notificações de um utilizador\n   * \n   * @param {number} idUser código de identificação primário do Utilizador\n   * @returns {Notification[]} Notificações\n   */\n  @ApiBearerAuth()\n  @Get('getNotificationsToUser')\n  async getNotificationsToUser(@Param('idUser') idUser: number): Promise {\n    return await this.service.getNotificationsToUser(idUser);\n  }\n\n  /**\n   * Actualizar Notificação\n   * \n   * @param {string} uuid código de identificação secundário\n   * @param {UpdateNotificationDto} dto DTO de actualização de Notificação\n   * @returns \n   */\n  @ApiBearerAuth()\n  @Put()\n  async update(@Param('uuid') uuid: string, @Body() dto: UpdateNotificationDto): Promise {\n    return await this.service.update(uuid, dto);\n  }\n\n  /**\n   * Criar Notificação\n   * \n   * @param {CreateNotificationDto} dto DTO de criação de Notificação\n   * @returns {Notification} Notificação\n   */\n  @ApiBearerAuth()\n  @Post()\n  @UsePipes(new ValidationPipe())\n  async create(@Body() dto: CreateNotificationDto): Promise {\n    return await this.service.create(dto);\n  }\n\n  /**\n   * Excluir uma notificação\n   * \n   * @param {string} uuid código de identificação secundário\n   * @returns {Notification} Notificação\n   */\n  @ApiBearerAuth()\n  @Delete()\n  async delete(@Param('uuid') uuid: string): Promise {\n    return await this.service.delete(uuid);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationService.html":{"url":"injectables/NotificationService.html","title":"injectable - NotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/services/notification.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Notification Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getByGuid\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getNotificationsToUser\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/aplicativo/services/notification.service.ts:13\n                            \n                        \n\n                \n                    \n                            Injeção de Dependencia pelo constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Repositório de Dados de Notificação\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateNotificationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/notification.service.ts:121\n                        \n                    \n\n\n            \n                \n                        Criar uma notificação\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateNotificationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO de criação de Notificação\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Notificação\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(uuid: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/notification.service.ts:180\n                        \n                    \n\n\n            \n                \n                        Excluir uma notificação\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    código primário alternativo da Notificação\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Notificação\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/notification.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Obtém todas as notificações\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Notificações\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getByGuid\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByGuid(uuid: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/notification.service.ts:81\n                        \n                    \n\n\n            \n                \n                        Obtém uma notificação por uuid\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Notificações\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/notification.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Obtém uma notificação por id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Notificações\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getNotificationsToUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNotificationsToUser(idUser: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/notification.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Obtém todas as notificações de um utilizador\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                idUser\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    código único do Utilizador\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Notificações\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(uuid: string, dto: UpdateNotificationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/notification.service.ts:154\n                        \n                    \n\n\n            \n                \n                        Actualizar uma notificação\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    código primário alternativo da Notificação\n\n                                            \n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdateNotificationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO de actualização de Notificação\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Notificação\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Notification } from '../entities/notification.entity';\nimport { CreateNotificationDto, UpdateNotificationDto } from '../dto/notification-dto';\nimport { ResponseDto } from '../dto/response-dto';\nimport { IResponse } from '../interfaces/iresponse.interface';\n\n/**\n * Notification Service\n */\n@Injectable()\nexport class NotificationService {\n  \n   /**\n    * Injeção de Dependencia pelo constructor\n    * \n    * @param {Repository} repository Repositório de Dados de Notificação\n    */\n   constructor(\n    @InjectRepository(Notification)\n    private readonly repository: Repository\n    ) {\n  }\n\n  /**  \n   * Obtém todas as notificações\n   * \n   * @returns {Notification[]} Notificações\n   */\n  async getAll(): Promise {    \n    try {\n      const response = new ResponseDto();\n      response.success = true;      \n      response.data = await this.repository.find({\n        select: {\n           id: true,\n           uuid: true,\n           message: true,\n           createdAt: true,\n           updatedAt: true          \n        },\n        order: {\n          createdAt: 'DESC'\n        },\n        cache: true\n      });\n      response.error = null;\n      response.message = '';\n      return response;\n    } catch (error) {\n      return { success: false, data: null, message: 'Error occurred.', error: error };      \n    }\n  }\n\n  /**  \n   * Obtém uma notificação por id\n   * \n   * @returns {Notification} Notificações\n   */\n  async getById(id: number): Promise {\n    try {\n      const response = new ResponseDto();\n      response.success = true;      \n      response.data = await this.repository.findOneBy({\n        id: id,\n      });  \n      response.error = null;\n      response.message = '';\n      return response;\n    } catch (error) {\n      return { success: false, data: null, message: 'Error occurred.', error: error };      \n    }\n  }\n\n  /**  \n   * Obtém uma notificação por uuid\n   * \n   * @returns {Notification} Notificações\n   */\n  async getByGuid(uuid: string): Promise {\n    try {\n      const response = new ResponseDto();\n      response.success = true;      \n      response.data = await this.repository.findOneBy({\n        uuid: uuid,\n      });\n      response.error = null;\n      response.message = '';\n      return response;\n    } catch (error) {\n      return { success: false, data: null, message: 'Error occurred.', error: error };      \n    }\n  }\n\n  /**  \n   * Obtém todas as notificações de um utilizador\n   * \n   * @param {number} idUser código único do Utilizador\n   * @returns {Notification[]} Notificações\n   */  \n  async getNotificationsToUser(idUser: number): Promise {\n    try {\n        const response = new ResponseDto();\n        response.success = true;      \n        response.data = await this.repository.findBy({ userId: idUser });\n        response.error = null;\n        response.message = '';\n        return response;\n    } catch (error) {\n        return { success: false, data: null, message: 'Error occurred.', error: error };      \n    }    \n  }\n\n  /**  \n   * Criar uma notificação\n   * \n   * @param {CreateNotificationDto} dto DTO de criação de Notificação\n   * @returns {Notification} Notificação\n   */  \n  async create(dto: CreateNotificationDto): Promise {\n    try {\n      const response = new ResponseDto();\n\n      const entity = new Notification();\n      entity.message = dto.message;      \n      entity.userId = dto.userId;\n  \n      const result = await this.repository.save(entity);\n      if (result.id) {\n        response.success = true;\n        response.message = 'record has been created';\n        response.data = result;\n        response.error = null;\n      } else {\n        response.success = false;\n        response.message = 'record cant be created';\n        response.data = result;\n        response.error = null;          \n      }\n      return response;      \n  } catch (error) {\n      return { success: false, message: 'record cant be created', data: null, error: error };  \n  }\n}\n\n  /**  \n   * Actualizar uma notificação\n   * \n   * @param {string} uuid código primário alternativo da Notificação\n   * @param {UpdateNotificationDto} dto DTO de actualização de Notificação\n   * @returns {Notification} Notificação\n   */  \n  async update(uuid: string, dto: UpdateNotificationDto): Promise {\n    try {\n      const response = new ResponseDto();\n\n      const entityToUpdate = await this.repository.findOneBy({uuid: uuid});\n    \n      entityToUpdate.message = (entityToUpdate.message !== dto.message) && dto.message.length > 0 ? dto.message : entityToUpdate.message;      \n      entityToUpdate.userId = dto.userId;\n  \n      const result = this.repository.save(entityToUpdate);\n      response.success = true;\n      response.data = result;\n      response.message = 'record has been updated';\n      response.error = null;        \n      return response;\n    } catch (error) {\n      return {success: false, message: 'record cant be updated', data: null, error: error };  \n    }\n  }\n\n  /**  \n   * Excluir uma notificação\n   * \n   * @param {string} uuid código primário alternativo da Notificação\n   * @returns {Notification} Notificação\n   */      \n  async delete(uuid: string): Promise {\n    try {\n      const response = new ResponseDto();\n      const result = await this.repository.delete( { uuid: uuid } );\n      if (result.affected && result.affected > 0) {\n        response.success = true;\n        response.data = result.affected;\n        response.message = 'record has been deleted';\n        response.error = result.raw;\n      } else {\n        response.success = false;\n        response.data = result.affected;\n        response.message = 'record cant be deleted';\n        response.error = result.raw;          \n      }\n      return response;\n    } catch (error) {\n      return {success: false, message: 'record cant be deleted', data: null, error: error };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResponseDto.html":{"url":"classes/ResponseDto.html","title":"class - ResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/dto/response-dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Objeto de Resposta da API\nHavendo sempre resposta evita que erros sejam emitidos para fora do aplicativo,\nmaximizando o tempo de resposta.\n\n            \n\n\n            \n                Implements\n            \n            \n                            IResponse\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                data\n                            \n                            \n                                    \n                                error\n                            \n                            \n                                    \n                                message\n                            \n                            \n                                    \n                                success\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/aplicativo/dto/response-dto.ts:34\n                            \n                        \n\n                \n                    \n                            Inicializa os atributos\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/response-dto.ts:28\n                        \n                    \n\n            \n                \n                    Dados de resposta :: Array ou Objeto\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/response-dto.ts:34\n                        \n                    \n\n            \n                \n                    Objeto de erro\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/response-dto.ts:22\n                        \n                    \n\n            \n                \n                    Mensagem de resposta, caso exista\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        success\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/response-dto.ts:16\n                        \n                    \n\n            \n                \n                    Sucesso/Falha\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IResponse } from \"../interfaces/iresponse.interface\";\n\n/**\n * Objeto de Resposta da API\n * \n * Havendo sempre resposta evita que erros sejam emitidos para fora do aplicativo, \n * maximizando o tempo de resposta.\n */\nexport class ResponseDto implements IResponse {\n\n    /**\n     * Sucesso/Falha\n     */\n    @ApiProperty()\n    success: boolean;\n\n    /**\n     * Mensagem de resposta, caso exista\n     */    \n    @ApiProperty()\n    message: string;\n\n    /**\n     * Dados de resposta :: Array ou Objeto\n     */\n    @ApiProperty()\n    data: any;\n\n    /**\n     * Objeto de erro\n     */\n    @ApiProperty()\n    error: any;        \n\n    /**\n     * Inicializa os atributos\n     */\n    constructor() {\n        this.success = false;\n        this.message = '';\n        this.data = null;\n        this.error = null;\n    }    \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/dto/sign-in-dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO de entrada no sistema\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/sign-in-dto.ts:23\n                        \n                    \n\n            \n                \n                    Senha do Utilizador\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/sign-in-dto.ts:15\n                        \n                    \n\n            \n                \n                    E-mail do Utilizador\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail, IsNotEmpty, IsString } from \"class-validator\";\n\n/**\n * DTO de entrada no sistema\n */\nexport class SignInDto {\n\n    /**\n     * E-mail do Utilizador\n     */\n    @ApiProperty()\n    @IsNotEmpty()\n    @IsEmail()\n    username: string;\n\n    /**\n     * Senha do Utilizador\n     */\n    @ApiProperty()\n    @IsNotEmpty()\n    @IsString()\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAuthenticationDto.html":{"url":"classes/UpdateAuthenticationDto.html","title":"class - UpdateAuthenticationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAuthenticationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/dto/authentication-dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO de actualização de Autenticação\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateAuthenticationDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\nimport { User } from \"../entities/user.entity\";\n\n/**\n * DTO de criação de Autenticação\n */\nexport class CreateAuthenticationDto {\n\n    /**\n     * Identificador secundário de autenticação\n     */\n    @ApiProperty()\n    uuid: string;\n    \n    /**\n     * Token JWT\n     */\n    @ApiProperty()\n    token: string;\n\n    /**\n     * Utilizador\n     */\n    @ApiProperty()\n    user: User;\n}\n\n/**\n * DTO de actualização de Autenticação\n */\nexport class UpdateAuthenticationDto extends PartialType(CreateAuthenticationDto) {\n    \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateContaDto.html":{"url":"classes/UpdateContaDto.html","title":"class - UpdateContaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateContaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/dto/conta-dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO de actualização de Conta\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateContaDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                uuid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/conta-dto.ts:61\n                        \n                    \n\n            \n                \n                    Identificador secundário de Conta\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\n\n/**\n * DTO de criação de Conta\n */\nexport class CreateContaDto {\n\n    /**\n     * Nome da Conta\n     */\n    @ApiProperty()\n    nome: string;\n\n    /**\n     * Descrição\n     */\n    @ApiProperty()    \n    descricao: string;\n\n    /**\n     * Saldo de Créditos da Conta\n     */\n    @ApiProperty()    \n    saldoCredito: number;\n\n    /**\n     * Saldo de Débitos da Conta\n     */    \n    @ApiProperty()    \n    saldoDebito: number;\n\n    /**\n     * Saldo de Lançamentos maior que data actual\n     */    \n    @ApiProperty()    \n    saldoFuturo: number;\n\n    /**\n     * Saldo consolidado de Crédito - Débitos +- Futuro\n     */\n    @ApiProperty()    \n    saldoConsolidado: number;\n\n    /**\n     * Identificador primário do Utilizador\n     */    \n    @ApiProperty()\n    userId: number\n\n}\n\n/**\n * DTO de actualização de Conta\n */\nexport class UpdateContaDto extends PartialType(CreateContaDto) {\n\n    /**\n     * Identificador secundário de Conta\n     */    \n    @ApiProperty()\n    uuid?: string;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateLancamentoDto.html":{"url":"classes/UpdateLancamentoDto.html","title":"class - UpdateLancamentoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateLancamentoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/dto/lancamento-dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO de actualização de Lançamento\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateLancamentoDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                uuid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/lancamento-dto.ts:66\n                        \n                    \n\n            \n                \n                    Identificador secundário de Lançamento\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\n\n/**\n * DTO de criação de Lançamento\n */\nexport class CreateLancamentoDto {\n\n    /**\n     * Tipo de Lançamento\n     */\n    @ApiProperty()    \n    tipoLancamento: string;\n\n    /**\n     * Nome do Título\n     */\n    @ApiProperty()    \n    titulo: string;\n    \n    /**\n     * Descrição\n     */\n    @ApiProperty()    \n    descricao: string;\n\n    /**\n     * Data\n     */\n    @ApiProperty()    \n    data: Date;\n\n    /**\n     * Valor\n     */\n    @ApiProperty()    \n    valor: number;\n\n    /**\n     * Categorias (separado por vírgula)\n     */\n    @ApiProperty()    \n    categorias: string;\n\n    /**\n     * Imagem (string base 64)\n     */\n    @ApiProperty()    \n    image: string;\n\n    /**\n     * Identificador de Conta\n     */    \n    @ApiProperty()\n    contaId: number;\n}\n\n/**\n * DTO de actualização de Lançamento\n */\nexport class UpdateLancamentoDto extends PartialType(CreateLancamentoDto) {\n  \n    /**\n     * Identificador secundário de Lançamento\n     */\n    @ApiProperty()\n    uuid?: string;\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateNotificationDto.html":{"url":"classes/UpdateNotificationDto.html","title":"class - UpdateNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/dto/notification-dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO de actualização de Notificação\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateNotificationDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                uuid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/notification-dto.ts:33\n                        \n                    \n\n            \n                \n                    Identificador secundário de Notificação\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\nimport { IsBoolean, IsNotEmpty, IsString } from \"class-validator\";\n\n/**\n * DTO de criação de Notificação\n */\nexport class CreateNotificationDto {\n\n    /**\n     * Mensagem\n     */\n    @ApiProperty()\n    @IsNotEmpty()\n    @IsString()\n    message: string;\n\n    /**\n     * Identificador primário de Utilizador, caso exista\n     */\n    @ApiProperty()\n    userId?: number | null;\n}\n\n/**\n * DTO de actualização de Notificação\n */\nexport class UpdateNotificationDto extends PartialType(CreateNotificationDto) {\n\n    /**\n     * Identificador secundário de Notificação\n     */    \n    @ApiProperty()\n    uuid?: string;\n    \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/dto/user-dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO de actualização de Utilizador\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                active\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/user-dto.ts:50\n                        \n                    \n\n            \n                \n                    Indica se utilizador está activo\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsNotEmpty, IsString, IsEmail, MinLength } from 'class-validator';\nimport { ApiProperty, PartialType } from '@nestjs/swagger';\n\n/**\n * DTO de criação de Utilizador\n */\nexport class CreateUserDto {\n\n  /**\n   * Nome\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(4)\n  readonly name: string;\n\n  /**\n   * E-mail\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Senha\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  readonly password: string;\n\n  /**\n   * Tipo de Utilizador (1 = ADMIN, 2 = USER)\n   */\n  @ApiProperty()\n  readonly role: number;\n}\n\n/**\n * DTO de actualização de Utilizador\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {\n\n  /**\n   * Indica se utilizador está activo\n   */\n  @ApiProperty()\n  readonly active: boolean;\n\n}\n\n/**\n * DTO de Autenticação no sistema\n */\nexport class LoginUserDto {\n\n  /**\n   * E-Mail do Utilizador\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  readonly email: string;\n\n  /**\n   * Senha do Utilizador\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  readonly password: string;\n}\n\n/**\n * DTO de Actualização de Foto do Utilizador\n */\nexport class UpdateUserPhotoDto {\n\n  /**\n   * Identificador primário do Utilizador\n   */  \n  @ApiProperty()\n  readonly id: number;\n\n  /**\n   * Foto do Utilizador (string de base64)\n   */  \n  @ApiProperty()\n  readonly image: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserPhotoDto.html":{"url":"classes/UpdateUserPhotoDto.html","title":"class - UpdateUserPhotoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserPhotoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/dto/user-dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO de Actualização de Foto do Utilizador\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                id\n                            \n                            \n                                    \n                                    Readonly\n                                image\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/user-dto.ts:83\n                        \n                    \n\n            \n                \n                    Identificador primário do Utilizador\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/dto/user-dto.ts:89\n                        \n                    \n\n            \n                \n                    Foto do Utilizador (string de base64)\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsNotEmpty, IsString, IsEmail, MinLength } from 'class-validator';\nimport { ApiProperty, PartialType } from '@nestjs/swagger';\n\n/**\n * DTO de criação de Utilizador\n */\nexport class CreateUserDto {\n\n  /**\n   * Nome\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(4)\n  readonly name: string;\n\n  /**\n   * E-mail\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Senha\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  readonly password: string;\n\n  /**\n   * Tipo de Utilizador (1 = ADMIN, 2 = USER)\n   */\n  @ApiProperty()\n  readonly role: number;\n}\n\n/**\n * DTO de actualização de Utilizador\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {\n\n  /**\n   * Indica se utilizador está activo\n   */\n  @ApiProperty()\n  readonly active: boolean;\n\n}\n\n/**\n * DTO de Autenticação no sistema\n */\nexport class LoginUserDto {\n\n  /**\n   * E-Mail do Utilizador\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  readonly email: string;\n\n  /**\n   * Senha do Utilizador\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  readonly password: string;\n}\n\n/**\n * DTO de Actualização de Foto do Utilizador\n */\nexport class UpdateUserPhotoDto {\n\n  /**\n   * Identificador primário do Utilizador\n   */  \n  @ApiProperty()\n  readonly id: number;\n\n  /**\n   * Foto do Utilizador (string de base64)\n   */  \n  @ApiProperty()\n  readonly image: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entidade Utilizador\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                active\n                            \n                            \n                                    \n                                    Optional\n                                contas\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                image\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                role\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                    \n                                uuid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'FLG_ACTIVE', default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/user.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        contas\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Conta[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, conta => conta.user, {lazy: true, nullable: true, cascade: false, onDelete: 'NO ACTION', onUpdate: 'NO ACTION', createForeignKeyConstraints: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/user.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'DAT_CREATED', type: 'timestamp', default: () => NOW()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/user.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({name: 'DAT_DELETED', type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/user.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'TXT_EMAIL', unique: true})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@PrimaryGeneratedColumn({name: 'COD_USER_ID', unsigned: true, comment: 'Primary Key'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'B64_IMAGE', type: 'longtext', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/user.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'TXT_NAME', unique: true, length: 256})@MinLength(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'TXT_PASSWORD', length: 128, select: false})@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'TIP_ROLE', unsigned: true, nullable: false, default: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/user.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'DAT_UPDATED', type: 'timestamp', onUpdate: 'CURRENT_TIMESTAMP(6)'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/user.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({name: 'TXT_UUID', unique: true, comment: 'Another PK as GUID'})@Generated('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/aplicativo/entities/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, Generated, BeforeInsert, DeleteDateColumn, UpdateDateColumn, ManyToOne, JoinColumn, OneToMany } from 'typeorm';\nimport { MinLength, IsEmail } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Conta } from './conta.entity';\n\n/**\n * Entidade Utilizador\n */\n@Entity('TB_USER')\nexport class User {\n  \n  /* KEYS COLUMNS */\n\n  /* PK */\n  @ApiProperty()\n  @PrimaryGeneratedColumn({ name: 'COD_USER_ID', unsigned: true, comment: 'Primary Key' })\n  id: number;\n\n  /* UNIQUE KEY */\n  @ApiProperty()  \n  @Column({ name: 'TXT_UUID', unique: true, comment: 'Another PK as GUID' })\n  @Generated(\"uuid\")\n  uuid: string;\n\n  /* DATA COLUMNS */\n\n  @ApiProperty()\n  @Column({ name: 'TXT_NAME', unique: true, length: 256 })\n  @MinLength(4)\n  name: string;\n\n  @ApiProperty()\n  @Column({ name: 'TXT_EMAIL', unique: true })\n  @IsEmail()\n  email: string;\n\n  @ApiProperty()\n  @Column({ name: 'TXT_PASSWORD', length: 128, select: false })\n  @MinLength(8)\n  password: string;\n\n  @ApiProperty()  \n  @Column({ name: 'TIP_ROLE', unsigned: true, nullable: false, default: 2 })\n  role: number; //UserRole;\n  \n  @ApiProperty()\n  @Column({ name: 'FLG_ACTIVE', default: true })\n  active: boolean;\n\n  @ApiProperty()\n  @Column({ name: \"B64_IMAGE\", type: 'longtext', nullable: true })\n  image: string;\n\n  /* LOG PURPOSES COLUMNS */\n\n  @Column({ name: 'DAT_CREATED', type: 'timestamp', default: () => 'NOW()' })\n  createdAt: Date;\n  \n  @UpdateDateColumn({ name: 'DAT_UPDATED', type: 'timestamp', onUpdate: 'CURRENT_TIMESTAMP(6)' })\n  updatedAt: Date;\n  \n  @DeleteDateColumn({ name: 'DAT_DELETED', type: 'timestamp' })\n  deletedAt: Date;  \n  \n\n  @OneToMany(() => Conta, (conta) => conta.user, { lazy: true, nullable: true, cascade: false, \n                                                   onDelete: 'NO ACTION', onUpdate: 'NO ACTION',\n                                                   createForeignKeyConstraints: true })    \n  contas?: Conta[];\n\n  /* BEFORE INSERT RULES */\n\n  @BeforeInsert()\n  emailToLowerCase() {\n      this.email = this.email.toLowerCase();      \n  }\n\n  @BeforeInsert()\n  inactivate() {\n    if (this.deletedAt) {\n      this.active = false;\n    }\n  }  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/controllers/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n            \n                Description\n            \n            \n                Controlador de Utilizador\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findById\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findUserPhoto\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    Async\n                                updateUserPhoto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UsePipes(new ValidationPipe())\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/user.controller.ts:110\n                        \n                    \n\n\n            \n                \n                        Criar Utilidador\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/user.controller.ts:122\n                        \n                    \n\n\n            \n                \n                        Excluir Utilidador\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Get('getById/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/user.controller.ts:60\n                        \n                    \n\n\n            \n                \n                        Obter utilizador por identificador primário\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('getByEmail')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/user.controller.ts:35\n                        \n                    \n\n\n            \n                \n                        Obtém um utilizador por e-mail\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Utilizador\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findUserPhoto\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserPhoto(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Get('getUserPhoto/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/user.controller.ts:73\n                        \n                    \n\n\n            \n                \n                        Obter foto do Utilizador\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    identificador primário\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Get('getAll')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/user.controller.ts:47\n                        \n                    \n\n\n            \n                \n                        Obtém todos os Utilizadores\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Utilizadores\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(dto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Put()\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/user.controller.ts:86\n                        \n                    \n\n\n            \n                \n                        Actualizar Utilidador\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        updateUserPhoto\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserPhoto(dto: UpdateUserPhotoDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Put('updateUserPhoto')\n                \n            \n\n                    \n                        \n                            Defined in src/aplicativo/controllers/user.controller.ts:98\n                        \n                    \n\n\n            \n                \n                        Actualizar foto do Utilidador\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            UpdateUserPhotoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, UsePipes, ValidationPipe } from '@nestjs/common';\nimport { CreateUserDto, UpdateUserDto, UpdateUserPhotoDto } from 'src/aplicativo/dto/user-dto';\nimport { User } from '../entities/user.entity';\nimport { UserService } from '../services/user.service';\nimport { ApiBearerAuth, ApiExtraModels, ApiTags } from '@nestjs/swagger';\nimport { Get, Put, Post, Delete } from '@nestjs/common/decorators/http/request-mapping.decorator';\nimport { Param, Body } from '@nestjs/common/decorators/http/route-params.decorator';\nimport { IResponse } from '../interfaces/iresponse.interface';\nimport { ResponseDto } from '../dto/response-dto';\n\n/**\n * Controlador de Utilizador\n */\n@ApiTags('User')\n@ApiExtraModels(ResponseDto)\n@ApiExtraModels(User)\n@Controller('user')\nexport class UserController {\n\n  /**\n   * Injeção de Dependencia pelo constructor\n   * \n   * @param {UserService} service Serviço de Utilizador\n   */\n  constructor(\n    private readonly service: UserService\n  ) { }\n\n  /**\n   * Obtém um utilizador por e-mail\n   * @param email \n   * @returns {User} Utilizador\n   */\n  @Get('getByEmail')\n  async findOne(@Param('email') email: string): Promise {\n    const result = await this.service.findOne(email);\n    return result;\n  }\n  \n  /**\n   * Obtém todos os Utilizadores\n   * \n   * @returns {User[]} Utilizadores\n   */\n  @ApiBearerAuth()\n  @Get('getAll')\n  async getAll(): Promise {\n    const result = await this.service.getAll();\n    return result;\n  }\n\n  /**\n   * Obter utilizador por identificador primário\n   * \n   * @param id \n   * @returns {User}\n   */\n  @ApiBearerAuth()\n  @Get('getById/:id')\n  async findById(@Param('id') id: number): Promise {\n    const result = await this.service.findById(id);\n    return result;\n  }\n\n  /**\n   * Obter foto do Utilizador\n   * \n   * @param id   identificador primário\n   * @returns {User}\n   */\n  @ApiBearerAuth()\n  @Get('getUserPhoto/:id')\n  async findUserPhoto(@Param('id') id: number): Promise {\n    const result = await this.service.findUserPhoto(id);\n    return result;\n  }  \n\n  /**\n   * Actualizar Utilidador\n   * \n   * @param {UpdateUserDto} dto \n   * @returns {User}\n   */\n  @ApiBearerAuth()\n  @Put()\n  async update(@Body() dto: UpdateUserDto): Promise {\n    return await this.service.updateUser(dto);\n  }\n\n  /**\n   * Actualizar foto do Utilidador\n   * \n   * @param {UpdateUserPhotoDto} dto \n   * @returns {User}\n   */\n  @ApiBearerAuth()\n  @Put('updateUserPhoto')\n  async updateUserPhoto(@Body() dto: UpdateUserPhotoDto): Promise {\n    return await this.service.updateUserPhoto(dto);\n  }\n\n  /**\n   * Criar Utilidador\n   * \n   * @param {CreateUserDto} dto \n   * @returns {User}\n   */\n  @Post()\n  @UsePipes(new ValidationPipe())\n  async create(@Body() dto: CreateUserDto): Promise {\n    return await this.service.createUser(dto);\n  }\n\n  /**\n   * Excluir Utilidador\n   * \n   * @param {string} email \n   * @returns {User}\n   */\n  @ApiBearerAuth()\n  @Delete()\n  async delete(@Param('email') email: string): Promise {\n    return await this.service.delete(email);\n  }\n\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aplicativo/services/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Serviço do Utilizador\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findSignIn\n                            \n                            \n                                    Async\n                                findUserPhoto\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                    Async\n                                updateUserPhoto\n                            \n                            \n                                    Async\n                                validate\n                            \n                            \n                                    Async\n                                validatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/aplicativo/services/user.service.ts:14\n                            \n                        \n\n                \n                    \n                            Injeção de Dependencia pelo constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Repositório de Dados de Utilizador\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/user.service.ts:273\n                        \n                    \n\n\n            \n                \n                        Cria um novo Utilizador\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                ResponseDTO => response.data = Utilizador incluído\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/user.service.ts:309\n                        \n                    \n\n\n            \n                \n                        Exclui um utilizador\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    conta de email do utilizador\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                ResponseDTO => response.data = Utilizador excluído\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/user.service.ts:150\n                        \n                    \n\n\n            \n                \n                        Obtém o Utilizador por código primário\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    código interno do utilizador\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Utilizador\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/user.service.ts:108\n                        \n                    \n\n\n            \n                \n                        Obtém um Utilizador por email\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Conta de e-mail do utilizador\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Utilizador\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findSignIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    findSignIn(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/user.service.ts:134\n                        \n                    \n\n\n            \n                \n                        Obtém o Utilizador por email\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    conta de e-mail do utilizador\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Utilizador\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserPhoto\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserPhoto(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/user.service.ts:118\n                        \n                    \n\n\n            \n                \n                        Obtém a foto do Utilizador por id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    código interno do Utilizador\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Imagem do Utilizador\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/user.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Obter todos os utilizadores activos\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Utilizadores Ativos\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/user.service.ts:69\n                        \n                    \n\n\n            \n                \n                        Obter Utilizador por código de identificador primário\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Código interno primário do Utilizador\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Utilizador\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/user.service.ts:235\n                        \n                    \n\n\n            \n                \n                        Actualiza os dados do Utilizador\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                ResponseDTO => response.data = Utilizador actualizado\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUserPhoto\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserPhoto(updateUserPhotoDto: UpdateUserPhotoDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/user.service.ts:204\n                        \n                    \n\n\n            \n                \n                        Actualiza a foto do Utilizador\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateUserPhotoDto\n                                            \n                                                            UpdateUserPhotoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                ResponseDTO => response.data = Utilizador actualizado\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(id: number, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/user.service.ts:175\n                        \n                    \n\n\n            \n                \n                        Valida a senha do Utilizador\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    código interno do utilizador\n\n                                            \n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    senha do utilizador\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                ResponseDTO => response.data = User\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validatePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    validatePassword(plain: string, hash: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/aplicativo/services/user.service.ts:159\n                        \n                    \n\n\n            \n                \n                        Compara a senha do utilizador com a senha hashed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                plain\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                hash\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                ResponseDTO => response.data = true/false\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../entities/user.entity';\nimport { CreateUserDto, UpdateUserDto, UpdateUserPhotoDto } from '../dto/user-dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { hash, compare, genSalt} from \"bcrypt\";\nimport { IResponse } from '../interfaces/iresponse.interface';\nimport { ResponseDto } from '../dto/response-dto';\n\n/**\n * Serviço do Utilizador\n */\n@Injectable()\nexport class UserService {\n  \n   /**\n    * Injeção de Dependencia pelo constructor\n    * \n    * @param {Repository} repository Repositório de Dados de Utilizador\n    */\n   constructor(\n    @InjectRepository(User)\n    private readonly repository: Repository\n    ) {\n\n  }\n\n /**  \n  * Obter todos os utilizadores activos\n  * \n  * @returns {User[]} Utilizadores Ativos\n  */\n  async getAll(): Promise {  \n    try {\n      const response = new ResponseDto();\n      response.success = true;      \n      response.data = await this.repository.find({\n        select: {\n          id: true,\n          uuid: true,\n          name: true,\n          role: true,\n          email: true,                    \n          createdAt: true,\n          updatedAt: true\n        },\n        where: {\n          active: true\n        },\n        order: {          \n          name: 'ASC'\n        },\n        cache: true\n      });\n      response.error = null;\n      response.message = '';\n      return response;\n    } catch (error) {\n      return { success: false, data: null, message: 'Error occurred.', error: error };      \n    }\n  }\n\n  /**  \n   * Obter Utilizador por código de identificador primário\n   * \n   * @param {number} id  Código interno primário do Utilizador\n   * @returns {User} Utilizador\n   */\n  async getById(id: number): Promise {  \n    try {\n      const response = new ResponseDto();\n      response.success = true;      \n      response.data = await this.repository.find({\n        select: {\n          id: true,\n          uuid: true,\n          name: true,\n          role: true,\n          email: true,                    \n          createdAt: true,\n          updatedAt: true\n        },\n        where: {\n          id: id\n        },\n        relations: {\n          contas: true,\n        },\n        order: {          \n          name: 'ASC'\n        },\n        cache: true\n      });\n      response.error = null;\n      response.message = '';\n      return response;\n    } catch (error) {\n      return { success: false, data: null, message: 'Error occurred.', error: error };      \n    }\n  }\n\n  /**  \n   * Obtém um Utilizador por email\n   * \n   * @param {email} email  Conta de e-mail do utilizador\n   * @returns {User} Utilizador\n   */\n  async findOne(email: string): Promise {    \n    return await this.repository.findOneBy({ email: email });\n  }\n\n /**  \n  * Obtém a foto do Utilizador por id\n  * \n  * @param {number} id  código interno do Utilizador\n  * @returns {User} Imagem do Utilizador\n  */\n  async findUserPhoto(id: number): Promise {\n    const users = await this.repository.find(\n      {\n        select: { image: true },\n        where: { id: id },                \n      }\n    );    \n    if (users && users.length > 0) return users[0]; else return null;    \n  }\n\n  /**  \n   * Obtém o Utilizador por email\n   * \n   * @param {email} email  conta de e-mail do utilizador\n   * @returns {User} Utilizador\n   */\n  async findSignIn(email: string): Promise {\n    const users = await this.repository.find(\n      {\n        select: { id: true, uuid: true, name: true, email: true, role: true, createdAt: true, password: true },\n        where: { email: email },                \n      }\n    );    \n    if (users && users.length > 0) return users[0]; else return null;\n  }\n\n /**  \n  * Obtém o Utilizador por código primário\n  * \n  * @param {number} id  código interno do utilizador\n  * @returns {User} Utilizador\n  */\n  async findById(id: number): Promise {\n    return await this.repository.findOneBy({ id: id });\n  }\n\n  /**  \n   * Compara a senha do utilizador com a senha hashed\n   * \n   * @returns {boolean} ResponseDTO => response.data = true/false\n   */\n  async validatePassword(plain: string, hash: string): Promise {\n    const isPasswordMatching = await compare(plain, hash);  \n    const response = new ResponseDto();\n    response.success = true;\n    response.message = \"is Password Matching\";\n    response.data = isPasswordMatching;\n    return response;\n  }\n\n  /**  \n   * Valida a senha do Utilizador\n   * \n   * @param {number} id  código interno do utilizador\n   * @param {string} password  senha do utilizador\n   * @returns ResponseDTO => response.data = User\n   */\n  async validate(id: number, password: string): Promise {\n    try {\n      const hashedPassword = await hash(password, 10);\n      //console.log(hashedPassword);\n      const user = await this.repository.findOneBy({ id: id, password: hashedPassword });\n      if (user) {\n        const response = new ResponseDto();\n        response.success = true;\n        response.message = \"user checked by id and password\";\n        response.data = user;\n        return response;  \n      } else {\n        const response = new ResponseDto();\n        response.success = false;\n        response.message = \"id and password cannot validate user\";\n        response.data = user;\n        return response;\n      }\n    } catch (error) {\n      return { success: false, message: 'record cant be updated', data: null, error: error };\n    }\n  }\n\n  /**  \n   * Actualiza a foto do Utilizador\n   * \n   * @param {UpdateUserPhotoDto} UpdateUserPhotoDto  DTO de actualização de imagem do utilizador\n   * @returns ResponseDTO => response.data = Utilizador actualizado\n   */  \n  async updateUserPhoto(updateUserPhotoDto: UpdateUserPhotoDto): Promise {\n    try {      \n      const response = new ResponseDto();\n      const userToUpdate = await this.repository.findOneBy({ id: updateUserPhotoDto.id });\n      if (userToUpdate) {\n        userToUpdate.image = updateUserPhotoDto.image;\n        const result = this.repository.save(userToUpdate);\n\n        response.success = true;\n        response.data = result;\n        response.message = 'photo has been updated';\n        response.error = null;        \n      } else {\n        response.success = false;\n        response.data = null;\n        response.message = 'invalid user';\n        response.error = null;\n      }\n  \n      return response;\n    } catch (error) {\n      return { success: false, message: 'record cant be updated', data: null, error: error };  \n    }    \n  }\n\n  /**  \n   * Actualiza os dados do Utilizador\n   * \n   * @param {UpdateUserDto} UpdateUserDto  DTO de actualização do utilizador\n   * @returns ResponseDTO => response.data = Utilizador actualizado\n   */  \n  async updateUser(updateUserDto: UpdateUserDto): Promise {\n    try {\n      //const hashedPassword = await bcrypt.hash(updateUserDto.password, 10);\n      const response = new ResponseDto();\n      const userToUpdate = await this.repository.findOneBy({ email: updateUserDto.email });\n      if (userToUpdate) {\n        const user = new User();\n        user.name = (userToUpdate.name !== updateUserDto.name) && updateUserDto.name.length > 0 ? updateUserDto.name : userToUpdate.name;\n        user.email = userToUpdate.email;\n        user.password = userToUpdate.password;\n        user.role = (userToUpdate.role !== updateUserDto.role) && updateUserDto.role > 0 ? updateUserDto.role : userToUpdate.role;\n        user.active = updateUserDto.active;\n\n        const result = this.repository.save(user);\n\n        response.success = true;\n        response.data = result;\n        response.message = 'record has been updated';\n        response.error = null;        \n      } else {\n        response.success = false;\n        response.data = null;\n        response.message = 'invalid user';\n        response.error = null;\n      }\n  \n      return response;\n    } catch (error) {\n      return { success: false, message: 'record cant be updated', data: null, error: error };  \n    }\n  }\n\n  /**  \n   * Cria um novo Utilizador\n   * \n   * @param {CreateUserDto} CreateUserDto  DTO de criação do utilizador\n   * @returns ResponseDTO => response.data = Utilizador incluído\n   */  \n  async createUser(createUserDto: CreateUserDto): Promise {\n    try {\n      const hashedPassword = await hash(createUserDto.password, 10);\n\n      const response = new ResponseDto();\n\n      const user = new User();\n      user.name = createUserDto.name;\n      user.email = createUserDto.email;\n      user.password = hashedPassword;\n      user.role = createUserDto.role;\n  \n      const result = await this.repository.save(user);\n      if (result.id) {\n        response.success = true;\n        response.message = 'record has been created';\n        response.data = result;\n        response.error = null;\n      } else {\n        response.success = false;\n        response.message = 'record cant be created';\n        response.data = result;\n        response.error = null;          \n      }\n      return response;      \n    } catch (error) {\n      return { success: false, message: 'record cant be created', data: null, error: error };  \n    }   \n  }\n\n  /**  \n   * Exclui um utilizador\n   * \n   * @param {string} email  conta de email do utilizador\n   * @returns ResponseDTO => response.data = Utilizador excluído\n   */  \n  async delete(email: string): Promise {\n    try {\n      const response = new ResponseDto();\n      const result = await this.repository.delete( { email: email } );\n      if (result.affected && result.affected > 0) {\n        response.success = true;\n        response.data = result.affected;\n        response.message = 'record has been deleted';\n        response.error = result.raw;\n      } else {\n        response.success = false;\n        response.data = result.affected;\n        response.message = 'record cant be deleted';\n        response.error = result.raw;          \n      }\n      return response;\n    } catch (error) {\n      return {success: false, message: 'record cant be deleted', data: null, error: error };\n    }\n  }\n\n  /*\n  private generatePassword(pwd: string): any {\n    genSalt(10, function(err, salt) {\n      hash(pwd, salt, function(err, hash) {\n          return hash;\n      });\n  });\n  }*/\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/aplicativo/controllers/authentication.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/aplicativo/controllers/conta.controller.ts\n            \n            controller\n            ContaController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/aplicativo/controllers/lancamento.controller.ts\n            \n            controller\n            LancamentoController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/aplicativo/controllers/notification.controller.ts\n            \n            controller\n            NotificationController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/aplicativo/controllers/user.controller.ts\n            \n            controller\n            UserController\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/aplicativo/decorators/get-user.decorator.ts\n            \n            variable\n            GetUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/aplicativo/dto/authentication-dto.ts\n            \n            class\n            CreateAuthenticationDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/aplicativo/dto/authentication-dto.ts\n            \n            class\n            UpdateAuthenticationDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/aplicativo/dto/conta-dto.ts\n            \n            class\n            CreateContaDto\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/aplicativo/dto/conta-dto.ts\n            \n            class\n            UpdateContaDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/aplicativo/dto/lancamento-dto.ts\n            \n            class\n            CreateLancamentoDto\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/aplicativo/dto/lancamento-dto.ts\n            \n            class\n            UpdateLancamentoDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/aplicativo/dto/notification-dto.ts\n            \n            class\n            CreateNotificationDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/aplicativo/dto/notification-dto.ts\n            \n            class\n            UpdateNotificationDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/aplicativo/dto/response-dto.ts\n            \n            class\n            ResponseDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/aplicativo/dto/sign-in-dto.ts\n            \n            class\n            SignInDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/aplicativo/dto/user-dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/aplicativo/dto/user-dto.ts\n            \n            class\n            LoginUserDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/aplicativo/dto/user-dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/aplicativo/dto/user-dto.ts\n            \n            class\n            UpdateUserPhotoDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/aplicativo/entities/authentication.entity.ts\n            \n            entity\n            Authentication\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/aplicativo/entities/conta.entity.ts\n            \n            entity\n            Conta\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/aplicativo/entities/lancamento.entity.ts\n            \n            entity\n            Lancamento\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/aplicativo/entities/notification.entity.ts\n            \n            entity\n            Notification\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/aplicativo/entities/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/aplicativo/guards/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/aplicativo/interfaces/iresponse.interface.ts\n            \n            interface\n            IResponse\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/aplicativo/services/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/aplicativo/services/conta.service.ts\n            \n            injectable\n            ContaService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/aplicativo/services/lancamento.service.ts\n            \n            injectable\n            LancamentoService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/aplicativo/services/notification.service.ts\n            \n            injectable\n            NotificationService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/aplicativo/services/user.service.ts\n            \n            injectable\n            UserService\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/config/typeorm.config.ts\n            \n            variable\n            jwtConstants\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/typeorm.config.ts\n            \n            variable\n            typeOrmConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.1.2\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.1.2\n        \n            @nestjs/jwt : ^10.1.0\n        \n            @nestjs/passport : ^10.0.0\n        \n            @nestjs/platform-express : ^10.1.2\n        \n            @nestjs/swagger : ^7.1.2\n        \n            @nestjs/typeorm : ^10.0.0\n        \n            @types/bcrypt : ^5.0.0\n        \n            bcrypt : ^5.1.1\n        \n            cache-manager-redis-store : ^1.5.0\n        \n            class-transformer : ^0.2.3\n        \n            class-validator : ^0.11.0\n        \n            dotenv : ^8.2.0\n        \n            lodash : ^4.17.15\n        \n            mysql2 : ^3.5.1\n        \n            npm-check-updates : ^16.10.16\n        \n            passport : ^0.4.1\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.0\n        \n            rxjs : ^7.8.1\n        \n            slugify : ^1.6.6\n        \n            swagger-ui-express : ^4.1.2\n        \n            typeorm : ^0.3.17\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Função de início do serviço\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAPI-CONTROLE\nDefinição\nA API-CONTROLE é um serviço REST API destinado ao controle da informação de Autenticação, Utilizadores, Contas e Lançamentos.\nTecnologia\nFoi concebido em Typescript com NestJs de forma a permitir escalar.\nDocumentação\nA documentação do código é gerada pela biblioteca compodoc e deve ser executada sempre que houver mudanças no software.\nPara executar, usar:\nExample :   > npm run compodocConfiguração\nExample :   > cd api-consolidado\n\n   > npm install\n\n   > copy .env.sample .env  Execução\nExample :   > npm run start:devLicença\nEste software é gratuito e de código livre, GNU GENERAL PUBLIC LICENSE 3.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AplicativoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AplicativoModule\n\n\n\ncluster_AplicativoModule_exports\n\n\n\ncluster_AplicativoModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthenticationService \n\nAuthenticationService \n\n\n\nUserService \n\nUserService \n\n\n\nAplicativoModule\n\nAplicativoModule\n\nAuthenticationService  -->\n\nAplicativoModule->AuthenticationService \n\n\n\nUserService  -->\n\nAplicativoModule->UserService \n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAplicativoModule->AppModule\n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAplicativoModule -->\n\nAuthenticationService->AplicativoModule\n\n\n\n\n\nContaService\n\nContaService\n\nAplicativoModule -->\n\nContaService->AplicativoModule\n\n\n\n\n\nLancamentoService\n\nLancamentoService\n\nAplicativoModule -->\n\nLancamentoService->AplicativoModule\n\n\n\n\n\nNotificationService\n\nNotificationService\n\nAplicativoModule -->\n\nNotificationService->AplicativoModule\n\n\n\n\n\nUserService\n\nUserService\n\nAplicativoModule -->\n\nUserService->AplicativoModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    14 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.\n        \n            Description : API de Controle\n        \n            License : GNU\n        \n            Author : Andre Mesquita \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GetUser   (src/.../get-user.decorator.ts)\n                        \n                        \n                            jwtConstants   (src/.../typeorm.config.ts)\n                        \n                        \n                            typeOrmConfig   (src/.../typeorm.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/aplicativo/decorators/get-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((data, req): User => {\n  return req.user;\n})\n                    \n                \n\n            \n                \n                    Obtém o Utilizador da requisição\n\n                \n            \n\n        \n    \n\n    src/config/typeorm.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret : process.env.JWT_SECRET,\n}\n                    \n                \n\n            \n                \n                    Constante de segurança do token JWT\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        typeOrmConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TypeOrmModuleOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'mysql',\n  host: process.env.MYSQL_HOST,\n  port: parseInt(process.env.MYSQL_PORT,3306),\n  username: process.env.MYSQL_USERNAME, \n  password: process.env.MYSQL_PASSWORD,\n  database: process.env.MYSQL_DATABASE,\n  entities: [__dirname + '/../**/*.entity.{js,ts}'],\n  synchronize: false,\n  debug: process.env.DEBUG == 'true' ? true : false,\n  insecureAuth: process.env.INSECURE_AUTH == 'true' ? true : false,\n}\n                    \n                \n\n            \n                \n                    Constante de configuração do acesso a banco de dados\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
